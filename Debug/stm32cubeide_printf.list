
stm32cubeide_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080089e0  080089e0  000189e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00018d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001dc  08008f24  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08008f24  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a851  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b1f  00000000  00000000  0002aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c37  00000000  00000000  0002d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d5b  00000000  00000000  000531af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5be7  00000000  00000000  0005af0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140af1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  00140b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089c4 	.word	0x080089c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080089c4 	.word	0x080089c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fb0b 	bl	80015e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f810 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f8ea 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd8:	f000 f8ca 	bl	8001170 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fdc:	f000 f898 	bl	8001110 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("debug string test\n\r");
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <main+0x28>)
 8000fe2:	f004 f953 	bl	800528c <iprintf>
	  HAL_Delay(500);
 8000fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fea:	f000 fb59 	bl	80016a0 <HAL_Delay>
	  printf("debug string test\n\r");
 8000fee:	e7f7      	b.n	8000fe0 <main+0x18>
 8000ff0:	080089e0 	.word	0x080089e0

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b4      	sub	sp, #208	; 0xd0
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fafc 	bl	8004600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2284      	movs	r2, #132	; 0x84
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 faed 	bl	8004600 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <SystemClock_Config+0x114>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a37      	ldr	r2, [pc, #220]	; (8001108 <SystemClock_Config+0x114>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <SystemClock_Config+0x114>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <SystemClock_Config+0x118>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <SystemClock_Config+0x118>)
 8001044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <SystemClock_Config+0x118>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001072:	2304      	movs	r3, #4
 8001074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001078:	23d8      	movs	r3, #216	; 0xd8
 800107a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fb1c 	bl	80026cc <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800109a:	f000 f8dd 	bl	8001258 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109e:	f001 fac5 	bl	800262c <HAL_PWREx_EnableOverDrive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010a8:	f000 f8d6 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010d2:	2107      	movs	r1, #7
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fd9d 	bl	8002c14 <HAL_RCC_ClockConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80010e0:	f000 f8ba 	bl	8001258 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 ff87 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80010fc:	f000 f8ac 	bl	8001258 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	37d0      	adds	r7, #208	; 0xd0
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART1_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x58>)
 8001154:	f002 fb44 	bl	80037e0 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f87b 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000270 	.word	0x20000270
 800116c:	40011000 	.word	0x40011000

08001170 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_DMA_Init+0x38>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <MX_DMA_Init+0x38>)
 800117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_DMA_Init+0x38>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2046      	movs	r0, #70	; 0x46
 8001194:	f000 fb81 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001198:	2046      	movs	r0, #70	; 0x46
 800119a:	f000 fb9a 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_GPIO_Init+0x44>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <__io_putchar>:

#define STR_SIZE 8

uint8_t str[STR_SIZE]={0};
PUTCHAR_PROTOTYPE
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	static uint16_t index = 0 ;


	str[index++] = ch;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <__io_putchar+0x54>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	b291      	uxth	r1, r2
 8001204:	4a10      	ldr	r2, [pc, #64]	; (8001248 <__io_putchar+0x54>)
 8001206:	8011      	strh	r1, [r2, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <__io_putchar+0x58>)
 8001210:	5499      	strb	r1, [r3, r2]
	if(ch=='\n'||index >= STR_SIZE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0a      	cmp	r3, #10
 8001216:	d003      	beq.n	8001220 <__io_putchar+0x2c>
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <__io_putchar+0x54>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d90e      	bls.n	800123e <__io_putchar+0x4a>
	{
		HAL_UART_Transmit_DMA(&huart1,str,index);
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <__io_putchar+0x54>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4909      	ldr	r1, [pc, #36]	; (800124c <__io_putchar+0x58>)
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <__io_putchar+0x5c>)
 800122a:	f002 fb27 	bl	800387c <HAL_UART_Transmit_DMA>
		HAL_DMA_PollForTransfer(&hdma_usart1_tx, HAL_DMA_FULL_TRANSFER, 100);
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	2100      	movs	r1, #0
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <__io_putchar+0x60>)
 8001234:	f000 fd08 	bl	8001c48 <HAL_DMA_PollForTransfer>
		index = 0;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <__io_putchar+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
	}
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
 800123e:	687b      	ldr	r3, [r7, #4]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000200 	.word	0x20000200
 800124c:	200001f8 	.word	0x200001f8
 8001250:	20000270 	.word	0x20000270
 8001254:	20000210 	.word	0x20000210

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_MspInit+0x44>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_MspInit+0x44>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_MspInit+0x44>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x44>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x44>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x44>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_UART_MspInit+0xec>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d15f      	bne.n	8001392 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a2c      	ldr	r2, [pc, #176]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_UART_MspInit+0xf0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001302:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001314:	2307      	movs	r3, #7
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <HAL_UART_MspInit+0xf4>)
 8001320:	f000 ffda 	bl	80022d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <HAL_UART_MspInit+0xfc>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800135a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800135e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 8001368:	f000 face 	bl	8001908 <HAL_DMA_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001372:	f7ff ff71 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800137a:	669a      	str	r2, [r3, #104]	; 0x68
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_UART_MspInit+0xf8>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 fa87 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800138c:	2025      	movs	r0, #37	; 0x25
 800138e:	f000 faa0 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40011000 	.word	0x40011000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	20000210 	.word	0x20000210
 80013ac:	400264b8 	.word	0x400264b8

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f92c 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <USART1_IRQHandler+0x10>)
 8001412:	f002 faaf 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000270 	.word	0x20000270

08001420 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Stream7_IRQHandler+0x10>)
 8001426:	f000 fcef 	bl	8001e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000210 	.word	0x20000210

08001434 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e00a      	b.n	800145c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001446:	f3af 8000 	nop.w
 800144a:	4601      	mov	r1, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	b2ca      	uxtb	r2, r1
 8001454:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	dbf0      	blt.n	8001446 <_read+0x12>
	}

return len;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e009      	b.n	8001494 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff feb3 	bl	80011f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf1      	blt.n	8001480 <_write+0x12>
	}
	return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_close>:

int _close(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ce:	605a      	str	r2, [r3, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_isatty>:

int _isatty(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x50>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <_sbrk+0x16>
		heap_end = &end;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <_sbrk+0x50>)
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <_sbrk+0x54>)
 8001524:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <_sbrk+0x50>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <_sbrk+0x50>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	466a      	mov	r2, sp
 8001536:	4293      	cmp	r3, r2
 8001538:	d907      	bls.n	800154a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800153a:	f003 f837 	bl	80045ac <__errno>
 800153e:	4602      	mov	r2, r0
 8001540:	230c      	movs	r3, #12
 8001542:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e006      	b.n	8001558 <_sbrk+0x48>
	}

	heap_end += incr;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <_sbrk+0x50>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4a03      	ldr	r2, [pc, #12]	; (8001560 <_sbrk+0x50>)
 8001554:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000204 	.word	0x20000204
 8001564:	200002f8 	.word	0x200002f8

08001568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SystemInit+0x28>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <SystemInit+0x28>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SystemInit+0x28>)
 800157e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001582:	609a      	str	r2, [r3, #8]
#endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
  ldr  r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015be:	f7ff ffd3 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f002 fff9 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff fcff 	bl	8000fc8 <main>
  bx  lr    
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80015d0:	08008d48 	.word	0x08008d48
  ldr  r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015d8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80015dc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80015e0:	200002f8 	.word	0x200002f8

080015e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC_IRQHandler>

080015e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f000 f94a 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f805 	bl	8001600 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015f6:	f7ff fe37 	bl	8001268 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f965 	bl	80018ee <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f92d 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	200002f0 	.word	0x200002f0

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200002f0 	.word	0x200002f0

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_Delay+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	4313      	orrs	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00
 8001728:	05fa0000 	.word	0x05fa0000

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff feb8 	bl	8001688 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e099      	b.n	8001a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e00f      	b.n	8001966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fe9f 	bl	8001688 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d908      	bls.n	8001966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e078      	b.n	8001a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e8      	bne.n	8001946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_DMA_Init+0x158>)
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4313      	orrs	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d117      	bne.n	8001a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fbe9 	bl	80021e4 <DMA_CheckFifoParam>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a26:	2301      	movs	r3, #1
 8001a28:	e016      	b.n	8001a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fba0 	bl	8002178 <DMA_CalcBaseAndBitshift>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	223f      	movs	r2, #63	; 0x3f
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	f010803f 	.word	0xf010803f

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Start_IT+0x26>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e048      	b.n	8001b1c <HAL_DMA_Start_IT+0xb8>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d137      	bne.n	8001b0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fb32 	bl	800211c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0216 	orr.w	r2, r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ae2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0208 	orr.w	r2, r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e005      	b.n	8001b1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b32:	f7ff fda9 	bl	8001688 <HAL_GetTick>
 8001b36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d008      	beq.n	8001b56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e052      	b.n	8001bfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0216 	bic.w	r2, r2, #22
 8001b64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <HAL_DMA_Abort+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0208 	bic.w	r2, r2, #8
 8001b94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba6:	e013      	b.n	8001bd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba8:	f7ff fd6e 	bl	8001688 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e015      	b.n	8001bfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e4      	bne.n	8001ba8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	223f      	movs	r2, #63	; 0x3f
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d004      	beq.n	8001c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00c      	b.n	8001c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2205      	movs	r2, #5
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	460b      	mov	r3, r1
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8001c56:	2300      	movs	r3, #0
 8001c58:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8001c5a:	f7ff fd15 	bl	8001688 <HAL_GetTick>
 8001c5e:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0bf      	b.n	8001dfe <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0b2      	b.n	8001dfe <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e005      	b.n	8001cb8 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001cc4:	e05a      	b.n	8001d7c <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d017      	beq.n	8001cfe <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_DMA_PollForTransfer+0x9c>
 8001cd4:	f7ff fcd8 	bl	8001688 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d20c      	bcs.n	8001cfe <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e07f      	b.n	8001dfe <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2208      	movs	r2, #8
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2208      	movs	r2, #8
 8001d26:	409a      	lsls	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0202 	orr.w	r2, r3, #2
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2204      	movs	r2, #4
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2204      	movs	r2, #4
 8001d76:	409a      	lsls	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_DMA_PollForTransfer+0x14a>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d099      	beq.n	8001cc6 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d018      	beq.n	8001dcc <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff febc 	bl	8001b24 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2230      	movs	r2, #48	; 0x30
 8001db2:	409a      	lsls	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e018      	b.n	8001dfe <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2230      	movs	r2, #48	; 0x30
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001dee:	e005      	b.n	8001dfc <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer flag */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2210      	movs	r2, #16
 8001df6:	409a      	lsls	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_DMA_IRQHandler+0x258>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_DMA_IRQHandler+0x25c>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2208      	movs	r2, #8
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01a      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0204 	bic.w	r2, r2, #4
 8001e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2208      	movs	r2, #8
 8001e62:	409a      	lsls	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2201      	movs	r2, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	f043 0202 	orr.w	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2204      	movs	r2, #4
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d012      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2204      	movs	r2, #4
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d043      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d03c      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2210      	movs	r2, #16
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d108      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d024      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	e01f      	b.n	8001f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
 8001f48:	e016      	b.n	8001f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0208 	bic.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 808e 	beq.w	80020a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8086 	beq.w	80020a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d136      	bne.n	8002020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0216 	bic.w	r2, r2, #22
 8001fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_DMA_IRQHandler+0x1da>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	223f      	movs	r2, #63	; 0x3f
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	2b00      	cmp	r3, #0
 8002014:	d07d      	beq.n	8002112 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
        }
        return;
 800201e:	e078      	b.n	8002112 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01c      	beq.n	8002068 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d108      	bne.n	800204e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	2b00      	cmp	r3, #0
 8002042:	d030      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
 800204c:	e02b      	b.n	80020a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d027      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e022      	b.n	80020a6 <HAL_DMA_IRQHandler+0x29e>
 8002060:	20000000 	.word	0x20000000
 8002064:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0210 	bic.w	r2, r2, #16
 8002084:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d032      	beq.n	8002114 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2205      	movs	r2, #5
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d307      	bcc.n	80020ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f2      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x2ca>
 80020ec:	e000      	b.n	80020f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e000      	b.n	8002114 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002112:	bf00      	nop
    }
  }
}
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop

0800211c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d108      	bne.n	800215c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800215a:	e007      	b.n	800216c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3b10      	subs	r3, #16
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <DMA_CalcBaseAndBitshift+0x60>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <DMA_CalcBaseAndBitshift+0x64>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d908      	bls.n	80021b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <DMA_CalcBaseAndBitshift+0x68>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58
 80021b6:	e006      	b.n	80021c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <DMA_CalcBaseAndBitshift+0x68>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	aaaaaaab 	.word	0xaaaaaaab
 80021dc:	08008a0c 	.word	0x08008a0c
 80021e0:	fffffc00 	.word	0xfffffc00

080021e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d855      	bhi.n	80022b0 <DMA_CheckFifoParam+0xcc>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <DMA_CheckFifoParam+0x28>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800222f 	.word	0x0800222f
 8002214:	0800221d 	.word	0x0800221d
 8002218:	080022b1 	.word	0x080022b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d045      	beq.n	80022b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e042      	b.n	80022b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002236:	d13f      	bne.n	80022b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e03c      	b.n	80022b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	d121      	bne.n	800228c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d836      	bhi.n	80022bc <DMA_CheckFifoParam+0xd8>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <DMA_CheckFifoParam+0x70>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002265 	.word	0x08002265
 8002258:	0800226b 	.word	0x0800226b
 800225c:	08002265 	.word	0x08002265
 8002260:	0800227d 	.word	0x0800227d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e02f      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d024      	beq.n	80022c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227a:	e021      	b.n	80022c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002284:	d11e      	bne.n	80022c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800228a:	e01b      	b.n	80022c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d902      	bls.n	8002298 <DMA_CheckFifoParam+0xb4>
 8002292:	2b03      	cmp	r3, #3
 8002294:	d003      	beq.n	800229e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002296:	e018      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e015      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00e      	beq.n	80022c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
      break;
 80022ae:	e00b      	b.n	80022c8 <DMA_CheckFifoParam+0xe4>
      break;
 80022b0:	bf00      	nop
 80022b2:	e00a      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022b4:	bf00      	nop
 80022b6:	e008      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022b8:	bf00      	nop
 80022ba:	e006      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022bc:	bf00      	nop
 80022be:	e004      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022c0:	bf00      	nop
 80022c2:	e002      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;   
 80022c4:	bf00      	nop
 80022c6:	e000      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022c8:	bf00      	nop
    }
  } 
  
  return status; 
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e175      	b.n	80025e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8164 	bne.w	80025de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d00b      	beq.n	8002336 <HAL_GPIO_Init+0x5e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232a:	2b11      	cmp	r3, #17
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b12      	cmp	r3, #18
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x100>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d123      	bne.n	8002420 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80be 	beq.w	80025de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_GPIO_Init+0x320>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_GPIO_Init+0x320>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_GPIO_Init+0x320>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800247a:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_GPIO_Init+0x324>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_GPIO_Init+0x328>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d037      	beq.n	8002516 <HAL_GPIO_Init+0x23e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_GPIO_Init+0x32c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d031      	beq.n	8002512 <HAL_GPIO_Init+0x23a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a55      	ldr	r2, [pc, #340]	; (8002608 <HAL_GPIO_Init+0x330>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x236>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a54      	ldr	r2, [pc, #336]	; (800260c <HAL_GPIO_Init+0x334>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x232>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a53      	ldr	r2, [pc, #332]	; (8002610 <HAL_GPIO_Init+0x338>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x22e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_GPIO_Init+0x33c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x22a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_GPIO_Init+0x340>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x226>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_GPIO_Init+0x344>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x222>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_GPIO_Init+0x348>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x21e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_GPIO_Init+0x34c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x21a>
 80024ee:	2309      	movs	r3, #9
 80024f0:	e012      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024f2:	230a      	movs	r3, #10
 80024f4:	e010      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024f6:	2308      	movs	r3, #8
 80024f8:	e00e      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00c      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00a      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002502:	2305      	movs	r3, #5
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002506:	2304      	movs	r3, #4
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x240>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x240>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002528:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_GPIO_Init+0x324>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_GPIO_Init+0x350>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255a:	4a33      	ldr	r2, [pc, #204]	; (8002628 <HAL_GPIO_Init+0x350>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_GPIO_Init+0x350>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_GPIO_Init+0x350>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_GPIO_Init+0x350>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x350>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_GPIO_Init+0x350>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <HAL_GPIO_Init+0x350>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f ae86 	bls.w	80022f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	3724      	adds	r7, #36	; 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40021c00 	.word	0x40021c00
 8002620:	40022000 	.word	0x40022000
 8002624:	40022400 	.word	0x40022400
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800265a:	f7ff f815 	bl	8001688 <HAL_GetTick>
 800265e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002660:	e009      	b.n	8002676 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002662:	f7ff f811 	bl	8001688 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002670:	d901      	bls.n	8002676 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e022      	b.n	80026bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002682:	d1ee      	bne.n	8002662 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002690:	f7fe fffa 	bl	8001688 <HAL_GetTick>
 8002694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002696:	e009      	b.n	80026ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002698:	f7fe fff6 	bl	8001688 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d901      	bls.n	80026ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e007      	b.n	80026bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026b8:	d1ee      	bne.n	8002698 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e291      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8087 	beq.w	80027fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f0:	4b96      	ldr	r3, [pc, #600]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d00c      	beq.n	8002716 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fc:	4b93      	ldr	r3, [pc, #588]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d112      	bne.n	800272e <HAL_RCC_OscConfig+0x62>
 8002708:	4b90      	ldr	r3, [pc, #576]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002714:	d10b      	bne.n	800272e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002716:	4b8d      	ldr	r3, [pc, #564]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d06c      	beq.n	80027fc <HAL_RCC_OscConfig+0x130>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d168      	bne.n	80027fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e26b      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x7a>
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e02e      	b.n	80027a4 <HAL_RCC_OscConfig+0xd8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x9c>
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xd8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0xc0>
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a75      	ldr	r2, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a72      	ldr	r2, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xd8>
 800278c:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b6c      	ldr	r3, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6b      	ldr	r2, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe ff6c 	bl	8001688 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe ff68 	bl	8001688 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e21f      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xe8>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe ff58 	bl	8001688 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe ff54 	bl	8001688 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e20b      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x110>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d069      	beq.n	80028de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b08      	cmp	r3, #8
 8002820:	d11c      	bne.n	800285c <HAL_RCC_OscConfig+0x190>
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d116      	bne.n	800285c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x17a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e1df      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	493d      	ldr	r1, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	e040      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d023      	beq.n	80028ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002864:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a38      	ldr	r2, [pc, #224]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ff0a 	bl	8001688 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe ff06 	bl	8001688 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1bd      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4929      	ldr	r1, [pc, #164]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fee6 	bl	8001688 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fee2 	bl	8001688 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e199      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d038      	beq.n	800295c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d019      	beq.n	8002926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_RCC_OscConfig+0x280>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fec3 	bl	8001688 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002906:	f7fe febf 	bl	8001688 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e176      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x23a>
 8002924:	e01a      	b.n	800295c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_RCC_OscConfig+0x280>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fea9 	bl	8001688 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293a:	f7fe fea5 	bl	8001688 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d903      	bls.n	8002950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e15c      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
 800294c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	4b91      	ldr	r3, [pc, #580]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a4 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_OscConfig+0x4d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7fe fe6d 	bl	8001688 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7fe fe69 	bl	8001688 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e120      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x4d0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x31a>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	e02d      	b.n	8002a42 <HAL_RCC_OscConfig+0x376>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x33c>
 80029ee:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a66      	ldr	r2, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x376>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x35e>
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x376>
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fe1d 	bl	8001688 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fe19 	bl	8001688 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0ce      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x386>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fe07 	bl	8001688 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fe03 	bl	8001688 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80a4 	beq.w	8002c04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d06b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d149      	bne.n	8002b64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fdd4 	bl	8001688 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fdd0 	bl	8001688 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e087      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	019b      	lsls	r3, r3, #6
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fda4 	bl	8001688 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fda0 	bl	8001688 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e057      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x478>
 8002b62:	e04f      	b.n	8002c04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd8a 	bl	8001688 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fd86 	bl	8001688 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e03d      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x4ac>
 8002b96:	e035      	b.n	8002c04 <HAL_RCC_OscConfig+0x538>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x544>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d028      	beq.n	8002c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d121      	bne.n	8002c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11a      	bne.n	8002c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d111      	bne.n	8002c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0d0      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	4965      	ldr	r1, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e073      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4936      	ldr	r1, [pc, #216]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe fcbe 	bl	8001688 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d10:	f7fe fcba 	bl	8001688 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e053      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 020c 	and.w	r2, r3, #12
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1eb      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d210      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 020f 	bic.w	r2, r3, #15
 8002d4e:	4922      	ldr	r1, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1d4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fc1a 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	080089f4 	.word	0x080089f4
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d007      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x32>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d008      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x38>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 80b4 	bne.w	8002f80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e1a:	60bb      	str	r3, [r7, #8]
      break;
 8002e1c:	e0b3      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e0b0      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04a      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b55      	ldr	r3, [pc, #340]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea03 0501 	and.w	r5, r3, r1
 8002e50:	ea04 0602 	and.w	r6, r4, r2
 8002e54:	4629      	mov	r1, r5
 8002e56:	4632      	mov	r2, r6
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	0154      	lsls	r4, r2, #5
 8002e62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e66:	014b      	lsls	r3, r1, #5
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	1b49      	subs	r1, r1, r5
 8002e6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	0194      	lsls	r4, r2, #6
 8002e7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e80:	018b      	lsls	r3, r1, #6
 8002e82:	1a5b      	subs	r3, r3, r1
 8002e84:	eb64 0402 	sbc.w	r4, r4, r2
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	00e2      	lsls	r2, r4, #3
 8002e92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e96:	00d9      	lsls	r1, r3, #3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	195b      	adds	r3, r3, r5
 8002e9e:	eb44 0406 	adc.w	r4, r4, r6
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	0262      	lsls	r2, r4, #9
 8002eac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002eb0:	0259      	lsls	r1, r3, #9
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f7fd ff00 	bl	8000cc8 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e049      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	f04f 0400 	mov.w	r4, #0
 8002eda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	ea03 0501 	and.w	r5, r3, r1
 8002ee6:	ea04 0602 	and.w	r6, r4, r2
 8002eea:	4629      	mov	r1, r5
 8002eec:	4632      	mov	r2, r6
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f04f 0400 	mov.w	r4, #0
 8002ef6:	0154      	lsls	r4, r2, #5
 8002ef8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002efc:	014b      	lsls	r3, r1, #5
 8002efe:	4619      	mov	r1, r3
 8002f00:	4622      	mov	r2, r4
 8002f02:	1b49      	subs	r1, r1, r5
 8002f04:	eb62 0206 	sbc.w	r2, r2, r6
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0194      	lsls	r4, r2, #6
 8002f12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	1a5b      	subs	r3, r3, r1
 8002f1a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f2c:	00d9      	lsls	r1, r3, #3
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4614      	mov	r4, r2
 8002f32:	195b      	adds	r3, r3, r5
 8002f34:	eb44 0406 	adc.w	r4, r4, r6
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	02a2      	lsls	r2, r4, #10
 8002f42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f46:	0299      	lsls	r1, r3, #10
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4621      	mov	r1, r4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	f7fd feb5 	bl	8000cc8 <__aeabi_uldivmod>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	460c      	mov	r4, r1
 8002f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	60bb      	str	r3, [r7, #8]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f82:	60bb      	str	r3, [r7, #8]
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	68bb      	ldr	r3, [r7, #8]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08008a04 	.word	0x08008a04

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe0:	f7ff ffdc 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe4:	4601      	mov	r1, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0b5b      	lsrs	r3, r3, #13
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4a03      	ldr	r2, [pc, #12]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5cd3      	ldrb	r3, [r2, r3]
 8002ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08008a04 	.word	0x08008a04

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	4964      	ldr	r1, [pc, #400]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	4959      	ldr	r1, [pc, #356]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800309a:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	494a      	ldr	r1, [pc, #296]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 808b 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe fabc 	bl	8001688 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe fab8 	bl	8001688 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e355      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d035      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d02e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d114      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fa80 	bl	8001688 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fa7c 	bl	8001688 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e317      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ba:	d111      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	4901      	ldr	r1, [pc, #4]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	0ffffcff 	.word	0x0ffffcff
 80031e0:	4bb0      	ldr	r3, [pc, #704]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4aaf      	ldr	r2, [pc, #700]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	4bad      	ldr	r3, [pc, #692]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	49aa      	ldr	r1, [pc, #680]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800320a:	4ba6      	ldr	r3, [pc, #664]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003210:	4aa4      	ldr	r2, [pc, #656]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800321a:	4ba2      	ldr	r3, [pc, #648]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800321c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	499f      	ldr	r1, [pc, #636]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003238:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003246:	4997      	ldr	r1, [pc, #604]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325a:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003268:	498e      	ldr	r1, [pc, #568]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327c:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800328a:	4986      	ldr	r1, [pc, #536]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800329e:	4b81      	ldr	r3, [pc, #516]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	497d      	ldr	r1, [pc, #500]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c0:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4975      	ldr	r1, [pc, #468]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e2:	4b70      	ldr	r3, [pc, #448]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f023 020c 	bic.w	r2, r3, #12
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	496c      	ldr	r1, [pc, #432]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003304:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	4964      	ldr	r1, [pc, #400]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003326:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	495b      	ldr	r1, [pc, #364]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003348:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	4953      	ldr	r1, [pc, #332]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800336a:	4b4e      	ldr	r3, [pc, #312]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	494a      	ldr	r1, [pc, #296]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800338c:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	4942      	ldr	r1, [pc, #264]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	4939      	ldr	r1, [pc, #228]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033de:	4931      	ldr	r1, [pc, #196]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003400:	4928      	ldr	r1, [pc, #160]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	4918      	ldr	r1, [pc, #96]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003464:	490f      	ldr	r1, [pc, #60]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d005      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347a:	f040 80d8 	bne.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003484:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348a:	f7fe f8fd 	bl	8001688 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003492:	f7fe f8f9 	bl	8001688 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b64      	cmp	r3, #100	; 0x64
 800349e:	d903      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e196      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80034a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d021      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034c8:	4b64      	ldr	r3, [pc, #400]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034d6:	4b61      	ldr	r3, [pc, #388]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	019a      	lsls	r2, r3, #6
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	071b      	lsls	r3, r3, #28
 80034fc:	4957      	ldr	r1, [pc, #348]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02e      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352e:	d129      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003530:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003544:	0f1b      	lsrs	r3, r3, #28
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	019a      	lsls	r2, r3, #6
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	071b      	lsls	r3, r3, #28
 8003564:	493d      	ldr	r1, [pc, #244]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800356e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003572:	f023 021f 	bic.w	r2, r3, #31
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	3b01      	subs	r3, #1
 800357c:	4937      	ldr	r1, [pc, #220]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01d      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003596:	0e1b      	lsrs	r3, r3, #24
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	0f1b      	lsrs	r3, r3, #28
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	019a      	lsls	r2, r3, #6
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	431a      	orrs	r2, r3
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	431a      	orrs	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	071b      	lsls	r3, r3, #28
 80035c4:	4925      	ldr	r1, [pc, #148]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d011      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	019a      	lsls	r2, r3, #6
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	071b      	lsls	r3, r3, #28
 80035f4:	4919      	ldr	r1, [pc, #100]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fe f83e 	bl	8001688 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003610:	f7fe f83a 	bl	8001688 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0d7      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b01      	cmp	r3, #1
 8003632:	f040 80cd 	bne.w	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003642:	f7fe f821 	bl	8001688 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800364a:	f7fe f81d 	bl	8001688 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	; 0x64
 8003656:	d903      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0ba      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800365c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003660:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800366c:	d0ed      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d12a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a4:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	0f1b      	lsrs	r3, r3, #28
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	019a      	lsls	r2, r3, #6
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	071b      	lsls	r3, r3, #28
 80036ca:	4944      	ldr	r1, [pc, #272]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036d2:	4b42      	ldr	r3, [pc, #264]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	493d      	ldr	r1, [pc, #244]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d022      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003700:	d11d      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	0e1b      	lsrs	r3, r3, #24
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	0f1b      	lsrs	r3, r3, #28
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	019a      	lsls	r2, r3, #6
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	431a      	orrs	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	4929      	ldr	r1, [pc, #164]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d028      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	431a      	orrs	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	071b      	lsls	r3, r3, #28
 800377e:	4917      	ldr	r1, [pc, #92]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4911      	ldr	r1, [pc, #68]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd ff6e 	bl	8001688 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037b0:	f7fd ff6a 	bl	8001688 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e007      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ce:	d1ef      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e040      	b.n	8003874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fd54 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9f8 	bl	8003c14 <UART_SetConfig>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e022      	b.n	8003874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fc96 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fd1d 	bl	80042ac <UART_CheckIdleState>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	2b20      	cmp	r3, #32
 8003890:	d164      	bne.n	800395c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_Transmit_DMA+0x22>
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e05d      	b.n	800395e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Transmit_DMA+0x34>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e056      	b.n	800395e <HAL_UART_Transmit_DMA+0xe2>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d02a      	beq.n	8003938 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e6:	4a20      	ldr	r2, [pc, #128]	; (8003968 <HAL_UART_Transmit_DMA+0xec>)
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_UART_Transmit_DMA+0xf0>)
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_UART_Transmit_DMA+0xf4>)
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	2200      	movs	r2, #0
 8003900:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	4619      	mov	r1, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3328      	adds	r3, #40	; 0x28
 8003912:	461a      	mov	r2, r3
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	f7fe f8a5 	bl	8001a64 <HAL_DMA_Start_IT>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2210      	movs	r2, #16
 8003924:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e012      	b.n	800395e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003956:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	0800446b 	.word	0x0800446b
 800396c:	080044bb 	.word	0x080044bb
 8003970:	080044d7 	.word	0x080044d7

08003974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f640 030f 	movw	r3, #2063	; 0x80f
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d113      	bne.n	80039cc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00e      	beq.n	80039cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8100 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      }
      return;
 80039ca:	e0fa      	b.n	8003bc2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80d5 	beq.w	8003b7e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d105      	bne.n	80039ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80ca 	beq.w	8003b7e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <HAL_UART_IRQHandler+0x9e>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <HAL_UART_IRQHandler+0xc6>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <HAL_UART_IRQHandler+0xee>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2204      	movs	r2, #4
 8003a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2208      	movs	r2, #8
 8003a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8c:	f043 0208 	orr.w	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00f      	beq.n	8003abe <HAL_UART_IRQHandler+0x14a>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d07f      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d004      	beq.n	8003b08 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d031      	beq.n	8003b6c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fc8e 	bl	800442a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d123      	bne.n	8003b64 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_UART_IRQHandler+0x260>)
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe f85f 	bl	8001c04 <HAL_DMA_Abort_IT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b56:	4610      	mov	r0, r2
 8003b58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	e00e      	b.n	8003b7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f84f 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b62:	e00a      	b.n	8003b7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f84b 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6a:	e006      	b.n	8003b7a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f847 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003b78:	e025      	b.n	8003bc6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7a:	bf00      	nop
    return;
 8003b7c:	e023      	b.n	8003bc6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d017      	beq.n	8003bca <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
    return;
 8003ba2:	e012      	b.n	8003bca <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <HAL_UART_IRQHandler+0x258>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fcde 	bl	800457a <UART_EndTransmit_IT>
    return;
 8003bbe:	bf00      	nop
 8003bc0:	e004      	b.n	8003bcc <HAL_UART_IRQHandler+0x258>
      return;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <HAL_UART_IRQHandler+0x258>
    return;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_IRQHandler+0x258>
    return;
 8003bca:	bf00      	nop
  }

}
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	0800454f 	.word	0x0800454f

08003bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4bb1      	ldr	r3, [pc, #708]	; (8003f08 <UART_SetConfig+0x2f4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	6939      	ldr	r1, [r7, #16]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a9f      	ldr	r2, [pc, #636]	; (8003f0c <UART_SetConfig+0x2f8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d121      	bne.n	8003cd8 <UART_SetConfig+0xc4>
 8003c94:	4b9e      	ldr	r3, [pc, #632]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d816      	bhi.n	8003cd0 <UART_SetConfig+0xbc>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x94>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc5 	.word	0x08003cc5
 8003cb0:	08003cbf 	.word	0x08003cbf
 8003cb4:	08003ccb 	.word	0x08003ccb
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e151      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e14e      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e14b      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e148      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	bf00      	nop
 8003cd6:	e144      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a8d      	ldr	r2, [pc, #564]	; (8003f14 <UART_SetConfig+0x300>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d134      	bne.n	8003d4c <UART_SetConfig+0x138>
 8003ce2:	4b8b      	ldr	r3, [pc, #556]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d829      	bhi.n	8003d44 <UART_SetConfig+0x130>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0xe4>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d45 	.word	0x08003d45
 8003d00:	08003d45 	.word	0x08003d45
 8003d04:	08003d45 	.word	0x08003d45
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003d45 	.word	0x08003d45
 8003d18:	08003d33 	.word	0x08003d33
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d45 	.word	0x08003d45
 8003d24:	08003d45 	.word	0x08003d45
 8003d28:	08003d3f 	.word	0x08003d3f
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e117      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e114      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e111      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e10e      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	bf00      	nop
 8003d4a:	e10a      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a71      	ldr	r2, [pc, #452]	; (8003f18 <UART_SetConfig+0x304>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d120      	bne.n	8003d98 <UART_SetConfig+0x184>
 8003d56:	4b6e      	ldr	r3, [pc, #440]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d00f      	beq.n	8003d84 <UART_SetConfig+0x170>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d802      	bhi.n	8003d6e <UART_SetConfig+0x15a>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <UART_SetConfig+0x164>
 8003d6c:	e010      	b.n	8003d90 <UART_SetConfig+0x17c>
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d005      	beq.n	8003d7e <UART_SetConfig+0x16a>
 8003d72:	2b30      	cmp	r3, #48	; 0x30
 8003d74:	d009      	beq.n	8003d8a <UART_SetConfig+0x176>
 8003d76:	e00b      	b.n	8003d90 <UART_SetConfig+0x17c>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e0f1      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e0ee      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d84:	2304      	movs	r3, #4
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e0eb      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e0e8      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d90:	2310      	movs	r3, #16
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	bf00      	nop
 8003d96:	e0e4      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5f      	ldr	r2, [pc, #380]	; (8003f1c <UART_SetConfig+0x308>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d120      	bne.n	8003de4 <UART_SetConfig+0x1d0>
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d00f      	beq.n	8003dd0 <UART_SetConfig+0x1bc>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d802      	bhi.n	8003dba <UART_SetConfig+0x1a6>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <UART_SetConfig+0x1b0>
 8003db8:	e010      	b.n	8003ddc <UART_SetConfig+0x1c8>
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d005      	beq.n	8003dca <UART_SetConfig+0x1b6>
 8003dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc0:	d009      	beq.n	8003dd6 <UART_SetConfig+0x1c2>
 8003dc2:	e00b      	b.n	8003ddc <UART_SetConfig+0x1c8>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e0cb      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e0c8      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e0c5      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	77fb      	strb	r3, [r7, #31]
 8003dda:	e0c2      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	bf00      	nop
 8003de2:	e0be      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a4d      	ldr	r2, [pc, #308]	; (8003f20 <UART_SetConfig+0x30c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d124      	bne.n	8003e38 <UART_SetConfig+0x224>
 8003dee:	4b48      	ldr	r3, [pc, #288]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfc:	d012      	beq.n	8003e24 <UART_SetConfig+0x210>
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d802      	bhi.n	8003e0a <UART_SetConfig+0x1f6>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <UART_SetConfig+0x204>
 8003e08:	e012      	b.n	8003e30 <UART_SetConfig+0x21c>
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0e:	d006      	beq.n	8003e1e <UART_SetConfig+0x20a>
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e14:	d009      	beq.n	8003e2a <UART_SetConfig+0x216>
 8003e16:	e00b      	b.n	8003e30 <UART_SetConfig+0x21c>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e0a1      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e09e      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e24:	2304      	movs	r3, #4
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e09b      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e098      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e30:	2310      	movs	r3, #16
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	bf00      	nop
 8003e36:	e094      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a39      	ldr	r2, [pc, #228]	; (8003f24 <UART_SetConfig+0x310>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d124      	bne.n	8003e8c <UART_SetConfig+0x278>
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e50:	d012      	beq.n	8003e78 <UART_SetConfig+0x264>
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d802      	bhi.n	8003e5e <UART_SetConfig+0x24a>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <UART_SetConfig+0x258>
 8003e5c:	e012      	b.n	8003e84 <UART_SetConfig+0x270>
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d006      	beq.n	8003e72 <UART_SetConfig+0x25e>
 8003e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e68:	d009      	beq.n	8003e7e <UART_SetConfig+0x26a>
 8003e6a:	e00b      	b.n	8003e84 <UART_SetConfig+0x270>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e077      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e72:	2302      	movs	r3, #2
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e074      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e071      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e06e      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e84:	2310      	movs	r3, #16
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	bf00      	nop
 8003e8a:	e06a      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <UART_SetConfig+0x314>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d124      	bne.n	8003ee0 <UART_SetConfig+0x2cc>
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d012      	beq.n	8003ecc <UART_SetConfig+0x2b8>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d802      	bhi.n	8003eb2 <UART_SetConfig+0x29e>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <UART_SetConfig+0x2ac>
 8003eb0:	e012      	b.n	8003ed8 <UART_SetConfig+0x2c4>
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d006      	beq.n	8003ec6 <UART_SetConfig+0x2b2>
 8003eb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ebc:	d009      	beq.n	8003ed2 <UART_SetConfig+0x2be>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x2c4>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e04d      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e04a      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e047      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e044      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	bf00      	nop
 8003ede:	e040      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <UART_SetConfig+0x318>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d139      	bne.n	8003f5e <UART_SetConfig+0x34a>
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <UART_SetConfig+0x2fc>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef8:	d027      	beq.n	8003f4a <UART_SetConfig+0x336>
 8003efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0x31c>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01c      	beq.n	8003f3e <UART_SetConfig+0x32a>
 8003f04:	e027      	b.n	8003f56 <UART_SetConfig+0x342>
 8003f06:	bf00      	nop
 8003f08:	efff69f3 	.word	0xefff69f3
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40004800 	.word	0x40004800
 8003f1c:	40004c00 	.word	0x40004c00
 8003f20:	40005000 	.word	0x40005000
 8003f24:	40011400 	.word	0x40011400
 8003f28:	40007800 	.word	0x40007800
 8003f2c:	40007c00 	.word	0x40007c00
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d006      	beq.n	8003f44 <UART_SetConfig+0x330>
 8003f36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f3a:	d009      	beq.n	8003f50 <UART_SetConfig+0x33c>
 8003f3c:	e00b      	b.n	8003f56 <UART_SetConfig+0x342>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e00e      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003f44:	2302      	movs	r3, #2
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e00b      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e008      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003f50:	2308      	movs	r3, #8
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e005      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003f56:	2310      	movs	r3, #16
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	bf00      	nop
 8003f5c:	e001      	b.n	8003f62 <UART_SetConfig+0x34e>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d17f      	bne.n	800406c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d85c      	bhi.n	800402c <UART_SetConfig+0x418>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x364>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fdd 	.word	0x08003fdd
 8003f84:	0800402d 	.word	0x0800402d
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	0800402d 	.word	0x0800402d
 8003f90:	0800402d 	.word	0x0800402d
 8003f94:	0800402d 	.word	0x0800402d
 8003f98:	08004015 	.word	0x08004015
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7ff f80a 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	61bb      	str	r3, [r7, #24]
        break;
 8003fba:	e03a      	b.n	8004032 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7ff f80e 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003fc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	005a      	lsls	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	61bb      	str	r3, [r7, #24]
        break;
 8003fda:	e02a      	b.n	8004032 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	085a      	lsrs	r2, r3, #1
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <UART_SetConfig+0x54c>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6852      	ldr	r2, [r2, #4]
 8003fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	61bb      	str	r3, [r7, #24]
        break;
 8003ff2:	e01e      	b.n	8004032 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff4:	f7fe fefa 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8003ff8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	005a      	lsls	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	61bb      	str	r3, [r7, #24]
        break;
 8004012:	e00e      	b.n	8004032 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	b29b      	uxth	r3, r3
 8004028:	61bb      	str	r3, [r7, #24]
        break;
 800402a:	e002      	b.n	8004032 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
        break;
 8004030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b0f      	cmp	r3, #15
 8004036:	d916      	bls.n	8004066 <UART_SetConfig+0x452>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403e:	d212      	bcs.n	8004066 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f023 030f 	bic.w	r3, r3, #15
 8004048:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	b29b      	uxth	r3, r3
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	b29a      	uxth	r2, r3
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	4313      	orrs	r3, r2
 800405a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	897a      	ldrh	r2, [r7, #10]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e070      	b.n	8004148 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
 800406a:	e06d      	b.n	8004148 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800406c:	7ffb      	ldrb	r3, [r7, #31]
 800406e:	2b08      	cmp	r3, #8
 8004070:	d859      	bhi.n	8004126 <UART_SetConfig+0x512>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x464>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040bb 	.word	0x080040bb
 8004080:	080040d9 	.word	0x080040d9
 8004084:	08004127 	.word	0x08004127
 8004088:	080040f1 	.word	0x080040f1
 800408c:	08004127 	.word	0x08004127
 8004090:	08004127 	.word	0x08004127
 8004094:	08004127 	.word	0x08004127
 8004098:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe ff8a 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	085a      	lsrs	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	441a      	add	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	61bb      	str	r3, [r7, #24]
        break;
 80040b8:	e038      	b.n	800412c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ba:	f7fe ff8f 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 80040be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	085a      	lsrs	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	61bb      	str	r3, [r7, #24]
        break;
 80040d6:	e029      	b.n	800412c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	085a      	lsrs	r2, r3, #1
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <UART_SetConfig+0x550>)
 80040e0:	4413      	add	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6852      	ldr	r2, [r2, #4]
 80040e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	61bb      	str	r3, [r7, #24]
        break;
 80040ee:	e01d      	b.n	800412c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f0:	f7fe fe7c 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 80040f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085a      	lsrs	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	b29b      	uxth	r3, r3
 800410a:	61bb      	str	r3, [r7, #24]
        break;
 800410c:	e00e      	b.n	800412c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	61bb      	str	r3, [r7, #24]
        break;
 8004124:	e002      	b.n	800412c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
        break;
 800412a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d908      	bls.n	8004144 <UART_SetConfig+0x530>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d204      	bcs.n	8004144 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e001      	b.n	8004148 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	01e84800 	.word	0x01e84800
 8004164:	00f42400 	.word	0x00f42400

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01a      	beq.n	800427e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004266:	d10a      	bne.n	800427e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042ba:	f7fd f9e5 	bl	8001688 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d10e      	bne.n	80042ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f814 	bl	800430a <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00a      	b.n	8004302 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431a:	e05d      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d059      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fd f9b0 	bl	8001688 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <UART_WaitOnFlagUntilTimeout+0x30>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11b      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004348:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e042      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02b      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d123      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004398:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e00f      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d092      	beq.n	800431c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004416:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004440:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004480:	d014      	beq.n	80044ac <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004498:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044aa:	e002      	b.n	80044b2 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff fb93 	bl	8003bd8 <HAL_UART_TxCpltCallback>
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fb8f 	bl	8003bec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d109      	bne.n	8004512 <UART_DMAError+0x3c>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b21      	cmp	r3, #33	; 0x21
 8004502:	d106      	bne.n	8004512 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7ff ff77 	bl	8004400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d109      	bne.n	8004534 <UART_DMAError+0x5e>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b22      	cmp	r3, #34	; 0x22
 8004524:	d106      	bne.n	8004534 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7ff ff7b 	bl	800442a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004538:	f043 0210 	orr.w	r2, r3, #16
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7ff fb5d 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fb47 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004590:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fb1a 	bl	8003bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <__errno>:
 80045ac:	4b01      	ldr	r3, [pc, #4]	; (80045b4 <__errno+0x8>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	2000000c 	.word	0x2000000c

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	4e0d      	ldr	r6, [pc, #52]	; (80045f0 <__libc_init_array+0x38>)
 80045bc:	4c0d      	ldr	r4, [pc, #52]	; (80045f4 <__libc_init_array+0x3c>)
 80045be:	1ba4      	subs	r4, r4, r6
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	2500      	movs	r5, #0
 80045c4:	42a5      	cmp	r5, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	4e0b      	ldr	r6, [pc, #44]	; (80045f8 <__libc_init_array+0x40>)
 80045ca:	4c0c      	ldr	r4, [pc, #48]	; (80045fc <__libc_init_array+0x44>)
 80045cc:	f004 f9fa 	bl	80089c4 <_init>
 80045d0:	1ba4      	subs	r4, r4, r6
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	2500      	movs	r5, #0
 80045d6:	42a5      	cmp	r5, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e0:	4798      	blx	r3
 80045e2:	3501      	adds	r5, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ea:	4798      	blx	r3
 80045ec:	3501      	adds	r5, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08008d40 	.word	0x08008d40
 80045f4:	08008d40 	.word	0x08008d40
 80045f8:	08008d40 	.word	0x08008d40
 80045fc:	08008d44 	.word	0x08008d44

08004600 <memset>:
 8004600:	4402      	add	r2, r0
 8004602:	4603      	mov	r3, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	d100      	bne.n	800460a <memset+0xa>
 8004608:	4770      	bx	lr
 800460a:	f803 1b01 	strb.w	r1, [r3], #1
 800460e:	e7f9      	b.n	8004604 <memset+0x4>

08004610 <__cvt>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	ec55 4b10 	vmov	r4, r5, d0
 8004618:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800461a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800461e:	2d00      	cmp	r5, #0
 8004620:	460e      	mov	r6, r1
 8004622:	4691      	mov	r9, r2
 8004624:	4619      	mov	r1, r3
 8004626:	bfb8      	it	lt
 8004628:	4622      	movlt	r2, r4
 800462a:	462b      	mov	r3, r5
 800462c:	f027 0720 	bic.w	r7, r7, #32
 8004630:	bfbb      	ittet	lt
 8004632:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004636:	461d      	movlt	r5, r3
 8004638:	2300      	movge	r3, #0
 800463a:	232d      	movlt	r3, #45	; 0x2d
 800463c:	bfb8      	it	lt
 800463e:	4614      	movlt	r4, r2
 8004640:	2f46      	cmp	r7, #70	; 0x46
 8004642:	700b      	strb	r3, [r1, #0]
 8004644:	d004      	beq.n	8004650 <__cvt+0x40>
 8004646:	2f45      	cmp	r7, #69	; 0x45
 8004648:	d100      	bne.n	800464c <__cvt+0x3c>
 800464a:	3601      	adds	r6, #1
 800464c:	2102      	movs	r1, #2
 800464e:	e000      	b.n	8004652 <__cvt+0x42>
 8004650:	2103      	movs	r1, #3
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	ab02      	add	r3, sp, #8
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	4632      	mov	r2, r6
 800465c:	4653      	mov	r3, sl
 800465e:	ec45 4b10 	vmov	d0, r4, r5
 8004662:	f001 fd8d 	bl	8006180 <_dtoa_r>
 8004666:	2f47      	cmp	r7, #71	; 0x47
 8004668:	4680      	mov	r8, r0
 800466a:	d102      	bne.n	8004672 <__cvt+0x62>
 800466c:	f019 0f01 	tst.w	r9, #1
 8004670:	d026      	beq.n	80046c0 <__cvt+0xb0>
 8004672:	2f46      	cmp	r7, #70	; 0x46
 8004674:	eb08 0906 	add.w	r9, r8, r6
 8004678:	d111      	bne.n	800469e <__cvt+0x8e>
 800467a:	f898 3000 	ldrb.w	r3, [r8]
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	d10a      	bne.n	8004698 <__cvt+0x88>
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fc fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800468e:	b918      	cbnz	r0, 8004698 <__cvt+0x88>
 8004690:	f1c6 0601 	rsb	r6, r6, #1
 8004694:	f8ca 6000 	str.w	r6, [sl]
 8004698:	f8da 3000 	ldr.w	r3, [sl]
 800469c:	4499      	add	r9, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	2300      	movs	r3, #0
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fc fa2f 	bl	8000b08 <__aeabi_dcmpeq>
 80046aa:	b938      	cbnz	r0, 80046bc <__cvt+0xac>
 80046ac:	2230      	movs	r2, #48	; 0x30
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	454b      	cmp	r3, r9
 80046b2:	d205      	bcs.n	80046c0 <__cvt+0xb0>
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	9103      	str	r1, [sp, #12]
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e7f8      	b.n	80046ae <__cvt+0x9e>
 80046bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046c4:	eba3 0308 	sub.w	r3, r3, r8
 80046c8:	4640      	mov	r0, r8
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	b004      	add	sp, #16
 80046ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046d2 <__exponent>:
 80046d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d4:	2900      	cmp	r1, #0
 80046d6:	4604      	mov	r4, r0
 80046d8:	bfba      	itte	lt
 80046da:	4249      	neglt	r1, r1
 80046dc:	232d      	movlt	r3, #45	; 0x2d
 80046de:	232b      	movge	r3, #43	; 0x2b
 80046e0:	2909      	cmp	r1, #9
 80046e2:	f804 2b02 	strb.w	r2, [r4], #2
 80046e6:	7043      	strb	r3, [r0, #1]
 80046e8:	dd20      	ble.n	800472c <__exponent+0x5a>
 80046ea:	f10d 0307 	add.w	r3, sp, #7
 80046ee:	461f      	mov	r7, r3
 80046f0:	260a      	movs	r6, #10
 80046f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80046f6:	fb06 1115 	mls	r1, r6, r5, r1
 80046fa:	3130      	adds	r1, #48	; 0x30
 80046fc:	2d09      	cmp	r5, #9
 80046fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004702:	f103 32ff 	add.w	r2, r3, #4294967295
 8004706:	4629      	mov	r1, r5
 8004708:	dc09      	bgt.n	800471e <__exponent+0x4c>
 800470a:	3130      	adds	r1, #48	; 0x30
 800470c:	3b02      	subs	r3, #2
 800470e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004712:	42bb      	cmp	r3, r7
 8004714:	4622      	mov	r2, r4
 8004716:	d304      	bcc.n	8004722 <__exponent+0x50>
 8004718:	1a10      	subs	r0, r2, r0
 800471a:	b003      	add	sp, #12
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471e:	4613      	mov	r3, r2
 8004720:	e7e7      	b.n	80046f2 <__exponent+0x20>
 8004722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004726:	f804 2b01 	strb.w	r2, [r4], #1
 800472a:	e7f2      	b.n	8004712 <__exponent+0x40>
 800472c:	2330      	movs	r3, #48	; 0x30
 800472e:	4419      	add	r1, r3
 8004730:	7083      	strb	r3, [r0, #2]
 8004732:	1d02      	adds	r2, r0, #4
 8004734:	70c1      	strb	r1, [r0, #3]
 8004736:	e7ef      	b.n	8004718 <__exponent+0x46>

08004738 <_printf_float>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	b08d      	sub	sp, #52	; 0x34
 800473e:	460c      	mov	r4, r1
 8004740:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004744:	4616      	mov	r6, r2
 8004746:	461f      	mov	r7, r3
 8004748:	4605      	mov	r5, r0
 800474a:	f002 fec7 	bl	80074dc <_localeconv_r>
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	9304      	str	r3, [sp, #16]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fb fd5c 	bl	8000210 <strlen>
 8004758:	2300      	movs	r3, #0
 800475a:	930a      	str	r3, [sp, #40]	; 0x28
 800475c:	f8d8 3000 	ldr.w	r3, [r8]
 8004760:	9005      	str	r0, [sp, #20]
 8004762:	3307      	adds	r3, #7
 8004764:	f023 0307 	bic.w	r3, r3, #7
 8004768:	f103 0208 	add.w	r2, r3, #8
 800476c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004770:	f8d4 b000 	ldr.w	fp, [r4]
 8004774:	f8c8 2000 	str.w	r2, [r8]
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004780:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004784:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004788:	9307      	str	r3, [sp, #28]
 800478a:	f8cd 8018 	str.w	r8, [sp, #24]
 800478e:	f04f 32ff 	mov.w	r2, #4294967295
 8004792:	4ba7      	ldr	r3, [pc, #668]	; (8004a30 <_printf_float+0x2f8>)
 8004794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004798:	f7fc f9e8 	bl	8000b6c <__aeabi_dcmpun>
 800479c:	bb70      	cbnz	r0, 80047fc <_printf_float+0xc4>
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	4ba3      	ldr	r3, [pc, #652]	; (8004a30 <_printf_float+0x2f8>)
 80047a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047a8:	f7fc f9c2 	bl	8000b30 <__aeabi_dcmple>
 80047ac:	bb30      	cbnz	r0, 80047fc <_printf_float+0xc4>
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4640      	mov	r0, r8
 80047b4:	4649      	mov	r1, r9
 80047b6:	f7fc f9b1 	bl	8000b1c <__aeabi_dcmplt>
 80047ba:	b110      	cbz	r0, 80047c2 <_printf_float+0x8a>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c2:	4a9c      	ldr	r2, [pc, #624]	; (8004a34 <_printf_float+0x2fc>)
 80047c4:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <_printf_float+0x300>)
 80047c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047ca:	bf8c      	ite	hi
 80047cc:	4690      	movhi	r8, r2
 80047ce:	4698      	movls	r8, r3
 80047d0:	2303      	movs	r3, #3
 80047d2:	f02b 0204 	bic.w	r2, fp, #4
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	6022      	str	r2, [r4, #0]
 80047da:	f04f 0900 	mov.w	r9, #0
 80047de:	9700      	str	r7, [sp, #0]
 80047e0:	4633      	mov	r3, r6
 80047e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 f9e6 	bl	8004bb8 <_printf_common>
 80047ec:	3001      	adds	r0, #1
 80047ee:	f040 808d 	bne.w	800490c <_printf_float+0x1d4>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	b00d      	add	sp, #52	; 0x34
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fc f9b2 	bl	8000b6c <__aeabi_dcmpun>
 8004808:	b110      	cbz	r0, 8004810 <_printf_float+0xd8>
 800480a:	4a8c      	ldr	r2, [pc, #560]	; (8004a3c <_printf_float+0x304>)
 800480c:	4b8c      	ldr	r3, [pc, #560]	; (8004a40 <_printf_float+0x308>)
 800480e:	e7da      	b.n	80047c6 <_printf_float+0x8e>
 8004810:	6861      	ldr	r1, [r4, #4]
 8004812:	1c4b      	adds	r3, r1, #1
 8004814:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004818:	a80a      	add	r0, sp, #40	; 0x28
 800481a:	d13e      	bne.n	800489a <_printf_float+0x162>
 800481c:	2306      	movs	r3, #6
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	2300      	movs	r3, #0
 8004822:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004826:	ab09      	add	r3, sp, #36	; 0x24
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	ec49 8b10 	vmov	d0, r8, r9
 800482e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	f8cd a004 	str.w	sl, [sp, #4]
 8004838:	6861      	ldr	r1, [r4, #4]
 800483a:	4628      	mov	r0, r5
 800483c:	f7ff fee8 	bl	8004610 <__cvt>
 8004840:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004844:	2b47      	cmp	r3, #71	; 0x47
 8004846:	4680      	mov	r8, r0
 8004848:	d109      	bne.n	800485e <_printf_float+0x126>
 800484a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484c:	1cd8      	adds	r0, r3, #3
 800484e:	db02      	blt.n	8004856 <_printf_float+0x11e>
 8004850:	6862      	ldr	r2, [r4, #4]
 8004852:	4293      	cmp	r3, r2
 8004854:	dd47      	ble.n	80048e6 <_printf_float+0x1ae>
 8004856:	f1aa 0a02 	sub.w	sl, sl, #2
 800485a:	fa5f fa8a 	uxtb.w	sl, sl
 800485e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004864:	d824      	bhi.n	80048b0 <_printf_float+0x178>
 8004866:	3901      	subs	r1, #1
 8004868:	4652      	mov	r2, sl
 800486a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800486e:	9109      	str	r1, [sp, #36]	; 0x24
 8004870:	f7ff ff2f 	bl	80046d2 <__exponent>
 8004874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004876:	1813      	adds	r3, r2, r0
 8004878:	2a01      	cmp	r2, #1
 800487a:	4681      	mov	r9, r0
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	dc02      	bgt.n	8004886 <_printf_float+0x14e>
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	07d1      	lsls	r1, r2, #31
 8004884:	d501      	bpl.n	800488a <_printf_float+0x152>
 8004886:	3301      	adds	r3, #1
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0a5      	beq.n	80047de <_printf_float+0xa6>
 8004892:	232d      	movs	r3, #45	; 0x2d
 8004894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004898:	e7a1      	b.n	80047de <_printf_float+0xa6>
 800489a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800489e:	f000 8177 	beq.w	8004b90 <_printf_float+0x458>
 80048a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80048a6:	d1bb      	bne.n	8004820 <_printf_float+0xe8>
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d1b9      	bne.n	8004820 <_printf_float+0xe8>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e7b6      	b.n	800481e <_printf_float+0xe6>
 80048b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80048b4:	d119      	bne.n	80048ea <_printf_float+0x1b2>
 80048b6:	2900      	cmp	r1, #0
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	dd0c      	ble.n	80048d6 <_printf_float+0x19e>
 80048bc:	6121      	str	r1, [r4, #16]
 80048be:	b913      	cbnz	r3, 80048c6 <_printf_float+0x18e>
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	07d2      	lsls	r2, r2, #31
 80048c4:	d502      	bpl.n	80048cc <_printf_float+0x194>
 80048c6:	3301      	adds	r3, #1
 80048c8:	440b      	add	r3, r1
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80048d0:	f04f 0900 	mov.w	r9, #0
 80048d4:	e7d9      	b.n	800488a <_printf_float+0x152>
 80048d6:	b913      	cbnz	r3, 80048de <_printf_float+0x1a6>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	07d0      	lsls	r0, r2, #31
 80048dc:	d501      	bpl.n	80048e2 <_printf_float+0x1aa>
 80048de:	3302      	adds	r3, #2
 80048e0:	e7f3      	b.n	80048ca <_printf_float+0x192>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e7f1      	b.n	80048ca <_printf_float+0x192>
 80048e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80048ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048ee:	4293      	cmp	r3, r2
 80048f0:	db05      	blt.n	80048fe <_printf_float+0x1c6>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	07d1      	lsls	r1, r2, #31
 80048f8:	d5e8      	bpl.n	80048cc <_printf_float+0x194>
 80048fa:	3301      	adds	r3, #1
 80048fc:	e7e5      	b.n	80048ca <_printf_float+0x192>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfd4      	ite	le
 8004902:	f1c3 0302 	rsble	r3, r3, #2
 8004906:	2301      	movgt	r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	e7de      	b.n	80048ca <_printf_float+0x192>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	055a      	lsls	r2, r3, #21
 8004910:	d407      	bmi.n	8004922 <_printf_float+0x1ea>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	4642      	mov	r2, r8
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	d12b      	bne.n	8004978 <_printf_float+0x240>
 8004920:	e767      	b.n	80047f2 <_printf_float+0xba>
 8004922:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004926:	f240 80dc 	bls.w	8004ae2 <_printf_float+0x3aa>
 800492a:	2200      	movs	r2, #0
 800492c:	2300      	movs	r3, #0
 800492e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004932:	f7fc f8e9 	bl	8000b08 <__aeabi_dcmpeq>
 8004936:	2800      	cmp	r0, #0
 8004938:	d033      	beq.n	80049a2 <_printf_float+0x26a>
 800493a:	2301      	movs	r3, #1
 800493c:	4a41      	ldr	r2, [pc, #260]	; (8004a44 <_printf_float+0x30c>)
 800493e:	4631      	mov	r1, r6
 8004940:	4628      	mov	r0, r5
 8004942:	47b8      	blx	r7
 8004944:	3001      	adds	r0, #1
 8004946:	f43f af54 	beq.w	80047f2 <_printf_float+0xba>
 800494a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494e:	429a      	cmp	r2, r3
 8004950:	db02      	blt.n	8004958 <_printf_float+0x220>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	07d8      	lsls	r0, r3, #31
 8004956:	d50f      	bpl.n	8004978 <_printf_float+0x240>
 8004958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f43f af45 	beq.w	80047f2 <_printf_float+0xba>
 8004968:	f04f 0800 	mov.w	r8, #0
 800496c:	f104 091a 	add.w	r9, r4, #26
 8004970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	4543      	cmp	r3, r8
 8004976:	dc09      	bgt.n	800498c <_printf_float+0x254>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	079b      	lsls	r3, r3, #30
 800497c:	f100 8103 	bmi.w	8004b86 <_printf_float+0x44e>
 8004980:	68e0      	ldr	r0, [r4, #12]
 8004982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004984:	4298      	cmp	r0, r3
 8004986:	bfb8      	it	lt
 8004988:	4618      	movlt	r0, r3
 800498a:	e734      	b.n	80047f6 <_printf_float+0xbe>
 800498c:	2301      	movs	r3, #1
 800498e:	464a      	mov	r2, r9
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af2b 	beq.w	80047f2 <_printf_float+0xba>
 800499c:	f108 0801 	add.w	r8, r8, #1
 80049a0:	e7e6      	b.n	8004970 <_printf_float+0x238>
 80049a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc2b      	bgt.n	8004a00 <_printf_float+0x2c8>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <_printf_float+0x30c>)
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af1d 	beq.w	80047f2 <_printf_float+0xba>
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	b923      	cbnz	r3, 80049c6 <_printf_float+0x28e>
 80049bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049be:	b913      	cbnz	r3, 80049c6 <_printf_float+0x28e>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	d5d8      	bpl.n	8004978 <_printf_float+0x240>
 80049c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	f43f af0e 	beq.w	80047f2 <_printf_float+0xba>
 80049d6:	f04f 0900 	mov.w	r9, #0
 80049da:	f104 0a1a 	add.w	sl, r4, #26
 80049de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e0:	425b      	negs	r3, r3
 80049e2:	454b      	cmp	r3, r9
 80049e4:	dc01      	bgt.n	80049ea <_printf_float+0x2b2>
 80049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e8:	e794      	b.n	8004914 <_printf_float+0x1dc>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4652      	mov	r2, sl
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f aefc 	beq.w	80047f2 <_printf_float+0xba>
 80049fa:	f109 0901 	add.w	r9, r9, #1
 80049fe:	e7ee      	b.n	80049de <_printf_float+0x2a6>
 8004a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bfa8      	it	ge
 8004a08:	461a      	movge	r2, r3
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	4691      	mov	r9, r2
 8004a0e:	dd07      	ble.n	8004a20 <_printf_float+0x2e8>
 8004a10:	4613      	mov	r3, r2
 8004a12:	4631      	mov	r1, r6
 8004a14:	4642      	mov	r2, r8
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f aee9 	beq.w	80047f2 <_printf_float+0xba>
 8004a20:	f104 031a 	add.w	r3, r4, #26
 8004a24:	f04f 0b00 	mov.w	fp, #0
 8004a28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a2c:	9306      	str	r3, [sp, #24]
 8004a2e:	e015      	b.n	8004a5c <_printf_float+0x324>
 8004a30:	7fefffff 	.word	0x7fefffff
 8004a34:	08008a1c 	.word	0x08008a1c
 8004a38:	08008a18 	.word	0x08008a18
 8004a3c:	08008a24 	.word	0x08008a24
 8004a40:	08008a20 	.word	0x08008a20
 8004a44:	08008a28 	.word	0x08008a28
 8004a48:	2301      	movs	r3, #1
 8004a4a:	9a06      	ldr	r2, [sp, #24]
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f aecd 	beq.w	80047f2 <_printf_float+0xba>
 8004a58:	f10b 0b01 	add.w	fp, fp, #1
 8004a5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a60:	ebaa 0309 	sub.w	r3, sl, r9
 8004a64:	455b      	cmp	r3, fp
 8004a66:	dcef      	bgt.n	8004a48 <_printf_float+0x310>
 8004a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	44d0      	add	r8, sl
 8004a70:	db15      	blt.n	8004a9e <_printf_float+0x366>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	07da      	lsls	r2, r3, #31
 8004a76:	d412      	bmi.n	8004a9e <_printf_float+0x366>
 8004a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a7c:	eba3 020a 	sub.w	r2, r3, sl
 8004a80:	eba3 0a01 	sub.w	sl, r3, r1
 8004a84:	4592      	cmp	sl, r2
 8004a86:	bfa8      	it	ge
 8004a88:	4692      	movge	sl, r2
 8004a8a:	f1ba 0f00 	cmp.w	sl, #0
 8004a8e:	dc0e      	bgt.n	8004aae <_printf_float+0x376>
 8004a90:	f04f 0800 	mov.w	r8, #0
 8004a94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a98:	f104 091a 	add.w	r9, r4, #26
 8004a9c:	e019      	b.n	8004ad2 <_printf_float+0x39a>
 8004a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d1e5      	bne.n	8004a78 <_printf_float+0x340>
 8004aac:	e6a1      	b.n	80047f2 <_printf_float+0xba>
 8004aae:	4653      	mov	r3, sl
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d1e9      	bne.n	8004a90 <_printf_float+0x358>
 8004abc:	e699      	b.n	80047f2 <_printf_float+0xba>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	464a      	mov	r2, r9
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f ae92 	beq.w	80047f2 <_printf_float+0xba>
 8004ace:	f108 0801 	add.w	r8, r8, #1
 8004ad2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	eba3 030a 	sub.w	r3, r3, sl
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dcee      	bgt.n	8004abe <_printf_float+0x386>
 8004ae0:	e74a      	b.n	8004978 <_printf_float+0x240>
 8004ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae4:	2a01      	cmp	r2, #1
 8004ae6:	dc01      	bgt.n	8004aec <_printf_float+0x3b4>
 8004ae8:	07db      	lsls	r3, r3, #31
 8004aea:	d53a      	bpl.n	8004b62 <_printf_float+0x42a>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4642      	mov	r2, r8
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f ae7b 	beq.w	80047f2 <_printf_float+0xba>
 8004afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f108 0801 	add.w	r8, r8, #1
 8004b0c:	f43f ae71 	beq.w	80047f2 <_printf_float+0xba>
 8004b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b12:	2200      	movs	r2, #0
 8004b14:	f103 3aff 	add.w	sl, r3, #4294967295
 8004b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f7fb fff3 	bl	8000b08 <__aeabi_dcmpeq>
 8004b22:	b9c8      	cbnz	r0, 8004b58 <_printf_float+0x420>
 8004b24:	4653      	mov	r3, sl
 8004b26:	4642      	mov	r2, r8
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d10e      	bne.n	8004b50 <_printf_float+0x418>
 8004b32:	e65e      	b.n	80047f2 <_printf_float+0xba>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4652      	mov	r2, sl
 8004b38:	4631      	mov	r1, r6
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b8      	blx	r7
 8004b3e:	3001      	adds	r0, #1
 8004b40:	f43f ae57 	beq.w	80047f2 <_printf_float+0xba>
 8004b44:	f108 0801 	add.w	r8, r8, #1
 8004b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4543      	cmp	r3, r8
 8004b4e:	dcf1      	bgt.n	8004b34 <_printf_float+0x3fc>
 8004b50:	464b      	mov	r3, r9
 8004b52:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b56:	e6de      	b.n	8004916 <_printf_float+0x1de>
 8004b58:	f04f 0800 	mov.w	r8, #0
 8004b5c:	f104 0a1a 	add.w	sl, r4, #26
 8004b60:	e7f2      	b.n	8004b48 <_printf_float+0x410>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e7df      	b.n	8004b26 <_printf_float+0x3ee>
 8004b66:	2301      	movs	r3, #1
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f ae3e 	beq.w	80047f2 <_printf_float+0xba>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	4543      	cmp	r3, r8
 8004b82:	dcf0      	bgt.n	8004b66 <_printf_float+0x42e>
 8004b84:	e6fc      	b.n	8004980 <_printf_float+0x248>
 8004b86:	f04f 0800 	mov.w	r8, #0
 8004b8a:	f104 0919 	add.w	r9, r4, #25
 8004b8e:	e7f4      	b.n	8004b7a <_printf_float+0x442>
 8004b90:	2900      	cmp	r1, #0
 8004b92:	f43f ae8b 	beq.w	80048ac <_printf_float+0x174>
 8004b96:	2300      	movs	r3, #0
 8004b98:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b9c:	ab09      	add	r3, sp, #36	; 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	ec49 8b10 	vmov	d0, r8, r9
 8004ba4:	6022      	str	r2, [r4, #0]
 8004ba6:	f8cd a004 	str.w	sl, [sp, #4]
 8004baa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f7ff fd2e 	bl	8004610 <__cvt>
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	e648      	b.n	800484a <_printf_float+0x112>

08004bb8 <_printf_common>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	4691      	mov	r9, r2
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	688a      	ldr	r2, [r1, #8]
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	bfb8      	it	lt
 8004bcc:	4613      	movlt	r3, r2
 8004bce:	f8c9 3000 	str.w	r3, [r9]
 8004bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	b112      	cbz	r2, 8004be2 <_printf_common+0x2a>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f8c9 3000 	str.w	r3, [r9]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bec:	3302      	addmi	r3, #2
 8004bee:	f8c9 3000 	strmi.w	r3, [r9]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	f015 0506 	ands.w	r5, r5, #6
 8004bf8:	d107      	bne.n	8004c0a <_printf_common+0x52>
 8004bfa:	f104 0a19 	add.w	sl, r4, #25
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	f8d9 2000 	ldr.w	r2, [r9]
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	42ab      	cmp	r3, r5
 8004c08:	dc28      	bgt.n	8004c5c <_printf_common+0xa4>
 8004c0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	3300      	adds	r3, #0
 8004c12:	bf18      	it	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	0692      	lsls	r2, r2, #26
 8004c18:	d42d      	bmi.n	8004c76 <_printf_common+0xbe>
 8004c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4630      	mov	r0, r6
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d020      	beq.n	8004c6a <_printf_common+0xb2>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	68e5      	ldr	r5, [r4, #12]
 8004c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c30:	f003 0306 	and.w	r3, r3, #6
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	bf08      	it	eq
 8004c38:	1aad      	subeq	r5, r5, r2
 8004c3a:	68a3      	ldr	r3, [r4, #8]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	bf0c      	ite	eq
 8004c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c44:	2500      	movne	r5, #0
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bfc4      	itt	gt
 8004c4a:	1a9b      	subgt	r3, r3, r2
 8004c4c:	18ed      	addgt	r5, r5, r3
 8004c4e:	f04f 0900 	mov.w	r9, #0
 8004c52:	341a      	adds	r4, #26
 8004c54:	454d      	cmp	r5, r9
 8004c56:	d11a      	bne.n	8004c8e <_printf_common+0xd6>
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e008      	b.n	8004c6e <_printf_common+0xb6>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4652      	mov	r2, sl
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d103      	bne.n	8004c72 <_printf_common+0xba>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	3501      	adds	r5, #1
 8004c74:	e7c3      	b.n	8004bfe <_printf_common+0x46>
 8004c76:	18e1      	adds	r1, r4, r3
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	2030      	movs	r0, #48	; 0x30
 8004c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c80:	4422      	add	r2, r4
 8004c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	e7c5      	b.n	8004c1a <_printf_common+0x62>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4622      	mov	r2, r4
 8004c92:	4639      	mov	r1, r7
 8004c94:	4630      	mov	r0, r6
 8004c96:	47c0      	blx	r8
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d0e6      	beq.n	8004c6a <_printf_common+0xb2>
 8004c9c:	f109 0901 	add.w	r9, r9, #1
 8004ca0:	e7d8      	b.n	8004c54 <_printf_common+0x9c>
	...

08004ca4 <_printf_i>:
 8004ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ca8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cac:	460c      	mov	r4, r1
 8004cae:	7e09      	ldrb	r1, [r1, #24]
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	296e      	cmp	r1, #110	; 0x6e
 8004cb4:	4617      	mov	r7, r2
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	4698      	mov	r8, r3
 8004cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cbc:	f000 80b3 	beq.w	8004e26 <_printf_i+0x182>
 8004cc0:	d822      	bhi.n	8004d08 <_printf_i+0x64>
 8004cc2:	2963      	cmp	r1, #99	; 0x63
 8004cc4:	d036      	beq.n	8004d34 <_printf_i+0x90>
 8004cc6:	d80a      	bhi.n	8004cde <_printf_i+0x3a>
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	f000 80b9 	beq.w	8004e40 <_printf_i+0x19c>
 8004cce:	2958      	cmp	r1, #88	; 0x58
 8004cd0:	f000 8083 	beq.w	8004dda <_printf_i+0x136>
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cdc:	e032      	b.n	8004d44 <_printf_i+0xa0>
 8004cde:	2964      	cmp	r1, #100	; 0x64
 8004ce0:	d001      	beq.n	8004ce6 <_printf_i+0x42>
 8004ce2:	2969      	cmp	r1, #105	; 0x69
 8004ce4:	d1f6      	bne.n	8004cd4 <_printf_i+0x30>
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	0605      	lsls	r5, r0, #24
 8004cec:	f103 0104 	add.w	r1, r3, #4
 8004cf0:	d52a      	bpl.n	8004d48 <_printf_i+0xa4>
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da03      	bge.n	8004d02 <_printf_i+0x5e>
 8004cfa:	222d      	movs	r2, #45	; 0x2d
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d02:	486f      	ldr	r0, [pc, #444]	; (8004ec0 <_printf_i+0x21c>)
 8004d04:	220a      	movs	r2, #10
 8004d06:	e039      	b.n	8004d7c <_printf_i+0xd8>
 8004d08:	2973      	cmp	r1, #115	; 0x73
 8004d0a:	f000 809d 	beq.w	8004e48 <_printf_i+0x1a4>
 8004d0e:	d808      	bhi.n	8004d22 <_printf_i+0x7e>
 8004d10:	296f      	cmp	r1, #111	; 0x6f
 8004d12:	d020      	beq.n	8004d56 <_printf_i+0xb2>
 8004d14:	2970      	cmp	r1, #112	; 0x70
 8004d16:	d1dd      	bne.n	8004cd4 <_printf_i+0x30>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f043 0320 	orr.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e003      	b.n	8004d2a <_printf_i+0x86>
 8004d22:	2975      	cmp	r1, #117	; 0x75
 8004d24:	d017      	beq.n	8004d56 <_printf_i+0xb2>
 8004d26:	2978      	cmp	r1, #120	; 0x78
 8004d28:	d1d4      	bne.n	8004cd4 <_printf_i+0x30>
 8004d2a:	2378      	movs	r3, #120	; 0x78
 8004d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d30:	4864      	ldr	r0, [pc, #400]	; (8004ec4 <_printf_i+0x220>)
 8004d32:	e055      	b.n	8004de0 <_printf_i+0x13c>
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	1d19      	adds	r1, r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6011      	str	r1, [r2, #0]
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d44:	2301      	movs	r3, #1
 8004d46:	e08c      	b.n	8004e62 <_printf_i+0x1be>
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d50:	bf18      	it	ne
 8004d52:	b21b      	sxthne	r3, r3
 8004d54:	e7cf      	b.n	8004cf6 <_printf_i+0x52>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	6825      	ldr	r5, [r4, #0]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6010      	str	r0, [r2, #0]
 8004d5e:	0628      	lsls	r0, r5, #24
 8004d60:	d501      	bpl.n	8004d66 <_printf_i+0xc2>
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e002      	b.n	8004d6c <_printf_i+0xc8>
 8004d66:	0668      	lsls	r0, r5, #25
 8004d68:	d5fb      	bpl.n	8004d62 <_printf_i+0xbe>
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	4854      	ldr	r0, [pc, #336]	; (8004ec0 <_printf_i+0x21c>)
 8004d6e:	296f      	cmp	r1, #111	; 0x6f
 8004d70:	bf14      	ite	ne
 8004d72:	220a      	movne	r2, #10
 8004d74:	2208      	moveq	r2, #8
 8004d76:	2100      	movs	r1, #0
 8004d78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d7c:	6865      	ldr	r5, [r4, #4]
 8004d7e:	60a5      	str	r5, [r4, #8]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	f2c0 8095 	blt.w	8004eb0 <_printf_i+0x20c>
 8004d86:	6821      	ldr	r1, [r4, #0]
 8004d88:	f021 0104 	bic.w	r1, r1, #4
 8004d8c:	6021      	str	r1, [r4, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <_printf_i+0x16a>
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	f040 808e 	bne.w	8004eb4 <_printf_i+0x210>
 8004d98:	4665      	mov	r5, ip
 8004d9a:	2a08      	cmp	r2, #8
 8004d9c:	d10b      	bne.n	8004db6 <_printf_i+0x112>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	07db      	lsls	r3, r3, #31
 8004da2:	d508      	bpl.n	8004db6 <_printf_i+0x112>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	6862      	ldr	r2, [r4, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bfde      	ittt	le
 8004dac:	2330      	movle	r3, #48	; 0x30
 8004dae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004db6:	ebac 0305 	sub.w	r3, ip, r5
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	f8cd 8000 	str.w	r8, [sp]
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	aa03      	add	r2, sp, #12
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7ff fef6 	bl	8004bb8 <_printf_common>
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d14d      	bne.n	8004e6c <_printf_i+0x1c8>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	b005      	add	sp, #20
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dda:	4839      	ldr	r0, [pc, #228]	; (8004ec0 <_printf_i+0x21c>)
 8004ddc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	1d1d      	adds	r5, r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6015      	str	r5, [r2, #0]
 8004dea:	060a      	lsls	r2, r1, #24
 8004dec:	d50b      	bpl.n	8004e06 <_printf_i+0x162>
 8004dee:	07ca      	lsls	r2, r1, #31
 8004df0:	bf44      	itt	mi
 8004df2:	f041 0120 	orrmi.w	r1, r1, #32
 8004df6:	6021      	strmi	r1, [r4, #0]
 8004df8:	b91b      	cbnz	r3, 8004e02 <_printf_i+0x15e>
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	f022 0220 	bic.w	r2, r2, #32
 8004e00:	6022      	str	r2, [r4, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	e7b7      	b.n	8004d76 <_printf_i+0xd2>
 8004e06:	064d      	lsls	r5, r1, #25
 8004e08:	bf48      	it	mi
 8004e0a:	b29b      	uxthmi	r3, r3
 8004e0c:	e7ef      	b.n	8004dee <_printf_i+0x14a>
 8004e0e:	4665      	mov	r5, ip
 8004e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e14:	fb02 3311 	mls	r3, r2, r1, r3
 8004e18:	5cc3      	ldrb	r3, [r0, r3]
 8004e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e1e:	460b      	mov	r3, r1
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d1f5      	bne.n	8004e10 <_printf_i+0x16c>
 8004e24:	e7b9      	b.n	8004d9a <_printf_i+0xf6>
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	6961      	ldr	r1, [r4, #20]
 8004e2c:	1d18      	adds	r0, r3, #4
 8004e2e:	6010      	str	r0, [r2, #0]
 8004e30:	0628      	lsls	r0, r5, #24
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	d501      	bpl.n	8004e3a <_printf_i+0x196>
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <_printf_i+0x19c>
 8004e3a:	066a      	lsls	r2, r5, #25
 8004e3c:	d5fb      	bpl.n	8004e36 <_printf_i+0x192>
 8004e3e:	8019      	strh	r1, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	4665      	mov	r5, ip
 8004e46:	e7b9      	b.n	8004dbc <_printf_i+0x118>
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	1d19      	adds	r1, r3, #4
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	681d      	ldr	r5, [r3, #0]
 8004e50:	6862      	ldr	r2, [r4, #4]
 8004e52:	2100      	movs	r1, #0
 8004e54:	4628      	mov	r0, r5
 8004e56:	f7fb f9e3 	bl	8000220 <memchr>
 8004e5a:	b108      	cbz	r0, 8004e60 <_printf_i+0x1bc>
 8004e5c:	1b40      	subs	r0, r0, r5
 8004e5e:	6060      	str	r0, [r4, #4]
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6a:	e7a7      	b.n	8004dbc <_printf_i+0x118>
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4639      	mov	r1, r7
 8004e72:	4630      	mov	r0, r6
 8004e74:	47c0      	blx	r8
 8004e76:	3001      	adds	r0, #1
 8004e78:	d0aa      	beq.n	8004dd0 <_printf_i+0x12c>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	079b      	lsls	r3, r3, #30
 8004e7e:	d413      	bmi.n	8004ea8 <_printf_i+0x204>
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	4298      	cmp	r0, r3
 8004e86:	bfb8      	it	lt
 8004e88:	4618      	movlt	r0, r3
 8004e8a:	e7a3      	b.n	8004dd4 <_printf_i+0x130>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	464a      	mov	r2, r9
 8004e90:	4639      	mov	r1, r7
 8004e92:	4630      	mov	r0, r6
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d09a      	beq.n	8004dd0 <_printf_i+0x12c>
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	68e3      	ldr	r3, [r4, #12]
 8004e9e:	9a03      	ldr	r2, [sp, #12]
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	dcf2      	bgt.n	8004e8c <_printf_i+0x1e8>
 8004ea6:	e7eb      	b.n	8004e80 <_printf_i+0x1dc>
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	f104 0919 	add.w	r9, r4, #25
 8004eae:	e7f5      	b.n	8004e9c <_printf_i+0x1f8>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ac      	bne.n	8004e0e <_printf_i+0x16a>
 8004eb4:	7803      	ldrb	r3, [r0, #0]
 8004eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ebe:	e76c      	b.n	8004d9a <_printf_i+0xf6>
 8004ec0:	08008a2a 	.word	0x08008a2a
 8004ec4:	08008a3b 	.word	0x08008a3b

08004ec8 <_scanf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	469a      	mov	sl, r3
 8004ece:	688b      	ldr	r3, [r1, #8]
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	1e5a      	subs	r2, r3, #1
 8004ed4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ed8:	b087      	sub	sp, #28
 8004eda:	bf83      	ittte	hi
 8004edc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004ee0:	189b      	addhi	r3, r3, r2
 8004ee2:	9301      	strhi	r3, [sp, #4]
 8004ee4:	2300      	movls	r3, #0
 8004ee6:	bf86      	itte	hi
 8004ee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004eec:	608b      	strhi	r3, [r1, #8]
 8004eee:	9301      	strls	r3, [sp, #4]
 8004ef0:	680b      	ldr	r3, [r1, #0]
 8004ef2:	4688      	mov	r8, r1
 8004ef4:	f04f 0b00 	mov.w	fp, #0
 8004ef8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004efc:	f848 3b1c 	str.w	r3, [r8], #28
 8004f00:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004f04:	4607      	mov	r7, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4645      	mov	r5, r8
 8004f0a:	465a      	mov	r2, fp
 8004f0c:	46d9      	mov	r9, fp
 8004f0e:	f8cd b008 	str.w	fp, [sp, #8]
 8004f12:	68a1      	ldr	r1, [r4, #8]
 8004f14:	b181      	cbz	r1, 8004f38 <_scanf_float+0x70>
 8004f16:	6833      	ldr	r3, [r6, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b49      	cmp	r3, #73	; 0x49
 8004f1c:	d071      	beq.n	8005002 <_scanf_float+0x13a>
 8004f1e:	d84d      	bhi.n	8004fbc <_scanf_float+0xf4>
 8004f20:	2b39      	cmp	r3, #57	; 0x39
 8004f22:	d840      	bhi.n	8004fa6 <_scanf_float+0xde>
 8004f24:	2b31      	cmp	r3, #49	; 0x31
 8004f26:	f080 8088 	bcs.w	800503a <_scanf_float+0x172>
 8004f2a:	2b2d      	cmp	r3, #45	; 0x2d
 8004f2c:	f000 8090 	beq.w	8005050 <_scanf_float+0x188>
 8004f30:	d815      	bhi.n	8004f5e <_scanf_float+0x96>
 8004f32:	2b2b      	cmp	r3, #43	; 0x2b
 8004f34:	f000 808c 	beq.w	8005050 <_scanf_float+0x188>
 8004f38:	f1b9 0f00 	cmp.w	r9, #0
 8004f3c:	d003      	beq.n	8004f46 <_scanf_float+0x7e>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	3a01      	subs	r2, #1
 8004f48:	2a01      	cmp	r2, #1
 8004f4a:	f200 80ea 	bhi.w	8005122 <_scanf_float+0x25a>
 8004f4e:	4545      	cmp	r5, r8
 8004f50:	f200 80dc 	bhi.w	800510c <_scanf_float+0x244>
 8004f54:	2601      	movs	r6, #1
 8004f56:	4630      	mov	r0, r6
 8004f58:	b007      	add	sp, #28
 8004f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f60:	f000 809f 	beq.w	80050a2 <_scanf_float+0x1da>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d1e7      	bne.n	8004f38 <_scanf_float+0x70>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004f6e:	d064      	beq.n	800503a <_scanf_float+0x172>
 8004f70:	9b01      	ldr	r3, [sp, #4]
 8004f72:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004f76:	6020      	str	r0, [r4, #0]
 8004f78:	f109 0901 	add.w	r9, r9, #1
 8004f7c:	b11b      	cbz	r3, 8004f86 <_scanf_float+0xbe>
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	3101      	adds	r1, #1
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	60a1      	str	r1, [r4, #8]
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	60a3      	str	r3, [r4, #8]
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	6873      	ldr	r3, [r6, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	6073      	str	r3, [r6, #4]
 8004f9a:	f340 80ac 	ble.w	80050f6 <_scanf_float+0x22e>
 8004f9e:	6833      	ldr	r3, [r6, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	e7b5      	b.n	8004f12 <_scanf_float+0x4a>
 8004fa6:	2b45      	cmp	r3, #69	; 0x45
 8004fa8:	f000 8085 	beq.w	80050b6 <_scanf_float+0x1ee>
 8004fac:	2b46      	cmp	r3, #70	; 0x46
 8004fae:	d06a      	beq.n	8005086 <_scanf_float+0x1be>
 8004fb0:	2b41      	cmp	r3, #65	; 0x41
 8004fb2:	d1c1      	bne.n	8004f38 <_scanf_float+0x70>
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	d1bf      	bne.n	8004f38 <_scanf_float+0x70>
 8004fb8:	2202      	movs	r2, #2
 8004fba:	e046      	b.n	800504a <_scanf_float+0x182>
 8004fbc:	2b65      	cmp	r3, #101	; 0x65
 8004fbe:	d07a      	beq.n	80050b6 <_scanf_float+0x1ee>
 8004fc0:	d818      	bhi.n	8004ff4 <_scanf_float+0x12c>
 8004fc2:	2b54      	cmp	r3, #84	; 0x54
 8004fc4:	d066      	beq.n	8005094 <_scanf_float+0x1cc>
 8004fc6:	d811      	bhi.n	8004fec <_scanf_float+0x124>
 8004fc8:	2b4e      	cmp	r3, #78	; 0x4e
 8004fca:	d1b5      	bne.n	8004f38 <_scanf_float+0x70>
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d146      	bne.n	800505e <_scanf_float+0x196>
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	d145      	bne.n	8005062 <_scanf_float+0x19a>
 8004fd6:	6821      	ldr	r1, [r4, #0]
 8004fd8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004fdc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004fe0:	d13f      	bne.n	8005062 <_scanf_float+0x19a>
 8004fe2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004fe6:	6021      	str	r1, [r4, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	e02e      	b.n	800504a <_scanf_float+0x182>
 8004fec:	2b59      	cmp	r3, #89	; 0x59
 8004fee:	d01e      	beq.n	800502e <_scanf_float+0x166>
 8004ff0:	2b61      	cmp	r3, #97	; 0x61
 8004ff2:	e7de      	b.n	8004fb2 <_scanf_float+0xea>
 8004ff4:	2b6e      	cmp	r3, #110	; 0x6e
 8004ff6:	d0e9      	beq.n	8004fcc <_scanf_float+0x104>
 8004ff8:	d815      	bhi.n	8005026 <_scanf_float+0x15e>
 8004ffa:	2b66      	cmp	r3, #102	; 0x66
 8004ffc:	d043      	beq.n	8005086 <_scanf_float+0x1be>
 8004ffe:	2b69      	cmp	r3, #105	; 0x69
 8005000:	d19a      	bne.n	8004f38 <_scanf_float+0x70>
 8005002:	f1bb 0f00 	cmp.w	fp, #0
 8005006:	d138      	bne.n	800507a <_scanf_float+0x1b2>
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	d197      	bne.n	8004f3e <_scanf_float+0x76>
 800500e:	6821      	ldr	r1, [r4, #0]
 8005010:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005014:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005018:	d195      	bne.n	8004f46 <_scanf_float+0x7e>
 800501a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800501e:	6021      	str	r1, [r4, #0]
 8005020:	f04f 0b01 	mov.w	fp, #1
 8005024:	e011      	b.n	800504a <_scanf_float+0x182>
 8005026:	2b74      	cmp	r3, #116	; 0x74
 8005028:	d034      	beq.n	8005094 <_scanf_float+0x1cc>
 800502a:	2b79      	cmp	r3, #121	; 0x79
 800502c:	d184      	bne.n	8004f38 <_scanf_float+0x70>
 800502e:	f1bb 0f07 	cmp.w	fp, #7
 8005032:	d181      	bne.n	8004f38 <_scanf_float+0x70>
 8005034:	f04f 0b08 	mov.w	fp, #8
 8005038:	e007      	b.n	800504a <_scanf_float+0x182>
 800503a:	eb12 0f0b 	cmn.w	r2, fp
 800503e:	f47f af7b 	bne.w	8004f38 <_scanf_float+0x70>
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005048:	6021      	str	r1, [r4, #0]
 800504a:	702b      	strb	r3, [r5, #0]
 800504c:	3501      	adds	r5, #1
 800504e:	e79a      	b.n	8004f86 <_scanf_float+0xbe>
 8005050:	6821      	ldr	r1, [r4, #0]
 8005052:	0608      	lsls	r0, r1, #24
 8005054:	f57f af70 	bpl.w	8004f38 <_scanf_float+0x70>
 8005058:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800505c:	e7f4      	b.n	8005048 <_scanf_float+0x180>
 800505e:	2a02      	cmp	r2, #2
 8005060:	d047      	beq.n	80050f2 <_scanf_float+0x22a>
 8005062:	f1bb 0f01 	cmp.w	fp, #1
 8005066:	d003      	beq.n	8005070 <_scanf_float+0x1a8>
 8005068:	f1bb 0f04 	cmp.w	fp, #4
 800506c:	f47f af64 	bne.w	8004f38 <_scanf_float+0x70>
 8005070:	f10b 0b01 	add.w	fp, fp, #1
 8005074:	fa5f fb8b 	uxtb.w	fp, fp
 8005078:	e7e7      	b.n	800504a <_scanf_float+0x182>
 800507a:	f1bb 0f03 	cmp.w	fp, #3
 800507e:	d0f7      	beq.n	8005070 <_scanf_float+0x1a8>
 8005080:	f1bb 0f05 	cmp.w	fp, #5
 8005084:	e7f2      	b.n	800506c <_scanf_float+0x1a4>
 8005086:	f1bb 0f02 	cmp.w	fp, #2
 800508a:	f47f af55 	bne.w	8004f38 <_scanf_float+0x70>
 800508e:	f04f 0b03 	mov.w	fp, #3
 8005092:	e7da      	b.n	800504a <_scanf_float+0x182>
 8005094:	f1bb 0f06 	cmp.w	fp, #6
 8005098:	f47f af4e 	bne.w	8004f38 <_scanf_float+0x70>
 800509c:	f04f 0b07 	mov.w	fp, #7
 80050a0:	e7d3      	b.n	800504a <_scanf_float+0x182>
 80050a2:	6821      	ldr	r1, [r4, #0]
 80050a4:	0588      	lsls	r0, r1, #22
 80050a6:	f57f af47 	bpl.w	8004f38 <_scanf_float+0x70>
 80050aa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80050ae:	6021      	str	r1, [r4, #0]
 80050b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80050b4:	e7c9      	b.n	800504a <_scanf_float+0x182>
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80050bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80050c0:	d006      	beq.n	80050d0 <_scanf_float+0x208>
 80050c2:	0548      	lsls	r0, r1, #21
 80050c4:	f57f af38 	bpl.w	8004f38 <_scanf_float+0x70>
 80050c8:	f1b9 0f00 	cmp.w	r9, #0
 80050cc:	f43f af3b 	beq.w	8004f46 <_scanf_float+0x7e>
 80050d0:	0588      	lsls	r0, r1, #22
 80050d2:	bf58      	it	pl
 80050d4:	9802      	ldrpl	r0, [sp, #8]
 80050d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80050da:	bf58      	it	pl
 80050dc:	eba9 0000 	subpl.w	r0, r9, r0
 80050e0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80050e4:	bf58      	it	pl
 80050e6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80050ea:	6021      	str	r1, [r4, #0]
 80050ec:	f04f 0900 	mov.w	r9, #0
 80050f0:	e7ab      	b.n	800504a <_scanf_float+0x182>
 80050f2:	2203      	movs	r2, #3
 80050f4:	e7a9      	b.n	800504a <_scanf_float+0x182>
 80050f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050fa:	9205      	str	r2, [sp, #20]
 80050fc:	4631      	mov	r1, r6
 80050fe:	4638      	mov	r0, r7
 8005100:	4798      	blx	r3
 8005102:	9a05      	ldr	r2, [sp, #20]
 8005104:	2800      	cmp	r0, #0
 8005106:	f43f af04 	beq.w	8004f12 <_scanf_float+0x4a>
 800510a:	e715      	b.n	8004f38 <_scanf_float+0x70>
 800510c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005110:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005114:	4632      	mov	r2, r6
 8005116:	4638      	mov	r0, r7
 8005118:	4798      	blx	r3
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	3b01      	subs	r3, #1
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	e715      	b.n	8004f4e <_scanf_float+0x86>
 8005122:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005126:	2b06      	cmp	r3, #6
 8005128:	d80a      	bhi.n	8005140 <_scanf_float+0x278>
 800512a:	f1bb 0f02 	cmp.w	fp, #2
 800512e:	d968      	bls.n	8005202 <_scanf_float+0x33a>
 8005130:	f1ab 0b03 	sub.w	fp, fp, #3
 8005134:	fa5f fb8b 	uxtb.w	fp, fp
 8005138:	eba5 0b0b 	sub.w	fp, r5, fp
 800513c:	455d      	cmp	r5, fp
 800513e:	d14b      	bne.n	80051d8 <_scanf_float+0x310>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	05da      	lsls	r2, r3, #23
 8005144:	d51f      	bpl.n	8005186 <_scanf_float+0x2be>
 8005146:	055b      	lsls	r3, r3, #21
 8005148:	d468      	bmi.n	800521c <_scanf_float+0x354>
 800514a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	2965      	cmp	r1, #101	; 0x65
 8005152:	f103 33ff 	add.w	r3, r3, #4294967295
 8005156:	f105 3bff 	add.w	fp, r5, #4294967295
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	d00d      	beq.n	800517a <_scanf_float+0x2b2>
 800515e:	2945      	cmp	r1, #69	; 0x45
 8005160:	d00b      	beq.n	800517a <_scanf_float+0x2b2>
 8005162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005166:	4632      	mov	r2, r6
 8005168:	4638      	mov	r0, r7
 800516a:	4798      	blx	r3
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005172:	3b01      	subs	r3, #1
 8005174:	f1a5 0b02 	sub.w	fp, r5, #2
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800517e:	4632      	mov	r2, r6
 8005180:	4638      	mov	r0, r7
 8005182:	4798      	blx	r3
 8005184:	465d      	mov	r5, fp
 8005186:	6826      	ldr	r6, [r4, #0]
 8005188:	f016 0610 	ands.w	r6, r6, #16
 800518c:	d17a      	bne.n	8005284 <_scanf_float+0x3bc>
 800518e:	702e      	strb	r6, [r5, #0]
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519a:	d142      	bne.n	8005222 <_scanf_float+0x35a>
 800519c:	9b02      	ldr	r3, [sp, #8]
 800519e:	eba9 0303 	sub.w	r3, r9, r3
 80051a2:	425a      	negs	r2, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d149      	bne.n	800523c <_scanf_float+0x374>
 80051a8:	2200      	movs	r2, #0
 80051aa:	4641      	mov	r1, r8
 80051ac:	4638      	mov	r0, r7
 80051ae:	f000 febb 	bl	8005f28 <_strtod_r>
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	f8da 3000 	ldr.w	r3, [sl]
 80051b8:	f015 0f02 	tst.w	r5, #2
 80051bc:	f103 0204 	add.w	r2, r3, #4
 80051c0:	ec59 8b10 	vmov	r8, r9, d0
 80051c4:	f8ca 2000 	str.w	r2, [sl]
 80051c8:	d043      	beq.n	8005252 <_scanf_float+0x38a>
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	e9c3 8900 	strd	r8, r9, [r3]
 80051d0:	68e3      	ldr	r3, [r4, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60e3      	str	r3, [r4, #12]
 80051d6:	e6be      	b.n	8004f56 <_scanf_float+0x8e>
 80051d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80051e0:	4632      	mov	r2, r6
 80051e2:	4638      	mov	r0, r7
 80051e4:	4798      	blx	r3
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	e7a6      	b.n	800513c <_scanf_float+0x274>
 80051ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80051f6:	4632      	mov	r2, r6
 80051f8:	4638      	mov	r0, r7
 80051fa:	4798      	blx	r3
 80051fc:	6923      	ldr	r3, [r4, #16]
 80051fe:	3b01      	subs	r3, #1
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	4545      	cmp	r5, r8
 8005204:	d8f3      	bhi.n	80051ee <_scanf_float+0x326>
 8005206:	e6a5      	b.n	8004f54 <_scanf_float+0x8c>
 8005208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800520c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005210:	4632      	mov	r2, r6
 8005212:	4638      	mov	r0, r7
 8005214:	4798      	blx	r3
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	3b01      	subs	r3, #1
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	4545      	cmp	r5, r8
 800521e:	d8f3      	bhi.n	8005208 <_scanf_float+0x340>
 8005220:	e698      	b.n	8004f54 <_scanf_float+0x8c>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0bf      	beq.n	80051a8 <_scanf_float+0x2e0>
 8005228:	9904      	ldr	r1, [sp, #16]
 800522a:	230a      	movs	r3, #10
 800522c:	4632      	mov	r2, r6
 800522e:	3101      	adds	r1, #1
 8005230:	4638      	mov	r0, r7
 8005232:	f000 ff05 	bl	8006040 <_strtol_r>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	9d04      	ldr	r5, [sp, #16]
 800523a:	1ac2      	subs	r2, r0, r3
 800523c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005240:	429d      	cmp	r5, r3
 8005242:	bf28      	it	cs
 8005244:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005248:	490f      	ldr	r1, [pc, #60]	; (8005288 <_scanf_float+0x3c0>)
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f83c 	bl	80052c8 <siprintf>
 8005250:	e7aa      	b.n	80051a8 <_scanf_float+0x2e0>
 8005252:	f015 0504 	ands.w	r5, r5, #4
 8005256:	d1b8      	bne.n	80051ca <_scanf_float+0x302>
 8005258:	681f      	ldr	r7, [r3, #0]
 800525a:	ee10 2a10 	vmov	r2, s0
 800525e:	464b      	mov	r3, r9
 8005260:	ee10 0a10 	vmov	r0, s0
 8005264:	4649      	mov	r1, r9
 8005266:	f7fb fc81 	bl	8000b6c <__aeabi_dcmpun>
 800526a:	b128      	cbz	r0, 8005278 <_scanf_float+0x3b0>
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f825 	bl	80052bc <nanf>
 8005272:	ed87 0a00 	vstr	s0, [r7]
 8005276:	e7ab      	b.n	80051d0 <_scanf_float+0x308>
 8005278:	4640      	mov	r0, r8
 800527a:	4649      	mov	r1, r9
 800527c:	f7fb fcd4 	bl	8000c28 <__aeabi_d2f>
 8005280:	6038      	str	r0, [r7, #0]
 8005282:	e7a5      	b.n	80051d0 <_scanf_float+0x308>
 8005284:	2600      	movs	r6, #0
 8005286:	e666      	b.n	8004f56 <_scanf_float+0x8e>
 8005288:	08008a4c 	.word	0x08008a4c

0800528c <iprintf>:
 800528c:	b40f      	push	{r0, r1, r2, r3}
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <iprintf+0x2c>)
 8005290:	b513      	push	{r0, r1, r4, lr}
 8005292:	681c      	ldr	r4, [r3, #0]
 8005294:	b124      	cbz	r4, 80052a0 <iprintf+0x14>
 8005296:	69a3      	ldr	r3, [r4, #24]
 8005298:	b913      	cbnz	r3, 80052a0 <iprintf+0x14>
 800529a:	4620      	mov	r0, r4
 800529c:	f001 fd68 	bl	8006d70 <__sinit>
 80052a0:	ab05      	add	r3, sp, #20
 80052a2:	9a04      	ldr	r2, [sp, #16]
 80052a4:	68a1      	ldr	r1, [r4, #8]
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	4620      	mov	r0, r4
 80052aa:	f002 ff7b 	bl	80081a4 <_vfiprintf_r>
 80052ae:	b002      	add	sp, #8
 80052b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b4:	b004      	add	sp, #16
 80052b6:	4770      	bx	lr
 80052b8:	2000000c 	.word	0x2000000c

080052bc <nanf>:
 80052bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80052c4 <nanf+0x8>
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	7fc00000 	.word	0x7fc00000

080052c8 <siprintf>:
 80052c8:	b40e      	push	{r1, r2, r3}
 80052ca:	b500      	push	{lr}
 80052cc:	b09c      	sub	sp, #112	; 0x70
 80052ce:	ab1d      	add	r3, sp, #116	; 0x74
 80052d0:	9002      	str	r0, [sp, #8]
 80052d2:	9006      	str	r0, [sp, #24]
 80052d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052d8:	4809      	ldr	r0, [pc, #36]	; (8005300 <siprintf+0x38>)
 80052da:	9107      	str	r1, [sp, #28]
 80052dc:	9104      	str	r1, [sp, #16]
 80052de:	4909      	ldr	r1, [pc, #36]	; (8005304 <siprintf+0x3c>)
 80052e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e4:	9105      	str	r1, [sp, #20]
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	a902      	add	r1, sp, #8
 80052ec:	f002 fe38 	bl	8007f60 <_svfiprintf_r>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	b01c      	add	sp, #112	; 0x70
 80052f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052fc:	b003      	add	sp, #12
 80052fe:	4770      	bx	lr
 8005300:	2000000c 	.word	0x2000000c
 8005304:	ffff0208 	.word	0xffff0208

08005308 <sulp>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	460d      	mov	r5, r1
 800530e:	ec45 4b10 	vmov	d0, r4, r5
 8005312:	4616      	mov	r6, r2
 8005314:	f002 fbe0 	bl	8007ad8 <__ulp>
 8005318:	ec51 0b10 	vmov	r0, r1, d0
 800531c:	b17e      	cbz	r6, 800533e <sulp+0x36>
 800531e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005326:	2b00      	cmp	r3, #0
 8005328:	dd09      	ble.n	800533e <sulp+0x36>
 800532a:	051b      	lsls	r3, r3, #20
 800532c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005330:	2400      	movs	r4, #0
 8005332:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	f7fb f97d 	bl	8000638 <__aeabi_dmul>
 800533e:	bd70      	pop	{r4, r5, r6, pc}

08005340 <_strtod_l>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	461f      	mov	r7, r3
 8005346:	b0a1      	sub	sp, #132	; 0x84
 8005348:	2300      	movs	r3, #0
 800534a:	4681      	mov	r9, r0
 800534c:	4638      	mov	r0, r7
 800534e:	460e      	mov	r6, r1
 8005350:	9217      	str	r2, [sp, #92]	; 0x5c
 8005352:	931c      	str	r3, [sp, #112]	; 0x70
 8005354:	f002 f8bf 	bl	80074d6 <__localeconv_l>
 8005358:	4680      	mov	r8, r0
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	f7fa ff58 	bl	8000210 <strlen>
 8005360:	f04f 0a00 	mov.w	sl, #0
 8005364:	4604      	mov	r4, r0
 8005366:	f04f 0b00 	mov.w	fp, #0
 800536a:	961b      	str	r6, [sp, #108]	; 0x6c
 800536c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	2a0d      	cmp	r2, #13
 8005372:	d832      	bhi.n	80053da <_strtod_l+0x9a>
 8005374:	2a09      	cmp	r2, #9
 8005376:	d236      	bcs.n	80053e6 <_strtod_l+0xa6>
 8005378:	2a00      	cmp	r2, #0
 800537a:	d03e      	beq.n	80053fa <_strtod_l+0xba>
 800537c:	2300      	movs	r3, #0
 800537e:	930d      	str	r3, [sp, #52]	; 0x34
 8005380:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005382:	782b      	ldrb	r3, [r5, #0]
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	f040 80ac 	bne.w	80054e2 <_strtod_l+0x1a2>
 800538a:	786b      	ldrb	r3, [r5, #1]
 800538c:	2b58      	cmp	r3, #88	; 0x58
 800538e:	d001      	beq.n	8005394 <_strtod_l+0x54>
 8005390:	2b78      	cmp	r3, #120	; 0x78
 8005392:	d167      	bne.n	8005464 <_strtod_l+0x124>
 8005394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	ab1c      	add	r3, sp, #112	; 0x70
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	9702      	str	r7, [sp, #8]
 800539e:	ab1d      	add	r3, sp, #116	; 0x74
 80053a0:	4a88      	ldr	r2, [pc, #544]	; (80055c4 <_strtod_l+0x284>)
 80053a2:	a91b      	add	r1, sp, #108	; 0x6c
 80053a4:	4648      	mov	r0, r9
 80053a6:	f001 fdbc 	bl	8006f22 <__gethex>
 80053aa:	f010 0407 	ands.w	r4, r0, #7
 80053ae:	4606      	mov	r6, r0
 80053b0:	d005      	beq.n	80053be <_strtod_l+0x7e>
 80053b2:	2c06      	cmp	r4, #6
 80053b4:	d12b      	bne.n	800540e <_strtod_l+0xce>
 80053b6:	3501      	adds	r5, #1
 80053b8:	2300      	movs	r3, #0
 80053ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80053bc:	930d      	str	r3, [sp, #52]	; 0x34
 80053be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f040 859a 	bne.w	8005efa <_strtod_l+0xbba>
 80053c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c8:	b1e3      	cbz	r3, 8005404 <_strtod_l+0xc4>
 80053ca:	4652      	mov	r2, sl
 80053cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053d0:	ec43 2b10 	vmov	d0, r2, r3
 80053d4:	b021      	add	sp, #132	; 0x84
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	2a2b      	cmp	r2, #43	; 0x2b
 80053dc:	d015      	beq.n	800540a <_strtod_l+0xca>
 80053de:	2a2d      	cmp	r2, #45	; 0x2d
 80053e0:	d004      	beq.n	80053ec <_strtod_l+0xac>
 80053e2:	2a20      	cmp	r2, #32
 80053e4:	d1ca      	bne.n	800537c <_strtod_l+0x3c>
 80053e6:	3301      	adds	r3, #1
 80053e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80053ea:	e7bf      	b.n	800536c <_strtod_l+0x2c>
 80053ec:	2201      	movs	r2, #1
 80053ee:	920d      	str	r2, [sp, #52]	; 0x34
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1c2      	bne.n	8005380 <_strtod_l+0x40>
 80053fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 8579 	bne.w	8005ef6 <_strtod_l+0xbb6>
 8005404:	4652      	mov	r2, sl
 8005406:	465b      	mov	r3, fp
 8005408:	e7e2      	b.n	80053d0 <_strtod_l+0x90>
 800540a:	2200      	movs	r2, #0
 800540c:	e7ef      	b.n	80053ee <_strtod_l+0xae>
 800540e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005410:	b13a      	cbz	r2, 8005422 <_strtod_l+0xe2>
 8005412:	2135      	movs	r1, #53	; 0x35
 8005414:	a81e      	add	r0, sp, #120	; 0x78
 8005416:	f002 fc57 	bl	8007cc8 <__copybits>
 800541a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800541c:	4648      	mov	r0, r9
 800541e:	f002 f8c4 	bl	80075aa <_Bfree>
 8005422:	3c01      	subs	r4, #1
 8005424:	2c04      	cmp	r4, #4
 8005426:	d806      	bhi.n	8005436 <_strtod_l+0xf6>
 8005428:	e8df f004 	tbb	[pc, r4]
 800542c:	1714030a 	.word	0x1714030a
 8005430:	0a          	.byte	0x0a
 8005431:	00          	.byte	0x00
 8005432:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005436:	0730      	lsls	r0, r6, #28
 8005438:	d5c1      	bpl.n	80053be <_strtod_l+0x7e>
 800543a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800543e:	e7be      	b.n	80053be <_strtod_l+0x7e>
 8005440:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005444:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005446:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800544a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800544e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005452:	e7f0      	b.n	8005436 <_strtod_l+0xf6>
 8005454:	f8df b170 	ldr.w	fp, [pc, #368]	; 80055c8 <_strtod_l+0x288>
 8005458:	e7ed      	b.n	8005436 <_strtod_l+0xf6>
 800545a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800545e:	f04f 3aff 	mov.w	sl, #4294967295
 8005462:	e7e8      	b.n	8005436 <_strtod_l+0xf6>
 8005464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	921b      	str	r2, [sp, #108]	; 0x6c
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d0f9      	beq.n	8005464 <_strtod_l+0x124>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0a4      	beq.n	80053be <_strtod_l+0x7e>
 8005474:	2301      	movs	r3, #1
 8005476:	2500      	movs	r5, #0
 8005478:	9306      	str	r3, [sp, #24]
 800547a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800547c:	9308      	str	r3, [sp, #32]
 800547e:	9507      	str	r5, [sp, #28]
 8005480:	9505      	str	r5, [sp, #20]
 8005482:	220a      	movs	r2, #10
 8005484:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005486:	7807      	ldrb	r7, [r0, #0]
 8005488:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800548c:	b2d9      	uxtb	r1, r3
 800548e:	2909      	cmp	r1, #9
 8005490:	d929      	bls.n	80054e6 <_strtod_l+0x1a6>
 8005492:	4622      	mov	r2, r4
 8005494:	f8d8 1000 	ldr.w	r1, [r8]
 8005498:	f002 ffed 	bl	8008476 <strncmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	d031      	beq.n	8005504 <_strtod_l+0x1c4>
 80054a0:	2000      	movs	r0, #0
 80054a2:	9c05      	ldr	r4, [sp, #20]
 80054a4:	9004      	str	r0, [sp, #16]
 80054a6:	463b      	mov	r3, r7
 80054a8:	4602      	mov	r2, r0
 80054aa:	2b65      	cmp	r3, #101	; 0x65
 80054ac:	d001      	beq.n	80054b2 <_strtod_l+0x172>
 80054ae:	2b45      	cmp	r3, #69	; 0x45
 80054b0:	d114      	bne.n	80054dc <_strtod_l+0x19c>
 80054b2:	b924      	cbnz	r4, 80054be <_strtod_l+0x17e>
 80054b4:	b910      	cbnz	r0, 80054bc <_strtod_l+0x17c>
 80054b6:	9b06      	ldr	r3, [sp, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d09e      	beq.n	80053fa <_strtod_l+0xba>
 80054bc:	2400      	movs	r4, #0
 80054be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80054c0:	1c73      	adds	r3, r6, #1
 80054c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80054c4:	7873      	ldrb	r3, [r6, #1]
 80054c6:	2b2b      	cmp	r3, #43	; 0x2b
 80054c8:	d078      	beq.n	80055bc <_strtod_l+0x27c>
 80054ca:	2b2d      	cmp	r3, #45	; 0x2d
 80054cc:	d070      	beq.n	80055b0 <_strtod_l+0x270>
 80054ce:	f04f 0c00 	mov.w	ip, #0
 80054d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80054d6:	2f09      	cmp	r7, #9
 80054d8:	d97c      	bls.n	80055d4 <_strtod_l+0x294>
 80054da:	961b      	str	r6, [sp, #108]	; 0x6c
 80054dc:	f04f 0e00 	mov.w	lr, #0
 80054e0:	e09a      	b.n	8005618 <_strtod_l+0x2d8>
 80054e2:	2300      	movs	r3, #0
 80054e4:	e7c7      	b.n	8005476 <_strtod_l+0x136>
 80054e6:	9905      	ldr	r1, [sp, #20]
 80054e8:	2908      	cmp	r1, #8
 80054ea:	bfdd      	ittte	le
 80054ec:	9907      	ldrle	r1, [sp, #28]
 80054ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80054f2:	9307      	strle	r3, [sp, #28]
 80054f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80054f8:	9b05      	ldr	r3, [sp, #20]
 80054fa:	3001      	adds	r0, #1
 80054fc:	3301      	adds	r3, #1
 80054fe:	9305      	str	r3, [sp, #20]
 8005500:	901b      	str	r0, [sp, #108]	; 0x6c
 8005502:	e7bf      	b.n	8005484 <_strtod_l+0x144>
 8005504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005506:	191a      	adds	r2, r3, r4
 8005508:	921b      	str	r2, [sp, #108]	; 0x6c
 800550a:	9a05      	ldr	r2, [sp, #20]
 800550c:	5d1b      	ldrb	r3, [r3, r4]
 800550e:	2a00      	cmp	r2, #0
 8005510:	d037      	beq.n	8005582 <_strtod_l+0x242>
 8005512:	9c05      	ldr	r4, [sp, #20]
 8005514:	4602      	mov	r2, r0
 8005516:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800551a:	2909      	cmp	r1, #9
 800551c:	d913      	bls.n	8005546 <_strtod_l+0x206>
 800551e:	2101      	movs	r1, #1
 8005520:	9104      	str	r1, [sp, #16]
 8005522:	e7c2      	b.n	80054aa <_strtod_l+0x16a>
 8005524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	921b      	str	r2, [sp, #108]	; 0x6c
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	3001      	adds	r0, #1
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d0f8      	beq.n	8005524 <_strtod_l+0x1e4>
 8005532:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005536:	2a08      	cmp	r2, #8
 8005538:	f200 84e4 	bhi.w	8005f04 <_strtod_l+0xbc4>
 800553c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800553e:	9208      	str	r2, [sp, #32]
 8005540:	4602      	mov	r2, r0
 8005542:	2000      	movs	r0, #0
 8005544:	4604      	mov	r4, r0
 8005546:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800554a:	f100 0101 	add.w	r1, r0, #1
 800554e:	d012      	beq.n	8005576 <_strtod_l+0x236>
 8005550:	440a      	add	r2, r1
 8005552:	eb00 0c04 	add.w	ip, r0, r4
 8005556:	4621      	mov	r1, r4
 8005558:	270a      	movs	r7, #10
 800555a:	458c      	cmp	ip, r1
 800555c:	d113      	bne.n	8005586 <_strtod_l+0x246>
 800555e:	1821      	adds	r1, r4, r0
 8005560:	2908      	cmp	r1, #8
 8005562:	f104 0401 	add.w	r4, r4, #1
 8005566:	4404      	add	r4, r0
 8005568:	dc19      	bgt.n	800559e <_strtod_l+0x25e>
 800556a:	9b07      	ldr	r3, [sp, #28]
 800556c:	210a      	movs	r1, #10
 800556e:	fb01 e303 	mla	r3, r1, r3, lr
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	2100      	movs	r1, #0
 8005576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005578:	1c58      	adds	r0, r3, #1
 800557a:	901b      	str	r0, [sp, #108]	; 0x6c
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	4608      	mov	r0, r1
 8005580:	e7c9      	b.n	8005516 <_strtod_l+0x1d6>
 8005582:	9805      	ldr	r0, [sp, #20]
 8005584:	e7d3      	b.n	800552e <_strtod_l+0x1ee>
 8005586:	2908      	cmp	r1, #8
 8005588:	f101 0101 	add.w	r1, r1, #1
 800558c:	dc03      	bgt.n	8005596 <_strtod_l+0x256>
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	437b      	muls	r3, r7
 8005592:	9307      	str	r3, [sp, #28]
 8005594:	e7e1      	b.n	800555a <_strtod_l+0x21a>
 8005596:	2910      	cmp	r1, #16
 8005598:	bfd8      	it	le
 800559a:	437d      	mulle	r5, r7
 800559c:	e7dd      	b.n	800555a <_strtod_l+0x21a>
 800559e:	2c10      	cmp	r4, #16
 80055a0:	bfdc      	itt	le
 80055a2:	210a      	movle	r1, #10
 80055a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80055a8:	e7e4      	b.n	8005574 <_strtod_l+0x234>
 80055aa:	2301      	movs	r3, #1
 80055ac:	9304      	str	r3, [sp, #16]
 80055ae:	e781      	b.n	80054b4 <_strtod_l+0x174>
 80055b0:	f04f 0c01 	mov.w	ip, #1
 80055b4:	1cb3      	adds	r3, r6, #2
 80055b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80055b8:	78b3      	ldrb	r3, [r6, #2]
 80055ba:	e78a      	b.n	80054d2 <_strtod_l+0x192>
 80055bc:	f04f 0c00 	mov.w	ip, #0
 80055c0:	e7f8      	b.n	80055b4 <_strtod_l+0x274>
 80055c2:	bf00      	nop
 80055c4:	08008a54 	.word	0x08008a54
 80055c8:	7ff00000 	.word	0x7ff00000
 80055cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ce:	1c5f      	adds	r7, r3, #1
 80055d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d0f9      	beq.n	80055cc <_strtod_l+0x28c>
 80055d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80055dc:	2f08      	cmp	r7, #8
 80055de:	f63f af7d 	bhi.w	80054dc <_strtod_l+0x19c>
 80055e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80055e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055e8:	930a      	str	r3, [sp, #40]	; 0x28
 80055ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ec:	1c5f      	adds	r7, r3, #1
 80055ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80055f6:	f1b8 0f09 	cmp.w	r8, #9
 80055fa:	d937      	bls.n	800566c <_strtod_l+0x32c>
 80055fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055fe:	1a7f      	subs	r7, r7, r1
 8005600:	2f08      	cmp	r7, #8
 8005602:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005606:	dc37      	bgt.n	8005678 <_strtod_l+0x338>
 8005608:	45be      	cmp	lr, r7
 800560a:	bfa8      	it	ge
 800560c:	46be      	movge	lr, r7
 800560e:	f1bc 0f00 	cmp.w	ip, #0
 8005612:	d001      	beq.n	8005618 <_strtod_l+0x2d8>
 8005614:	f1ce 0e00 	rsb	lr, lr, #0
 8005618:	2c00      	cmp	r4, #0
 800561a:	d151      	bne.n	80056c0 <_strtod_l+0x380>
 800561c:	2800      	cmp	r0, #0
 800561e:	f47f aece 	bne.w	80053be <_strtod_l+0x7e>
 8005622:	9a06      	ldr	r2, [sp, #24]
 8005624:	2a00      	cmp	r2, #0
 8005626:	f47f aeca 	bne.w	80053be <_strtod_l+0x7e>
 800562a:	9a04      	ldr	r2, [sp, #16]
 800562c:	2a00      	cmp	r2, #0
 800562e:	f47f aee4 	bne.w	80053fa <_strtod_l+0xba>
 8005632:	2b4e      	cmp	r3, #78	; 0x4e
 8005634:	d027      	beq.n	8005686 <_strtod_l+0x346>
 8005636:	dc21      	bgt.n	800567c <_strtod_l+0x33c>
 8005638:	2b49      	cmp	r3, #73	; 0x49
 800563a:	f47f aede 	bne.w	80053fa <_strtod_l+0xba>
 800563e:	49a0      	ldr	r1, [pc, #640]	; (80058c0 <_strtod_l+0x580>)
 8005640:	a81b      	add	r0, sp, #108	; 0x6c
 8005642:	f001 fea1 	bl	8007388 <__match>
 8005646:	2800      	cmp	r0, #0
 8005648:	f43f aed7 	beq.w	80053fa <_strtod_l+0xba>
 800564c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800564e:	499d      	ldr	r1, [pc, #628]	; (80058c4 <_strtod_l+0x584>)
 8005650:	3b01      	subs	r3, #1
 8005652:	a81b      	add	r0, sp, #108	; 0x6c
 8005654:	931b      	str	r3, [sp, #108]	; 0x6c
 8005656:	f001 fe97 	bl	8007388 <__match>
 800565a:	b910      	cbnz	r0, 8005662 <_strtod_l+0x322>
 800565c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800565e:	3301      	adds	r3, #1
 8005660:	931b      	str	r3, [sp, #108]	; 0x6c
 8005662:	f8df b274 	ldr.w	fp, [pc, #628]	; 80058d8 <_strtod_l+0x598>
 8005666:	f04f 0a00 	mov.w	sl, #0
 800566a:	e6a8      	b.n	80053be <_strtod_l+0x7e>
 800566c:	210a      	movs	r1, #10
 800566e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005672:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005676:	e7b8      	b.n	80055ea <_strtod_l+0x2aa>
 8005678:	46be      	mov	lr, r7
 800567a:	e7c8      	b.n	800560e <_strtod_l+0x2ce>
 800567c:	2b69      	cmp	r3, #105	; 0x69
 800567e:	d0de      	beq.n	800563e <_strtod_l+0x2fe>
 8005680:	2b6e      	cmp	r3, #110	; 0x6e
 8005682:	f47f aeba 	bne.w	80053fa <_strtod_l+0xba>
 8005686:	4990      	ldr	r1, [pc, #576]	; (80058c8 <_strtod_l+0x588>)
 8005688:	a81b      	add	r0, sp, #108	; 0x6c
 800568a:	f001 fe7d 	bl	8007388 <__match>
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aeb3 	beq.w	80053fa <_strtod_l+0xba>
 8005694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b28      	cmp	r3, #40	; 0x28
 800569a:	d10e      	bne.n	80056ba <_strtod_l+0x37a>
 800569c:	aa1e      	add	r2, sp, #120	; 0x78
 800569e:	498b      	ldr	r1, [pc, #556]	; (80058cc <_strtod_l+0x58c>)
 80056a0:	a81b      	add	r0, sp, #108	; 0x6c
 80056a2:	f001 fe85 	bl	80073b0 <__hexnan>
 80056a6:	2805      	cmp	r0, #5
 80056a8:	d107      	bne.n	80056ba <_strtod_l+0x37a>
 80056aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80056b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80056b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80056b8:	e681      	b.n	80053be <_strtod_l+0x7e>
 80056ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80058e0 <_strtod_l+0x5a0>
 80056be:	e7d2      	b.n	8005666 <_strtod_l+0x326>
 80056c0:	ebae 0302 	sub.w	r3, lr, r2
 80056c4:	9306      	str	r3, [sp, #24]
 80056c6:	9b05      	ldr	r3, [sp, #20]
 80056c8:	9807      	ldr	r0, [sp, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf08      	it	eq
 80056ce:	4623      	moveq	r3, r4
 80056d0:	2c10      	cmp	r4, #16
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	46a0      	mov	r8, r4
 80056d6:	bfa8      	it	ge
 80056d8:	f04f 0810 	movge.w	r8, #16
 80056dc:	f7fa ff32 	bl	8000544 <__aeabi_ui2d>
 80056e0:	2c09      	cmp	r4, #9
 80056e2:	4682      	mov	sl, r0
 80056e4:	468b      	mov	fp, r1
 80056e6:	dc13      	bgt.n	8005710 <_strtod_l+0x3d0>
 80056e8:	9b06      	ldr	r3, [sp, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f ae67 	beq.w	80053be <_strtod_l+0x7e>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	dd7a      	ble.n	80057ea <_strtod_l+0x4aa>
 80056f4:	2b16      	cmp	r3, #22
 80056f6:	dc61      	bgt.n	80057bc <_strtod_l+0x47c>
 80056f8:	4a75      	ldr	r2, [pc, #468]	; (80058d0 <_strtod_l+0x590>)
 80056fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80056fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8005702:	4652      	mov	r2, sl
 8005704:	465b      	mov	r3, fp
 8005706:	f7fa ff97 	bl	8000638 <__aeabi_dmul>
 800570a:	4682      	mov	sl, r0
 800570c:	468b      	mov	fp, r1
 800570e:	e656      	b.n	80053be <_strtod_l+0x7e>
 8005710:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <_strtod_l+0x590>)
 8005712:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005716:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800571a:	f7fa ff8d 	bl	8000638 <__aeabi_dmul>
 800571e:	4606      	mov	r6, r0
 8005720:	4628      	mov	r0, r5
 8005722:	460f      	mov	r7, r1
 8005724:	f7fa ff0e 	bl	8000544 <__aeabi_ui2d>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fdcc 	bl	80002cc <__adddf3>
 8005734:	2c0f      	cmp	r4, #15
 8005736:	4682      	mov	sl, r0
 8005738:	468b      	mov	fp, r1
 800573a:	ddd5      	ble.n	80056e8 <_strtod_l+0x3a8>
 800573c:	9b06      	ldr	r3, [sp, #24]
 800573e:	eba4 0808 	sub.w	r8, r4, r8
 8005742:	4498      	add	r8, r3
 8005744:	f1b8 0f00 	cmp.w	r8, #0
 8005748:	f340 8096 	ble.w	8005878 <_strtod_l+0x538>
 800574c:	f018 030f 	ands.w	r3, r8, #15
 8005750:	d00a      	beq.n	8005768 <_strtod_l+0x428>
 8005752:	495f      	ldr	r1, [pc, #380]	; (80058d0 <_strtod_l+0x590>)
 8005754:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005758:	4652      	mov	r2, sl
 800575a:	465b      	mov	r3, fp
 800575c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005760:	f7fa ff6a 	bl	8000638 <__aeabi_dmul>
 8005764:	4682      	mov	sl, r0
 8005766:	468b      	mov	fp, r1
 8005768:	f038 080f 	bics.w	r8, r8, #15
 800576c:	d073      	beq.n	8005856 <_strtod_l+0x516>
 800576e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005772:	dd47      	ble.n	8005804 <_strtod_l+0x4c4>
 8005774:	2400      	movs	r4, #0
 8005776:	46a0      	mov	r8, r4
 8005778:	9407      	str	r4, [sp, #28]
 800577a:	9405      	str	r4, [sp, #20]
 800577c:	2322      	movs	r3, #34	; 0x22
 800577e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80058d8 <_strtod_l+0x598>
 8005782:	f8c9 3000 	str.w	r3, [r9]
 8005786:	f04f 0a00 	mov.w	sl, #0
 800578a:	9b07      	ldr	r3, [sp, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f43f ae16 	beq.w	80053be <_strtod_l+0x7e>
 8005792:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005794:	4648      	mov	r0, r9
 8005796:	f001 ff08 	bl	80075aa <_Bfree>
 800579a:	9905      	ldr	r1, [sp, #20]
 800579c:	4648      	mov	r0, r9
 800579e:	f001 ff04 	bl	80075aa <_Bfree>
 80057a2:	4641      	mov	r1, r8
 80057a4:	4648      	mov	r0, r9
 80057a6:	f001 ff00 	bl	80075aa <_Bfree>
 80057aa:	9907      	ldr	r1, [sp, #28]
 80057ac:	4648      	mov	r0, r9
 80057ae:	f001 fefc 	bl	80075aa <_Bfree>
 80057b2:	4621      	mov	r1, r4
 80057b4:	4648      	mov	r0, r9
 80057b6:	f001 fef8 	bl	80075aa <_Bfree>
 80057ba:	e600      	b.n	80053be <_strtod_l+0x7e>
 80057bc:	9a06      	ldr	r2, [sp, #24]
 80057be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80057c2:	4293      	cmp	r3, r2
 80057c4:	dbba      	blt.n	800573c <_strtod_l+0x3fc>
 80057c6:	4d42      	ldr	r5, [pc, #264]	; (80058d0 <_strtod_l+0x590>)
 80057c8:	f1c4 040f 	rsb	r4, r4, #15
 80057cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d8:	f7fa ff2e 	bl	8000638 <__aeabi_dmul>
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	1b1c      	subs	r4, r3, r4
 80057e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80057e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057e8:	e78d      	b.n	8005706 <_strtod_l+0x3c6>
 80057ea:	f113 0f16 	cmn.w	r3, #22
 80057ee:	dba5      	blt.n	800573c <_strtod_l+0x3fc>
 80057f0:	4a37      	ldr	r2, [pc, #220]	; (80058d0 <_strtod_l+0x590>)
 80057f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80057f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80057fa:	4650      	mov	r0, sl
 80057fc:	4659      	mov	r1, fp
 80057fe:	f7fb f845 	bl	800088c <__aeabi_ddiv>
 8005802:	e782      	b.n	800570a <_strtod_l+0x3ca>
 8005804:	2300      	movs	r3, #0
 8005806:	4e33      	ldr	r6, [pc, #204]	; (80058d4 <_strtod_l+0x594>)
 8005808:	ea4f 1828 	mov.w	r8, r8, asr #4
 800580c:	4650      	mov	r0, sl
 800580e:	4659      	mov	r1, fp
 8005810:	461d      	mov	r5, r3
 8005812:	f1b8 0f01 	cmp.w	r8, #1
 8005816:	dc21      	bgt.n	800585c <_strtod_l+0x51c>
 8005818:	b10b      	cbz	r3, 800581e <_strtod_l+0x4de>
 800581a:	4682      	mov	sl, r0
 800581c:	468b      	mov	fp, r1
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <_strtod_l+0x594>)
 8005820:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005824:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005828:	4652      	mov	r2, sl
 800582a:	465b      	mov	r3, fp
 800582c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005830:	f7fa ff02 	bl	8000638 <__aeabi_dmul>
 8005834:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <_strtod_l+0x598>)
 8005836:	460a      	mov	r2, r1
 8005838:	400b      	ands	r3, r1
 800583a:	4928      	ldr	r1, [pc, #160]	; (80058dc <_strtod_l+0x59c>)
 800583c:	428b      	cmp	r3, r1
 800583e:	4682      	mov	sl, r0
 8005840:	d898      	bhi.n	8005774 <_strtod_l+0x434>
 8005842:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005846:	428b      	cmp	r3, r1
 8005848:	bf86      	itte	hi
 800584a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80058e4 <_strtod_l+0x5a4>
 800584e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005852:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005856:	2300      	movs	r3, #0
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	e077      	b.n	800594c <_strtod_l+0x60c>
 800585c:	f018 0f01 	tst.w	r8, #1
 8005860:	d006      	beq.n	8005870 <_strtod_l+0x530>
 8005862:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fee5 	bl	8000638 <__aeabi_dmul>
 800586e:	2301      	movs	r3, #1
 8005870:	3501      	adds	r5, #1
 8005872:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005876:	e7cc      	b.n	8005812 <_strtod_l+0x4d2>
 8005878:	d0ed      	beq.n	8005856 <_strtod_l+0x516>
 800587a:	f1c8 0800 	rsb	r8, r8, #0
 800587e:	f018 020f 	ands.w	r2, r8, #15
 8005882:	d00a      	beq.n	800589a <_strtod_l+0x55a>
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <_strtod_l+0x590>)
 8005886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800588a:	4650      	mov	r0, sl
 800588c:	4659      	mov	r1, fp
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fffb 	bl	800088c <__aeabi_ddiv>
 8005896:	4682      	mov	sl, r0
 8005898:	468b      	mov	fp, r1
 800589a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800589e:	d0da      	beq.n	8005856 <_strtod_l+0x516>
 80058a0:	f1b8 0f1f 	cmp.w	r8, #31
 80058a4:	dd20      	ble.n	80058e8 <_strtod_l+0x5a8>
 80058a6:	2400      	movs	r4, #0
 80058a8:	46a0      	mov	r8, r4
 80058aa:	9407      	str	r4, [sp, #28]
 80058ac:	9405      	str	r4, [sp, #20]
 80058ae:	2322      	movs	r3, #34	; 0x22
 80058b0:	f04f 0a00 	mov.w	sl, #0
 80058b4:	f04f 0b00 	mov.w	fp, #0
 80058b8:	f8c9 3000 	str.w	r3, [r9]
 80058bc:	e765      	b.n	800578a <_strtod_l+0x44a>
 80058be:	bf00      	nop
 80058c0:	08008a1d 	.word	0x08008a1d
 80058c4:	08008aab 	.word	0x08008aab
 80058c8:	08008a25 	.word	0x08008a25
 80058cc:	08008a68 	.word	0x08008a68
 80058d0:	08008b50 	.word	0x08008b50
 80058d4:	08008b28 	.word	0x08008b28
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	7ca00000 	.word	0x7ca00000
 80058e0:	fff80000 	.word	0xfff80000
 80058e4:	7fefffff 	.word	0x7fefffff
 80058e8:	f018 0310 	ands.w	r3, r8, #16
 80058ec:	bf18      	it	ne
 80058ee:	236a      	movne	r3, #106	; 0x6a
 80058f0:	4da0      	ldr	r5, [pc, #640]	; (8005b74 <_strtod_l+0x834>)
 80058f2:	9304      	str	r3, [sp, #16]
 80058f4:	4650      	mov	r0, sl
 80058f6:	4659      	mov	r1, fp
 80058f8:	2300      	movs	r3, #0
 80058fa:	f1b8 0f00 	cmp.w	r8, #0
 80058fe:	f300 810a 	bgt.w	8005b16 <_strtod_l+0x7d6>
 8005902:	b10b      	cbz	r3, 8005908 <_strtod_l+0x5c8>
 8005904:	4682      	mov	sl, r0
 8005906:	468b      	mov	fp, r1
 8005908:	9b04      	ldr	r3, [sp, #16]
 800590a:	b1bb      	cbz	r3, 800593c <_strtod_l+0x5fc>
 800590c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005910:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005914:	2b00      	cmp	r3, #0
 8005916:	4659      	mov	r1, fp
 8005918:	dd10      	ble.n	800593c <_strtod_l+0x5fc>
 800591a:	2b1f      	cmp	r3, #31
 800591c:	f340 8107 	ble.w	8005b2e <_strtod_l+0x7ee>
 8005920:	2b34      	cmp	r3, #52	; 0x34
 8005922:	bfde      	ittt	le
 8005924:	3b20      	suble	r3, #32
 8005926:	f04f 32ff 	movle.w	r2, #4294967295
 800592a:	fa02 f303 	lslle.w	r3, r2, r3
 800592e:	f04f 0a00 	mov.w	sl, #0
 8005932:	bfcc      	ite	gt
 8005934:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005938:	ea03 0b01 	andle.w	fp, r3, r1
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	4650      	mov	r0, sl
 8005942:	4659      	mov	r1, fp
 8005944:	f7fb f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 8005948:	2800      	cmp	r0, #0
 800594a:	d1ac      	bne.n	80058a6 <_strtod_l+0x566>
 800594c:	9b07      	ldr	r3, [sp, #28]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	9a05      	ldr	r2, [sp, #20]
 8005952:	9908      	ldr	r1, [sp, #32]
 8005954:	4623      	mov	r3, r4
 8005956:	4648      	mov	r0, r9
 8005958:	f001 fe79 	bl	800764e <__s2b>
 800595c:	9007      	str	r0, [sp, #28]
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f af08 	beq.w	8005774 <_strtod_l+0x434>
 8005964:	9a06      	ldr	r2, [sp, #24]
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	2a00      	cmp	r2, #0
 800596a:	f1c3 0300 	rsb	r3, r3, #0
 800596e:	bfa8      	it	ge
 8005970:	2300      	movge	r3, #0
 8005972:	930e      	str	r3, [sp, #56]	; 0x38
 8005974:	2400      	movs	r4, #0
 8005976:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800597a:	9316      	str	r3, [sp, #88]	; 0x58
 800597c:	46a0      	mov	r8, r4
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	4648      	mov	r0, r9
 8005982:	6859      	ldr	r1, [r3, #4]
 8005984:	f001 fddd 	bl	8007542 <_Balloc>
 8005988:	9005      	str	r0, [sp, #20]
 800598a:	2800      	cmp	r0, #0
 800598c:	f43f aef6 	beq.w	800577c <_strtod_l+0x43c>
 8005990:	9b07      	ldr	r3, [sp, #28]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	3202      	adds	r2, #2
 8005996:	f103 010c 	add.w	r1, r3, #12
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	300c      	adds	r0, #12
 800599e:	f001 fdc5 	bl	800752c <memcpy>
 80059a2:	aa1e      	add	r2, sp, #120	; 0x78
 80059a4:	a91d      	add	r1, sp, #116	; 0x74
 80059a6:	ec4b ab10 	vmov	d0, sl, fp
 80059aa:	4648      	mov	r0, r9
 80059ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80059b0:	f002 f908 	bl	8007bc4 <__d2b>
 80059b4:	901c      	str	r0, [sp, #112]	; 0x70
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f aee0 	beq.w	800577c <_strtod_l+0x43c>
 80059bc:	2101      	movs	r1, #1
 80059be:	4648      	mov	r0, r9
 80059c0:	f001 fed1 	bl	8007766 <__i2b>
 80059c4:	4680      	mov	r8, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f43f aed8 	beq.w	800577c <_strtod_l+0x43c>
 80059cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80059ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	bfab      	itete	ge
 80059d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80059d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80059d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80059da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80059dc:	bfac      	ite	ge
 80059de:	18f7      	addge	r7, r6, r3
 80059e0:	1b9d      	sublt	r5, r3, r6
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	1af6      	subs	r6, r6, r3
 80059e6:	4416      	add	r6, r2
 80059e8:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <_strtod_l+0x838>)
 80059ea:	3e01      	subs	r6, #1
 80059ec:	429e      	cmp	r6, r3
 80059ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80059f2:	f280 80af 	bge.w	8005b54 <_strtod_l+0x814>
 80059f6:	1b9b      	subs	r3, r3, r6
 80059f8:	2b1f      	cmp	r3, #31
 80059fa:	eba2 0203 	sub.w	r2, r2, r3
 80059fe:	f04f 0101 	mov.w	r1, #1
 8005a02:	f300 809b 	bgt.w	8005b3c <_strtod_l+0x7fc>
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a10:	18be      	adds	r6, r7, r2
 8005a12:	9b04      	ldr	r3, [sp, #16]
 8005a14:	42b7      	cmp	r7, r6
 8005a16:	4415      	add	r5, r2
 8005a18:	441d      	add	r5, r3
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	bfa8      	it	ge
 8005a1e:	4633      	movge	r3, r6
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	bfa8      	it	ge
 8005a24:	462b      	movge	r3, r5
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfc2      	ittt	gt
 8005a2a:	1af6      	subgt	r6, r6, r3
 8005a2c:	1aed      	subgt	r5, r5, r3
 8005a2e:	1aff      	subgt	r7, r7, r3
 8005a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a32:	b1bb      	cbz	r3, 8005a64 <_strtod_l+0x724>
 8005a34:	4641      	mov	r1, r8
 8005a36:	461a      	mov	r2, r3
 8005a38:	4648      	mov	r0, r9
 8005a3a:	f001 ff33 	bl	80078a4 <__pow5mult>
 8005a3e:	4680      	mov	r8, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f43f ae9b 	beq.w	800577c <_strtod_l+0x43c>
 8005a46:	4601      	mov	r1, r0
 8005a48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a4a:	4648      	mov	r0, r9
 8005a4c:	f001 fe94 	bl	8007778 <__multiply>
 8005a50:	900c      	str	r0, [sp, #48]	; 0x30
 8005a52:	2800      	cmp	r0, #0
 8005a54:	f43f ae92 	beq.w	800577c <_strtod_l+0x43c>
 8005a58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a5a:	4648      	mov	r0, r9
 8005a5c:	f001 fda5 	bl	80075aa <_Bfree>
 8005a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a62:	931c      	str	r3, [sp, #112]	; 0x70
 8005a64:	2e00      	cmp	r6, #0
 8005a66:	dc7a      	bgt.n	8005b5e <_strtod_l+0x81e>
 8005a68:	9b06      	ldr	r3, [sp, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd08      	ble.n	8005a80 <_strtod_l+0x740>
 8005a6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a70:	9905      	ldr	r1, [sp, #20]
 8005a72:	4648      	mov	r0, r9
 8005a74:	f001 ff16 	bl	80078a4 <__pow5mult>
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f43f ae7e 	beq.w	800577c <_strtod_l+0x43c>
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	dd08      	ble.n	8005a96 <_strtod_l+0x756>
 8005a84:	462a      	mov	r2, r5
 8005a86:	9905      	ldr	r1, [sp, #20]
 8005a88:	4648      	mov	r0, r9
 8005a8a:	f001 ff59 	bl	8007940 <__lshift>
 8005a8e:	9005      	str	r0, [sp, #20]
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f ae73 	beq.w	800577c <_strtod_l+0x43c>
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	dd08      	ble.n	8005aac <_strtod_l+0x76c>
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	463a      	mov	r2, r7
 8005a9e:	4648      	mov	r0, r9
 8005aa0:	f001 ff4e 	bl	8007940 <__lshift>
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f43f ae68 	beq.w	800577c <_strtod_l+0x43c>
 8005aac:	9a05      	ldr	r2, [sp, #20]
 8005aae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f001 ffb3 	bl	8007a1c <__mdiff>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f43f ae5f 	beq.w	800577c <_strtod_l+0x43c>
 8005abe:	68c3      	ldr	r3, [r0, #12]
 8005ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60c3      	str	r3, [r0, #12]
 8005ac6:	4641      	mov	r1, r8
 8005ac8:	f001 ff8e 	bl	80079e8 <__mcmp>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	da55      	bge.n	8005b7c <_strtod_l+0x83c>
 8005ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad2:	b9e3      	cbnz	r3, 8005b0e <_strtod_l+0x7ce>
 8005ad4:	f1ba 0f00 	cmp.w	sl, #0
 8005ad8:	d119      	bne.n	8005b0e <_strtod_l+0x7ce>
 8005ada:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ade:	b9b3      	cbnz	r3, 8005b0e <_strtod_l+0x7ce>
 8005ae0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ae4:	0d1b      	lsrs	r3, r3, #20
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005aec:	d90f      	bls.n	8005b0e <_strtod_l+0x7ce>
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	b913      	cbnz	r3, 8005af8 <_strtod_l+0x7b8>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	dd0a      	ble.n	8005b0e <_strtod_l+0x7ce>
 8005af8:	4621      	mov	r1, r4
 8005afa:	2201      	movs	r2, #1
 8005afc:	4648      	mov	r0, r9
 8005afe:	f001 ff1f 	bl	8007940 <__lshift>
 8005b02:	4641      	mov	r1, r8
 8005b04:	4604      	mov	r4, r0
 8005b06:	f001 ff6f 	bl	80079e8 <__mcmp>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	dc67      	bgt.n	8005bde <_strtod_l+0x89e>
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d171      	bne.n	8005bf8 <_strtod_l+0x8b8>
 8005b14:	e63d      	b.n	8005792 <_strtod_l+0x452>
 8005b16:	f018 0f01 	tst.w	r8, #1
 8005b1a:	d004      	beq.n	8005b26 <_strtod_l+0x7e6>
 8005b1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b20:	f7fa fd8a 	bl	8000638 <__aeabi_dmul>
 8005b24:	2301      	movs	r3, #1
 8005b26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b2a:	3508      	adds	r5, #8
 8005b2c:	e6e5      	b.n	80058fa <_strtod_l+0x5ba>
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	ea03 0a0a 	and.w	sl, r3, sl
 8005b3a:	e6ff      	b.n	800593c <_strtod_l+0x5fc>
 8005b3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005b40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005b44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005b48:	36e2      	adds	r6, #226	; 0xe2
 8005b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8005b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b50:	910f      	str	r1, [sp, #60]	; 0x3c
 8005b52:	e75d      	b.n	8005a10 <_strtod_l+0x6d0>
 8005b54:	2300      	movs	r3, #0
 8005b56:	930a      	str	r3, [sp, #40]	; 0x28
 8005b58:	2301      	movs	r3, #1
 8005b5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b5c:	e758      	b.n	8005a10 <_strtod_l+0x6d0>
 8005b5e:	4632      	mov	r2, r6
 8005b60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005b62:	4648      	mov	r0, r9
 8005b64:	f001 feec 	bl	8007940 <__lshift>
 8005b68:	901c      	str	r0, [sp, #112]	; 0x70
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f47f af7c 	bne.w	8005a68 <_strtod_l+0x728>
 8005b70:	e604      	b.n	800577c <_strtod_l+0x43c>
 8005b72:	bf00      	nop
 8005b74:	08008a80 	.word	0x08008a80
 8005b78:	fffffc02 	.word	0xfffffc02
 8005b7c:	465d      	mov	r5, fp
 8005b7e:	f040 8086 	bne.w	8005c8e <_strtod_l+0x94e>
 8005b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b88:	b32a      	cbz	r2, 8005bd6 <_strtod_l+0x896>
 8005b8a:	4aaf      	ldr	r2, [pc, #700]	; (8005e48 <_strtod_l+0xb08>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d153      	bne.n	8005c38 <_strtod_l+0x8f8>
 8005b90:	9b04      	ldr	r3, [sp, #16]
 8005b92:	4650      	mov	r0, sl
 8005b94:	b1d3      	cbz	r3, 8005bcc <_strtod_l+0x88c>
 8005b96:	4aad      	ldr	r2, [pc, #692]	; (8005e4c <_strtod_l+0xb0c>)
 8005b98:	402a      	ands	r2, r5
 8005b9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba2:	d816      	bhi.n	8005bd2 <_strtod_l+0x892>
 8005ba4:	0d12      	lsrs	r2, r2, #20
 8005ba6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005baa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bae:	4298      	cmp	r0, r3
 8005bb0:	d142      	bne.n	8005c38 <_strtod_l+0x8f8>
 8005bb2:	4ba7      	ldr	r3, [pc, #668]	; (8005e50 <_strtod_l+0xb10>)
 8005bb4:	429d      	cmp	r5, r3
 8005bb6:	d102      	bne.n	8005bbe <_strtod_l+0x87e>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	f43f addf 	beq.w	800577c <_strtod_l+0x43c>
 8005bbe:	4ba3      	ldr	r3, [pc, #652]	; (8005e4c <_strtod_l+0xb0c>)
 8005bc0:	402b      	ands	r3, r5
 8005bc2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005bc6:	f04f 0a00 	mov.w	sl, #0
 8005bca:	e7a0      	b.n	8005b0e <_strtod_l+0x7ce>
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	e7ed      	b.n	8005bae <_strtod_l+0x86e>
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e7eb      	b.n	8005bae <_strtod_l+0x86e>
 8005bd6:	bb7b      	cbnz	r3, 8005c38 <_strtod_l+0x8f8>
 8005bd8:	f1ba 0f00 	cmp.w	sl, #0
 8005bdc:	d12c      	bne.n	8005c38 <_strtod_l+0x8f8>
 8005bde:	9904      	ldr	r1, [sp, #16]
 8005be0:	4a9a      	ldr	r2, [pc, #616]	; (8005e4c <_strtod_l+0xb0c>)
 8005be2:	465b      	mov	r3, fp
 8005be4:	b1f1      	cbz	r1, 8005c24 <_strtod_l+0x8e4>
 8005be6:	ea02 010b 	and.w	r1, r2, fp
 8005bea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005bee:	dc19      	bgt.n	8005c24 <_strtod_l+0x8e4>
 8005bf0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005bf4:	f77f ae5b 	ble.w	80058ae <_strtod_l+0x56e>
 8005bf8:	4a96      	ldr	r2, [pc, #600]	; (8005e54 <_strtod_l+0xb14>)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c08:	f7fa fd16 	bl	8000638 <__aeabi_dmul>
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	2900      	cmp	r1, #0
 8005c12:	f47f adbe 	bne.w	8005792 <_strtod_l+0x452>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f47f adbb 	bne.w	8005792 <_strtod_l+0x452>
 8005c1c:	2322      	movs	r3, #34	; 0x22
 8005c1e:	f8c9 3000 	str.w	r3, [r9]
 8005c22:	e5b6      	b.n	8005792 <_strtod_l+0x452>
 8005c24:	4013      	ands	r3, r2
 8005c26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c32:	f04f 3aff 	mov.w	sl, #4294967295
 8005c36:	e76a      	b.n	8005b0e <_strtod_l+0x7ce>
 8005c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3a:	b193      	cbz	r3, 8005c62 <_strtod_l+0x922>
 8005c3c:	422b      	tst	r3, r5
 8005c3e:	f43f af66 	beq.w	8005b0e <_strtod_l+0x7ce>
 8005c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c44:	9a04      	ldr	r2, [sp, #16]
 8005c46:	4650      	mov	r0, sl
 8005c48:	4659      	mov	r1, fp
 8005c4a:	b173      	cbz	r3, 8005c6a <_strtod_l+0x92a>
 8005c4c:	f7ff fb5c 	bl	8005308 <sulp>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c58:	f7fa fb38 	bl	80002cc <__adddf3>
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	468b      	mov	fp, r1
 8005c60:	e755      	b.n	8005b0e <_strtod_l+0x7ce>
 8005c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c64:	ea13 0f0a 	tst.w	r3, sl
 8005c68:	e7e9      	b.n	8005c3e <_strtod_l+0x8fe>
 8005c6a:	f7ff fb4d 	bl	8005308 <sulp>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c76:	f7fa fb27 	bl	80002c8 <__aeabi_dsub>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4682      	mov	sl, r0
 8005c80:	468b      	mov	fp, r1
 8005c82:	f7fa ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f47f ae11 	bne.w	80058ae <_strtod_l+0x56e>
 8005c8c:	e73f      	b.n	8005b0e <_strtod_l+0x7ce>
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4620      	mov	r0, r4
 8005c92:	f001 ffe6 	bl	8007c62 <__ratio>
 8005c96:	ec57 6b10 	vmov	r6, r7, d0
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ca0:	ee10 0a10 	vmov	r0, s0
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	f7fa ff43 	bl	8000b30 <__aeabi_dcmple>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d077      	beq.n	8005d9e <_strtod_l+0xa5e>
 8005cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d04a      	beq.n	8005d4a <_strtod_l+0xa0a>
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <_strtod_l+0xb18>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005cbc:	4f66      	ldr	r7, [pc, #408]	; (8005e58 <_strtod_l+0xb18>)
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <_strtod_l+0xb0c>)
 8005cc2:	402b      	ands	r3, r5
 8005cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cc8:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <_strtod_l+0xb1c>)
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f040 80ce 	bne.w	8005e6c <_strtod_l+0xb2c>
 8005cd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cd8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005cdc:	ec4b ab10 	vmov	d0, sl, fp
 8005ce0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005ce4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ce8:	f001 fef6 	bl	8007ad8 <__ulp>
 8005cec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cf0:	ec53 2b10 	vmov	r2, r3, d0
 8005cf4:	f7fa fca0 	bl	8000638 <__aeabi_dmul>
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	f7fa fae6 	bl	80002cc <__adddf3>
 8005d00:	460b      	mov	r3, r1
 8005d02:	4952      	ldr	r1, [pc, #328]	; (8005e4c <_strtod_l+0xb0c>)
 8005d04:	4a56      	ldr	r2, [pc, #344]	; (8005e60 <_strtod_l+0xb20>)
 8005d06:	4019      	ands	r1, r3
 8005d08:	4291      	cmp	r1, r2
 8005d0a:	4682      	mov	sl, r0
 8005d0c:	d95b      	bls.n	8005dc6 <_strtod_l+0xa86>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <_strtod_l+0x9e0>
 8005d18:	9b08      	ldr	r3, [sp, #32]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f43f ad2e 	beq.w	800577c <_strtod_l+0x43c>
 8005d20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005e50 <_strtod_l+0xb10>
 8005d24:	f04f 3aff 	mov.w	sl, #4294967295
 8005d28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d2a:	4648      	mov	r0, r9
 8005d2c:	f001 fc3d 	bl	80075aa <_Bfree>
 8005d30:	9905      	ldr	r1, [sp, #20]
 8005d32:	4648      	mov	r0, r9
 8005d34:	f001 fc39 	bl	80075aa <_Bfree>
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f001 fc35 	bl	80075aa <_Bfree>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4648      	mov	r0, r9
 8005d44:	f001 fc31 	bl	80075aa <_Bfree>
 8005d48:	e619      	b.n	800597e <_strtod_l+0x63e>
 8005d4a:	f1ba 0f00 	cmp.w	sl, #0
 8005d4e:	d11a      	bne.n	8005d86 <_strtod_l+0xa46>
 8005d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d54:	b9eb      	cbnz	r3, 8005d92 <_strtod_l+0xa52>
 8005d56:	2200      	movs	r2, #0
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <_strtod_l+0xb18>)
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	f7fa fedd 	bl	8000b1c <__aeabi_dcmplt>
 8005d62:	b9c8      	cbnz	r0, 8005d98 <_strtod_l+0xa58>
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <_strtod_l+0xb24>)
 8005d6c:	f7fa fc64 	bl	8000638 <__aeabi_dmul>
 8005d70:	4606      	mov	r6, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005d78:	9618      	str	r6, [sp, #96]	; 0x60
 8005d7a:	9319      	str	r3, [sp, #100]	; 0x64
 8005d7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005d80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d84:	e79c      	b.n	8005cc0 <_strtod_l+0x980>
 8005d86:	f1ba 0f01 	cmp.w	sl, #1
 8005d8a:	d102      	bne.n	8005d92 <_strtod_l+0xa52>
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	f43f ad8e 	beq.w	80058ae <_strtod_l+0x56e>
 8005d92:	2200      	movs	r2, #0
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <_strtod_l+0xb28>)
 8005d96:	e78f      	b.n	8005cb8 <_strtod_l+0x978>
 8005d98:	2600      	movs	r6, #0
 8005d9a:	4f32      	ldr	r7, [pc, #200]	; (8005e64 <_strtod_l+0xb24>)
 8005d9c:	e7ea      	b.n	8005d74 <_strtod_l+0xa34>
 8005d9e:	4b31      	ldr	r3, [pc, #196]	; (8005e64 <_strtod_l+0xb24>)
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	2200      	movs	r2, #0
 8005da6:	f7fa fc47 	bl	8000638 <__aeabi_dmul>
 8005daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dac:	4606      	mov	r6, r0
 8005dae:	460f      	mov	r7, r1
 8005db0:	b933      	cbnz	r3, 8005dc0 <_strtod_l+0xa80>
 8005db2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005db6:	9010      	str	r0, [sp, #64]	; 0x40
 8005db8:	9311      	str	r3, [sp, #68]	; 0x44
 8005dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dbe:	e7df      	b.n	8005d80 <_strtod_l+0xa40>
 8005dc0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005dc4:	e7f9      	b.n	8005dba <_strtod_l+0xa7a>
 8005dc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ab      	bne.n	8005d28 <_strtod_l+0x9e8>
 8005dd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005dd4:	0d1b      	lsrs	r3, r3, #20
 8005dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dd8:	051b      	lsls	r3, r3, #20
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	465d      	mov	r5, fp
 8005dde:	d1a3      	bne.n	8005d28 <_strtod_l+0x9e8>
 8005de0:	4639      	mov	r1, r7
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7fa fed8 	bl	8000b98 <__aeabi_d2iz>
 8005de8:	f7fa fbbc 	bl	8000564 <__aeabi_i2d>
 8005dec:	460b      	mov	r3, r1
 8005dee:	4602      	mov	r2, r0
 8005df0:	4639      	mov	r1, r7
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7fa fa68 	bl	80002c8 <__aeabi_dsub>
 8005df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	b933      	cbnz	r3, 8005e0e <_strtod_l+0xace>
 8005e00:	f1ba 0f00 	cmp.w	sl, #0
 8005e04:	d103      	bne.n	8005e0e <_strtod_l+0xace>
 8005e06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	d06d      	beq.n	8005eea <_strtod_l+0xbaa>
 8005e0e:	a30a      	add	r3, pc, #40	; (adr r3, 8005e38 <_strtod_l+0xaf8>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7fa fe80 	bl	8000b1c <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f47f acb8 	bne.w	8005792 <_strtod_l+0x452>
 8005e22:	a307      	add	r3, pc, #28	; (adr r3, 8005e40 <_strtod_l+0xb00>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fe94 	bl	8000b58 <__aeabi_dcmpgt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f43f af79 	beq.w	8005d28 <_strtod_l+0x9e8>
 8005e36:	e4ac      	b.n	8005792 <_strtod_l+0x452>
 8005e38:	94a03595 	.word	0x94a03595
 8005e3c:	3fdfffff 	.word	0x3fdfffff
 8005e40:	35afe535 	.word	0x35afe535
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	000fffff 	.word	0x000fffff
 8005e4c:	7ff00000 	.word	0x7ff00000
 8005e50:	7fefffff 	.word	0x7fefffff
 8005e54:	39500000 	.word	0x39500000
 8005e58:	3ff00000 	.word	0x3ff00000
 8005e5c:	7fe00000 	.word	0x7fe00000
 8005e60:	7c9fffff 	.word	0x7c9fffff
 8005e64:	3fe00000 	.word	0x3fe00000
 8005e68:	bff00000 	.word	0xbff00000
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	b333      	cbz	r3, 8005ebe <_strtod_l+0xb7e>
 8005e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e76:	d822      	bhi.n	8005ebe <_strtod_l+0xb7e>
 8005e78:	a327      	add	r3, pc, #156	; (adr r3, 8005f18 <_strtod_l+0xbd8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	4639      	mov	r1, r7
 8005e82:	f7fa fe55 	bl	8000b30 <__aeabi_dcmple>
 8005e86:	b1a0      	cbz	r0, 8005eb2 <_strtod_l+0xb72>
 8005e88:	4639      	mov	r1, r7
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7fa feac 	bl	8000be8 <__aeabi_d2uiz>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bf08      	it	eq
 8005e94:	2001      	moveq	r0, #1
 8005e96:	f7fa fb55 	bl	8000544 <__aeabi_ui2d>
 8005e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	bb03      	cbnz	r3, 8005ee4 <_strtod_l+0xba4>
 8005ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ea6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ea8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005eaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005eae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eb6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ebe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005ec2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005ec6:	f001 fe07 	bl	8007ad8 <__ulp>
 8005eca:	4650      	mov	r0, sl
 8005ecc:	ec53 2b10 	vmov	r2, r3, d0
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	f7fa fbb1 	bl	8000638 <__aeabi_dmul>
 8005ed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eda:	f7fa f9f7 	bl	80002cc <__adddf3>
 8005ede:	4682      	mov	sl, r0
 8005ee0:	468b      	mov	fp, r1
 8005ee2:	e772      	b.n	8005dca <_strtod_l+0xa8a>
 8005ee4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005ee8:	e7df      	b.n	8005eaa <_strtod_l+0xb6a>
 8005eea:	a30d      	add	r3, pc, #52	; (adr r3, 8005f20 <_strtod_l+0xbe0>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fe14 	bl	8000b1c <__aeabi_dcmplt>
 8005ef4:	e79c      	b.n	8005e30 <_strtod_l+0xaf0>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	930d      	str	r3, [sp, #52]	; 0x34
 8005efa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	f7ff ba61 	b.w	80053c6 <_strtod_l+0x86>
 8005f04:	2b65      	cmp	r3, #101	; 0x65
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f43f ab4e 	beq.w	80055aa <_strtod_l+0x26a>
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4614      	mov	r4, r2
 8005f12:	9104      	str	r1, [sp, #16]
 8005f14:	f7ff bacb 	b.w	80054ae <_strtod_l+0x16e>
 8005f18:	ffc00000 	.word	0xffc00000
 8005f1c:	41dfffff 	.word	0x41dfffff
 8005f20:	94a03595 	.word	0x94a03595
 8005f24:	3fcfffff 	.word	0x3fcfffff

08005f28 <_strtod_r>:
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <_strtod_r+0x18>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	b410      	push	{r4}
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	4c04      	ldr	r4, [pc, #16]	; (8005f44 <_strtod_r+0x1c>)
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf08      	it	eq
 8005f36:	4623      	moveq	r3, r4
 8005f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3c:	f7ff ba00 	b.w	8005340 <_strtod_l>
 8005f40:	2000000c 	.word	0x2000000c
 8005f44:	20000070 	.word	0x20000070

08005f48 <_strtol_l.isra.0>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4689      	mov	r9, r1
 8005f50:	4692      	mov	sl, r2
 8005f52:	461e      	mov	r6, r3
 8005f54:	460f      	mov	r7, r1
 8005f56:	463d      	mov	r5, r7
 8005f58:	9808      	ldr	r0, [sp, #32]
 8005f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f5e:	f001 fab7 	bl	80074d0 <__locale_ctype_ptr_l>
 8005f62:	4420      	add	r0, r4
 8005f64:	7843      	ldrb	r3, [r0, #1]
 8005f66:	f013 0308 	ands.w	r3, r3, #8
 8005f6a:	d132      	bne.n	8005fd2 <_strtol_l.isra.0+0x8a>
 8005f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8005f6e:	d132      	bne.n	8005fd6 <_strtol_l.isra.0+0x8e>
 8005f70:	787c      	ldrb	r4, [r7, #1]
 8005f72:	1cbd      	adds	r5, r7, #2
 8005f74:	2201      	movs	r2, #1
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	d05d      	beq.n	8006036 <_strtol_l.isra.0+0xee>
 8005f7a:	2e10      	cmp	r6, #16
 8005f7c:	d109      	bne.n	8005f92 <_strtol_l.isra.0+0x4a>
 8005f7e:	2c30      	cmp	r4, #48	; 0x30
 8005f80:	d107      	bne.n	8005f92 <_strtol_l.isra.0+0x4a>
 8005f82:	782b      	ldrb	r3, [r5, #0]
 8005f84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f88:	2b58      	cmp	r3, #88	; 0x58
 8005f8a:	d14f      	bne.n	800602c <_strtol_l.isra.0+0xe4>
 8005f8c:	786c      	ldrb	r4, [r5, #1]
 8005f8e:	2610      	movs	r6, #16
 8005f90:	3502      	adds	r5, #2
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	bf14      	ite	ne
 8005f96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005f9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005f9e:	2700      	movs	r7, #0
 8005fa0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005faa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d817      	bhi.n	8005fe2 <_strtol_l.isra.0+0x9a>
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	42a6      	cmp	r6, r4
 8005fb6:	dd23      	ble.n	8006000 <_strtol_l.isra.0+0xb8>
 8005fb8:	1c7b      	adds	r3, r7, #1
 8005fba:	d007      	beq.n	8005fcc <_strtol_l.isra.0+0x84>
 8005fbc:	4584      	cmp	ip, r0
 8005fbe:	d31c      	bcc.n	8005ffa <_strtol_l.isra.0+0xb2>
 8005fc0:	d101      	bne.n	8005fc6 <_strtol_l.isra.0+0x7e>
 8005fc2:	45a6      	cmp	lr, r4
 8005fc4:	db19      	blt.n	8005ffa <_strtol_l.isra.0+0xb2>
 8005fc6:	fb00 4006 	mla	r0, r0, r6, r4
 8005fca:	2701      	movs	r7, #1
 8005fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fd0:	e7eb      	b.n	8005faa <_strtol_l.isra.0+0x62>
 8005fd2:	462f      	mov	r7, r5
 8005fd4:	e7bf      	b.n	8005f56 <_strtol_l.isra.0+0xe>
 8005fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8005fd8:	bf04      	itt	eq
 8005fda:	1cbd      	addeq	r5, r7, #2
 8005fdc:	787c      	ldrbeq	r4, [r7, #1]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	e7c9      	b.n	8005f76 <_strtol_l.isra.0+0x2e>
 8005fe2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005fe6:	2b19      	cmp	r3, #25
 8005fe8:	d801      	bhi.n	8005fee <_strtol_l.isra.0+0xa6>
 8005fea:	3c37      	subs	r4, #55	; 0x37
 8005fec:	e7e2      	b.n	8005fb4 <_strtol_l.isra.0+0x6c>
 8005fee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ff2:	2b19      	cmp	r3, #25
 8005ff4:	d804      	bhi.n	8006000 <_strtol_l.isra.0+0xb8>
 8005ff6:	3c57      	subs	r4, #87	; 0x57
 8005ff8:	e7dc      	b.n	8005fb4 <_strtol_l.isra.0+0x6c>
 8005ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8005ffe:	e7e5      	b.n	8005fcc <_strtol_l.isra.0+0x84>
 8006000:	1c7b      	adds	r3, r7, #1
 8006002:	d108      	bne.n	8006016 <_strtol_l.isra.0+0xce>
 8006004:	2322      	movs	r3, #34	; 0x22
 8006006:	f8c8 3000 	str.w	r3, [r8]
 800600a:	4608      	mov	r0, r1
 800600c:	f1ba 0f00 	cmp.w	sl, #0
 8006010:	d107      	bne.n	8006022 <_strtol_l.isra.0+0xda>
 8006012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006016:	b102      	cbz	r2, 800601a <_strtol_l.isra.0+0xd2>
 8006018:	4240      	negs	r0, r0
 800601a:	f1ba 0f00 	cmp.w	sl, #0
 800601e:	d0f8      	beq.n	8006012 <_strtol_l.isra.0+0xca>
 8006020:	b10f      	cbz	r7, 8006026 <_strtol_l.isra.0+0xde>
 8006022:	f105 39ff 	add.w	r9, r5, #4294967295
 8006026:	f8ca 9000 	str.w	r9, [sl]
 800602a:	e7f2      	b.n	8006012 <_strtol_l.isra.0+0xca>
 800602c:	2430      	movs	r4, #48	; 0x30
 800602e:	2e00      	cmp	r6, #0
 8006030:	d1af      	bne.n	8005f92 <_strtol_l.isra.0+0x4a>
 8006032:	2608      	movs	r6, #8
 8006034:	e7ad      	b.n	8005f92 <_strtol_l.isra.0+0x4a>
 8006036:	2c30      	cmp	r4, #48	; 0x30
 8006038:	d0a3      	beq.n	8005f82 <_strtol_l.isra.0+0x3a>
 800603a:	260a      	movs	r6, #10
 800603c:	e7a9      	b.n	8005f92 <_strtol_l.isra.0+0x4a>
	...

08006040 <_strtol_r>:
 8006040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006042:	4c06      	ldr	r4, [pc, #24]	; (800605c <_strtol_r+0x1c>)
 8006044:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_strtol_r+0x20>)
 8006046:	6824      	ldr	r4, [r4, #0]
 8006048:	6a24      	ldr	r4, [r4, #32]
 800604a:	2c00      	cmp	r4, #0
 800604c:	bf08      	it	eq
 800604e:	462c      	moveq	r4, r5
 8006050:	9400      	str	r4, [sp, #0]
 8006052:	f7ff ff79 	bl	8005f48 <_strtol_l.isra.0>
 8006056:	b003      	add	sp, #12
 8006058:	bd30      	pop	{r4, r5, pc}
 800605a:	bf00      	nop
 800605c:	2000000c 	.word	0x2000000c
 8006060:	20000070 	.word	0x20000070

08006064 <quorem>:
 8006064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	6903      	ldr	r3, [r0, #16]
 800606a:	690c      	ldr	r4, [r1, #16]
 800606c:	42a3      	cmp	r3, r4
 800606e:	4680      	mov	r8, r0
 8006070:	f2c0 8082 	blt.w	8006178 <quorem+0x114>
 8006074:	3c01      	subs	r4, #1
 8006076:	f101 0714 	add.w	r7, r1, #20
 800607a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800607e:	f100 0614 	add.w	r6, r0, #20
 8006082:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006086:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800608a:	eb06 030c 	add.w	r3, r6, ip
 800608e:	3501      	adds	r5, #1
 8006090:	eb07 090c 	add.w	r9, r7, ip
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	fbb0 f5f5 	udiv	r5, r0, r5
 800609a:	b395      	cbz	r5, 8006102 <quorem+0x9e>
 800609c:	f04f 0a00 	mov.w	sl, #0
 80060a0:	4638      	mov	r0, r7
 80060a2:	46b6      	mov	lr, r6
 80060a4:	46d3      	mov	fp, sl
 80060a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80060aa:	b293      	uxth	r3, r2
 80060ac:	fb05 a303 	mla	r3, r5, r3, sl
 80060b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ebab 0303 	sub.w	r3, fp, r3
 80060ba:	0c12      	lsrs	r2, r2, #16
 80060bc:	f8de b000 	ldr.w	fp, [lr]
 80060c0:	fb05 a202 	mla	r2, r5, r2, sl
 80060c4:	fa13 f38b 	uxtah	r3, r3, fp
 80060c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80060cc:	fa1f fb82 	uxth.w	fp, r2
 80060d0:	f8de 2000 	ldr.w	r2, [lr]
 80060d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80060d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060e2:	4581      	cmp	r9, r0
 80060e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80060e8:	f84e 3b04 	str.w	r3, [lr], #4
 80060ec:	d2db      	bcs.n	80060a6 <quorem+0x42>
 80060ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80060f2:	b933      	cbnz	r3, 8006102 <quorem+0x9e>
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	3b04      	subs	r3, #4
 80060f8:	429e      	cmp	r6, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	d330      	bcc.n	8006160 <quorem+0xfc>
 80060fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8006102:	4640      	mov	r0, r8
 8006104:	f001 fc70 	bl	80079e8 <__mcmp>
 8006108:	2800      	cmp	r0, #0
 800610a:	db25      	blt.n	8006158 <quorem+0xf4>
 800610c:	3501      	adds	r5, #1
 800610e:	4630      	mov	r0, r6
 8006110:	f04f 0c00 	mov.w	ip, #0
 8006114:	f857 2b04 	ldr.w	r2, [r7], #4
 8006118:	f8d0 e000 	ldr.w	lr, [r0]
 800611c:	b293      	uxth	r3, r2
 800611e:	ebac 0303 	sub.w	r3, ip, r3
 8006122:	0c12      	lsrs	r2, r2, #16
 8006124:	fa13 f38e 	uxtah	r3, r3, lr
 8006128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800612c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006130:	b29b      	uxth	r3, r3
 8006132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006136:	45b9      	cmp	r9, r7
 8006138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800613c:	f840 3b04 	str.w	r3, [r0], #4
 8006140:	d2e8      	bcs.n	8006114 <quorem+0xb0>
 8006142:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006146:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800614a:	b92a      	cbnz	r2, 8006158 <quorem+0xf4>
 800614c:	3b04      	subs	r3, #4
 800614e:	429e      	cmp	r6, r3
 8006150:	461a      	mov	r2, r3
 8006152:	d30b      	bcc.n	800616c <quorem+0x108>
 8006154:	f8c8 4010 	str.w	r4, [r8, #16]
 8006158:	4628      	mov	r0, r5
 800615a:	b003      	add	sp, #12
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	3b04      	subs	r3, #4
 8006164:	2a00      	cmp	r2, #0
 8006166:	d1ca      	bne.n	80060fe <quorem+0x9a>
 8006168:	3c01      	subs	r4, #1
 800616a:	e7c5      	b.n	80060f8 <quorem+0x94>
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	3b04      	subs	r3, #4
 8006170:	2a00      	cmp	r2, #0
 8006172:	d1ef      	bne.n	8006154 <quorem+0xf0>
 8006174:	3c01      	subs	r4, #1
 8006176:	e7ea      	b.n	800614e <quorem+0xea>
 8006178:	2000      	movs	r0, #0
 800617a:	e7ee      	b.n	800615a <quorem+0xf6>
 800617c:	0000      	movs	r0, r0
	...

08006180 <_dtoa_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	ec57 6b10 	vmov	r6, r7, d0
 8006188:	b097      	sub	sp, #92	; 0x5c
 800618a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800618c:	9106      	str	r1, [sp, #24]
 800618e:	4604      	mov	r4, r0
 8006190:	920b      	str	r2, [sp, #44]	; 0x2c
 8006192:	9312      	str	r3, [sp, #72]	; 0x48
 8006194:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006198:	e9cd 6700 	strd	r6, r7, [sp]
 800619c:	b93d      	cbnz	r5, 80061ae <_dtoa_r+0x2e>
 800619e:	2010      	movs	r0, #16
 80061a0:	f001 f9aa 	bl	80074f8 <malloc>
 80061a4:	6260      	str	r0, [r4, #36]	; 0x24
 80061a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061aa:	6005      	str	r5, [r0, #0]
 80061ac:	60c5      	str	r5, [r0, #12]
 80061ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b0:	6819      	ldr	r1, [r3, #0]
 80061b2:	b151      	cbz	r1, 80061ca <_dtoa_r+0x4a>
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	604a      	str	r2, [r1, #4]
 80061b8:	2301      	movs	r3, #1
 80061ba:	4093      	lsls	r3, r2
 80061bc:	608b      	str	r3, [r1, #8]
 80061be:	4620      	mov	r0, r4
 80061c0:	f001 f9f3 	bl	80075aa <_Bfree>
 80061c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	1e3b      	subs	r3, r7, #0
 80061cc:	bfbb      	ittet	lt
 80061ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061d2:	9301      	strlt	r3, [sp, #4]
 80061d4:	2300      	movge	r3, #0
 80061d6:	2201      	movlt	r2, #1
 80061d8:	bfac      	ite	ge
 80061da:	f8c8 3000 	strge.w	r3, [r8]
 80061de:	f8c8 2000 	strlt.w	r2, [r8]
 80061e2:	4baf      	ldr	r3, [pc, #700]	; (80064a0 <_dtoa_r+0x320>)
 80061e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061e8:	ea33 0308 	bics.w	r3, r3, r8
 80061ec:	d114      	bne.n	8006218 <_dtoa_r+0x98>
 80061ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	b923      	cbnz	r3, 8006204 <_dtoa_r+0x84>
 80061fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80061fe:	2800      	cmp	r0, #0
 8006200:	f000 8542 	beq.w	8006c88 <_dtoa_r+0xb08>
 8006204:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006206:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80064b4 <_dtoa_r+0x334>
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8544 	beq.w	8006c98 <_dtoa_r+0xb18>
 8006210:	f10b 0303 	add.w	r3, fp, #3
 8006214:	f000 bd3e 	b.w	8006c94 <_dtoa_r+0xb14>
 8006218:	e9dd 6700 	ldrd	r6, r7, [sp]
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa fc70 	bl	8000b08 <__aeabi_dcmpeq>
 8006228:	4681      	mov	r9, r0
 800622a:	b168      	cbz	r0, 8006248 <_dtoa_r+0xc8>
 800622c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800622e:	2301      	movs	r3, #1
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8524 	beq.w	8006c82 <_dtoa_r+0xb02>
 800623a:	4b9a      	ldr	r3, [pc, #616]	; (80064a4 <_dtoa_r+0x324>)
 800623c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800623e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	f000 bd28 	b.w	8006c98 <_dtoa_r+0xb18>
 8006248:	aa14      	add	r2, sp, #80	; 0x50
 800624a:	a915      	add	r1, sp, #84	; 0x54
 800624c:	ec47 6b10 	vmov	d0, r6, r7
 8006250:	4620      	mov	r0, r4
 8006252:	f001 fcb7 	bl	8007bc4 <__d2b>
 8006256:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800625a:	9004      	str	r0, [sp, #16]
 800625c:	2d00      	cmp	r5, #0
 800625e:	d07c      	beq.n	800635a <_dtoa_r+0x1da>
 8006260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006264:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006268:	46b2      	mov	sl, r6
 800626a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800626e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006272:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006276:	2200      	movs	r2, #0
 8006278:	4b8b      	ldr	r3, [pc, #556]	; (80064a8 <_dtoa_r+0x328>)
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa f823 	bl	80002c8 <__aeabi_dsub>
 8006282:	a381      	add	r3, pc, #516	; (adr r3, 8006488 <_dtoa_r+0x308>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa f9d6 	bl	8000638 <__aeabi_dmul>
 800628c:	a380      	add	r3, pc, #512	; (adr r3, 8006490 <_dtoa_r+0x310>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f81b 	bl	80002cc <__adddf3>
 8006296:	4606      	mov	r6, r0
 8006298:	4628      	mov	r0, r5
 800629a:	460f      	mov	r7, r1
 800629c:	f7fa f962 	bl	8000564 <__aeabi_i2d>
 80062a0:	a37d      	add	r3, pc, #500	; (adr r3, 8006498 <_dtoa_r+0x318>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa f9c7 	bl	8000638 <__aeabi_dmul>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa f80b 	bl	80002cc <__adddf3>
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	f7fa fc6d 	bl	8000b98 <__aeabi_d2iz>
 80062be:	2200      	movs	r2, #0
 80062c0:	4682      	mov	sl, r0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7fa fc28 	bl	8000b1c <__aeabi_dcmplt>
 80062cc:	b148      	cbz	r0, 80062e2 <_dtoa_r+0x162>
 80062ce:	4650      	mov	r0, sl
 80062d0:	f7fa f948 	bl	8000564 <__aeabi_i2d>
 80062d4:	4632      	mov	r2, r6
 80062d6:	463b      	mov	r3, r7
 80062d8:	f7fa fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80062dc:	b908      	cbnz	r0, 80062e2 <_dtoa_r+0x162>
 80062de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e2:	f1ba 0f16 	cmp.w	sl, #22
 80062e6:	d859      	bhi.n	800639c <_dtoa_r+0x21c>
 80062e8:	4970      	ldr	r1, [pc, #448]	; (80064ac <_dtoa_r+0x32c>)
 80062ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80062ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f6:	f7fa fc2f 	bl	8000b58 <__aeabi_dcmpgt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d050      	beq.n	80063a0 <_dtoa_r+0x220>
 80062fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006302:	2300      	movs	r3, #0
 8006304:	930f      	str	r3, [sp, #60]	; 0x3c
 8006306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006308:	1b5d      	subs	r5, r3, r5
 800630a:	f1b5 0801 	subs.w	r8, r5, #1
 800630e:	bf49      	itett	mi
 8006310:	f1c5 0301 	rsbmi	r3, r5, #1
 8006314:	2300      	movpl	r3, #0
 8006316:	9305      	strmi	r3, [sp, #20]
 8006318:	f04f 0800 	movmi.w	r8, #0
 800631c:	bf58      	it	pl
 800631e:	9305      	strpl	r3, [sp, #20]
 8006320:	f1ba 0f00 	cmp.w	sl, #0
 8006324:	db3e      	blt.n	80063a4 <_dtoa_r+0x224>
 8006326:	2300      	movs	r3, #0
 8006328:	44d0      	add	r8, sl
 800632a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	2b09      	cmp	r3, #9
 8006334:	f200 8090 	bhi.w	8006458 <_dtoa_r+0x2d8>
 8006338:	2b05      	cmp	r3, #5
 800633a:	bfc4      	itt	gt
 800633c:	3b04      	subgt	r3, #4
 800633e:	9306      	strgt	r3, [sp, #24]
 8006340:	9b06      	ldr	r3, [sp, #24]
 8006342:	f1a3 0302 	sub.w	r3, r3, #2
 8006346:	bfcc      	ite	gt
 8006348:	2500      	movgt	r5, #0
 800634a:	2501      	movle	r5, #1
 800634c:	2b03      	cmp	r3, #3
 800634e:	f200 808f 	bhi.w	8006470 <_dtoa_r+0x2f0>
 8006352:	e8df f003 	tbb	[pc, r3]
 8006356:	7f7d      	.short	0x7f7d
 8006358:	7131      	.short	0x7131
 800635a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800635e:	441d      	add	r5, r3
 8006360:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006364:	2820      	cmp	r0, #32
 8006366:	dd13      	ble.n	8006390 <_dtoa_r+0x210>
 8006368:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800636c:	9b00      	ldr	r3, [sp, #0]
 800636e:	fa08 f800 	lsl.w	r8, r8, r0
 8006372:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006376:	fa23 f000 	lsr.w	r0, r3, r0
 800637a:	ea48 0000 	orr.w	r0, r8, r0
 800637e:	f7fa f8e1 	bl	8000544 <__aeabi_ui2d>
 8006382:	2301      	movs	r3, #1
 8006384:	4682      	mov	sl, r0
 8006386:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800638a:	3d01      	subs	r5, #1
 800638c:	9313      	str	r3, [sp, #76]	; 0x4c
 800638e:	e772      	b.n	8006276 <_dtoa_r+0xf6>
 8006390:	9b00      	ldr	r3, [sp, #0]
 8006392:	f1c0 0020 	rsb	r0, r0, #32
 8006396:	fa03 f000 	lsl.w	r0, r3, r0
 800639a:	e7f0      	b.n	800637e <_dtoa_r+0x1fe>
 800639c:	2301      	movs	r3, #1
 800639e:	e7b1      	b.n	8006304 <_dtoa_r+0x184>
 80063a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063a2:	e7b0      	b.n	8006306 <_dtoa_r+0x186>
 80063a4:	9b05      	ldr	r3, [sp, #20]
 80063a6:	eba3 030a 	sub.w	r3, r3, sl
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	f1ca 0300 	rsb	r3, sl, #0
 80063b0:	9307      	str	r3, [sp, #28]
 80063b2:	2300      	movs	r3, #0
 80063b4:	930e      	str	r3, [sp, #56]	; 0x38
 80063b6:	e7bb      	b.n	8006330 <_dtoa_r+0x1b0>
 80063b8:	2301      	movs	r3, #1
 80063ba:	930a      	str	r3, [sp, #40]	; 0x28
 80063bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	dd59      	ble.n	8006476 <_dtoa_r+0x2f6>
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	4699      	mov	r9, r3
 80063c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063c8:	2200      	movs	r2, #0
 80063ca:	6072      	str	r2, [r6, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	f102 0014 	add.w	r0, r2, #20
 80063d2:	4298      	cmp	r0, r3
 80063d4:	6871      	ldr	r1, [r6, #4]
 80063d6:	d953      	bls.n	8006480 <_dtoa_r+0x300>
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 f8b2 	bl	8007542 <_Balloc>
 80063de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	f1b9 0f0e 	cmp.w	r9, #14
 80063e6:	f8d3 b000 	ldr.w	fp, [r3]
 80063ea:	f200 80e6 	bhi.w	80065ba <_dtoa_r+0x43a>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	f000 80e3 	beq.w	80065ba <_dtoa_r+0x43a>
 80063f4:	ed9d 7b00 	vldr	d7, [sp]
 80063f8:	f1ba 0f00 	cmp.w	sl, #0
 80063fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006400:	dd74      	ble.n	80064ec <_dtoa_r+0x36c>
 8006402:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <_dtoa_r+0x32c>)
 8006404:	f00a 030f 	and.w	r3, sl, #15
 8006408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800640c:	ed93 7b00 	vldr	d7, [r3]
 8006410:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006414:	06f0      	lsls	r0, r6, #27
 8006416:	ed8d 7b08 	vstr	d7, [sp, #32]
 800641a:	d565      	bpl.n	80064e8 <_dtoa_r+0x368>
 800641c:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <_dtoa_r+0x330>)
 800641e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006422:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006426:	f7fa fa31 	bl	800088c <__aeabi_ddiv>
 800642a:	e9cd 0100 	strd	r0, r1, [sp]
 800642e:	f006 060f 	and.w	r6, r6, #15
 8006432:	2503      	movs	r5, #3
 8006434:	4f1e      	ldr	r7, [pc, #120]	; (80064b0 <_dtoa_r+0x330>)
 8006436:	e04c      	b.n	80064d2 <_dtoa_r+0x352>
 8006438:	2301      	movs	r3, #1
 800643a:	930a      	str	r3, [sp, #40]	; 0x28
 800643c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643e:	4453      	add	r3, sl
 8006440:	f103 0901 	add.w	r9, r3, #1
 8006444:	9302      	str	r3, [sp, #8]
 8006446:	464b      	mov	r3, r9
 8006448:	2b01      	cmp	r3, #1
 800644a:	bfb8      	it	lt
 800644c:	2301      	movlt	r3, #1
 800644e:	e7ba      	b.n	80063c6 <_dtoa_r+0x246>
 8006450:	2300      	movs	r3, #0
 8006452:	e7b2      	b.n	80063ba <_dtoa_r+0x23a>
 8006454:	2300      	movs	r3, #0
 8006456:	e7f0      	b.n	800643a <_dtoa_r+0x2ba>
 8006458:	2501      	movs	r5, #1
 800645a:	2300      	movs	r3, #0
 800645c:	9306      	str	r3, [sp, #24]
 800645e:	950a      	str	r5, [sp, #40]	; 0x28
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	4699      	mov	r9, r3
 8006468:	2200      	movs	r2, #0
 800646a:	2312      	movs	r3, #18
 800646c:	920b      	str	r2, [sp, #44]	; 0x2c
 800646e:	e7aa      	b.n	80063c6 <_dtoa_r+0x246>
 8006470:	2301      	movs	r3, #1
 8006472:	930a      	str	r3, [sp, #40]	; 0x28
 8006474:	e7f4      	b.n	8006460 <_dtoa_r+0x2e0>
 8006476:	2301      	movs	r3, #1
 8006478:	9302      	str	r3, [sp, #8]
 800647a:	4699      	mov	r9, r3
 800647c:	461a      	mov	r2, r3
 800647e:	e7f5      	b.n	800646c <_dtoa_r+0x2ec>
 8006480:	3101      	adds	r1, #1
 8006482:	6071      	str	r1, [r6, #4]
 8006484:	0052      	lsls	r2, r2, #1
 8006486:	e7a2      	b.n	80063ce <_dtoa_r+0x24e>
 8006488:	636f4361 	.word	0x636f4361
 800648c:	3fd287a7 	.word	0x3fd287a7
 8006490:	8b60c8b3 	.word	0x8b60c8b3
 8006494:	3fc68a28 	.word	0x3fc68a28
 8006498:	509f79fb 	.word	0x509f79fb
 800649c:	3fd34413 	.word	0x3fd34413
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	08008a29 	.word	0x08008a29
 80064a8:	3ff80000 	.word	0x3ff80000
 80064ac:	08008b50 	.word	0x08008b50
 80064b0:	08008b28 	.word	0x08008b28
 80064b4:	08008ab1 	.word	0x08008ab1
 80064b8:	07f1      	lsls	r1, r6, #31
 80064ba:	d508      	bpl.n	80064ce <_dtoa_r+0x34e>
 80064bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c4:	f7fa f8b8 	bl	8000638 <__aeabi_dmul>
 80064c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064cc:	3501      	adds	r5, #1
 80064ce:	1076      	asrs	r6, r6, #1
 80064d0:	3708      	adds	r7, #8
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d1f0      	bne.n	80064b8 <_dtoa_r+0x338>
 80064d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064de:	f7fa f9d5 	bl	800088c <__aeabi_ddiv>
 80064e2:	e9cd 0100 	strd	r0, r1, [sp]
 80064e6:	e01a      	b.n	800651e <_dtoa_r+0x39e>
 80064e8:	2502      	movs	r5, #2
 80064ea:	e7a3      	b.n	8006434 <_dtoa_r+0x2b4>
 80064ec:	f000 80a0 	beq.w	8006630 <_dtoa_r+0x4b0>
 80064f0:	f1ca 0600 	rsb	r6, sl, #0
 80064f4:	4b9f      	ldr	r3, [pc, #636]	; (8006774 <_dtoa_r+0x5f4>)
 80064f6:	4fa0      	ldr	r7, [pc, #640]	; (8006778 <_dtoa_r+0x5f8>)
 80064f8:	f006 020f 	and.w	r2, r6, #15
 80064fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006508:	f7fa f896 	bl	8000638 <__aeabi_dmul>
 800650c:	e9cd 0100 	strd	r0, r1, [sp]
 8006510:	1136      	asrs	r6, r6, #4
 8006512:	2300      	movs	r3, #0
 8006514:	2502      	movs	r5, #2
 8006516:	2e00      	cmp	r6, #0
 8006518:	d17f      	bne.n	800661a <_dtoa_r+0x49a>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e1      	bne.n	80064e2 <_dtoa_r+0x362>
 800651e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8087 	beq.w	8006634 <_dtoa_r+0x4b4>
 8006526:	e9dd 6700 	ldrd	r6, r7, [sp]
 800652a:	2200      	movs	r2, #0
 800652c:	4b93      	ldr	r3, [pc, #588]	; (800677c <_dtoa_r+0x5fc>)
 800652e:	4630      	mov	r0, r6
 8006530:	4639      	mov	r1, r7
 8006532:	f7fa faf3 	bl	8000b1c <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	d07c      	beq.n	8006634 <_dtoa_r+0x4b4>
 800653a:	f1b9 0f00 	cmp.w	r9, #0
 800653e:	d079      	beq.n	8006634 <_dtoa_r+0x4b4>
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	dd35      	ble.n	80065b2 <_dtoa_r+0x432>
 8006546:	f10a 33ff 	add.w	r3, sl, #4294967295
 800654a:	9308      	str	r3, [sp, #32]
 800654c:	4639      	mov	r1, r7
 800654e:	2200      	movs	r2, #0
 8006550:	4b8b      	ldr	r3, [pc, #556]	; (8006780 <_dtoa_r+0x600>)
 8006552:	4630      	mov	r0, r6
 8006554:	f7fa f870 	bl	8000638 <__aeabi_dmul>
 8006558:	e9cd 0100 	strd	r0, r1, [sp]
 800655c:	9f02      	ldr	r7, [sp, #8]
 800655e:	3501      	adds	r5, #1
 8006560:	4628      	mov	r0, r5
 8006562:	f7f9 ffff 	bl	8000564 <__aeabi_i2d>
 8006566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800656a:	f7fa f865 	bl	8000638 <__aeabi_dmul>
 800656e:	2200      	movs	r2, #0
 8006570:	4b84      	ldr	r3, [pc, #528]	; (8006784 <_dtoa_r+0x604>)
 8006572:	f7f9 feab 	bl	80002cc <__adddf3>
 8006576:	4605      	mov	r5, r0
 8006578:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800657c:	2f00      	cmp	r7, #0
 800657e:	d15d      	bne.n	800663c <_dtoa_r+0x4bc>
 8006580:	2200      	movs	r2, #0
 8006582:	4b81      	ldr	r3, [pc, #516]	; (8006788 <_dtoa_r+0x608>)
 8006584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006588:	f7f9 fe9e 	bl	80002c8 <__aeabi_dsub>
 800658c:	462a      	mov	r2, r5
 800658e:	4633      	mov	r3, r6
 8006590:	e9cd 0100 	strd	r0, r1, [sp]
 8006594:	f7fa fae0 	bl	8000b58 <__aeabi_dcmpgt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f040 8288 	bne.w	8006aae <_dtoa_r+0x92e>
 800659e:	462a      	mov	r2, r5
 80065a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a8:	f7fa fab8 	bl	8000b1c <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f040 827c 	bne.w	8006aaa <_dtoa_r+0x92a>
 80065b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065b6:	e9cd 2300 	strd	r2, r3, [sp]
 80065ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f2c0 8150 	blt.w	8006862 <_dtoa_r+0x6e2>
 80065c2:	f1ba 0f0e 	cmp.w	sl, #14
 80065c6:	f300 814c 	bgt.w	8006862 <_dtoa_r+0x6e2>
 80065ca:	4b6a      	ldr	r3, [pc, #424]	; (8006774 <_dtoa_r+0x5f4>)
 80065cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065d0:	ed93 7b00 	vldr	d7, [r3]
 80065d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80065dc:	f280 80d8 	bge.w	8006790 <_dtoa_r+0x610>
 80065e0:	f1b9 0f00 	cmp.w	r9, #0
 80065e4:	f300 80d4 	bgt.w	8006790 <_dtoa_r+0x610>
 80065e8:	f040 825e 	bne.w	8006aa8 <_dtoa_r+0x928>
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b66      	ldr	r3, [pc, #408]	; (8006788 <_dtoa_r+0x608>)
 80065f0:	ec51 0b17 	vmov	r0, r1, d7
 80065f4:	f7fa f820 	bl	8000638 <__aeabi_dmul>
 80065f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065fc:	f7fa faa2 	bl	8000b44 <__aeabi_dcmpge>
 8006600:	464f      	mov	r7, r9
 8006602:	464e      	mov	r6, r9
 8006604:	2800      	cmp	r0, #0
 8006606:	f040 8234 	bne.w	8006a72 <_dtoa_r+0x8f2>
 800660a:	2331      	movs	r3, #49	; 0x31
 800660c:	f10b 0501 	add.w	r5, fp, #1
 8006610:	f88b 3000 	strb.w	r3, [fp]
 8006614:	f10a 0a01 	add.w	sl, sl, #1
 8006618:	e22f      	b.n	8006a7a <_dtoa_r+0x8fa>
 800661a:	07f2      	lsls	r2, r6, #31
 800661c:	d505      	bpl.n	800662a <_dtoa_r+0x4aa>
 800661e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006622:	f7fa f809 	bl	8000638 <__aeabi_dmul>
 8006626:	3501      	adds	r5, #1
 8006628:	2301      	movs	r3, #1
 800662a:	1076      	asrs	r6, r6, #1
 800662c:	3708      	adds	r7, #8
 800662e:	e772      	b.n	8006516 <_dtoa_r+0x396>
 8006630:	2502      	movs	r5, #2
 8006632:	e774      	b.n	800651e <_dtoa_r+0x39e>
 8006634:	f8cd a020 	str.w	sl, [sp, #32]
 8006638:	464f      	mov	r7, r9
 800663a:	e791      	b.n	8006560 <_dtoa_r+0x3e0>
 800663c:	4b4d      	ldr	r3, [pc, #308]	; (8006774 <_dtoa_r+0x5f4>)
 800663e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006642:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d047      	beq.n	80066dc <_dtoa_r+0x55c>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	2000      	movs	r0, #0
 8006652:	494e      	ldr	r1, [pc, #312]	; (800678c <_dtoa_r+0x60c>)
 8006654:	f7fa f91a 	bl	800088c <__aeabi_ddiv>
 8006658:	462a      	mov	r2, r5
 800665a:	4633      	mov	r3, r6
 800665c:	f7f9 fe34 	bl	80002c8 <__aeabi_dsub>
 8006660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006664:	465d      	mov	r5, fp
 8006666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800666a:	f7fa fa95 	bl	8000b98 <__aeabi_d2iz>
 800666e:	4606      	mov	r6, r0
 8006670:	f7f9 ff78 	bl	8000564 <__aeabi_i2d>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667c:	f7f9 fe24 	bl	80002c8 <__aeabi_dsub>
 8006680:	3630      	adds	r6, #48	; 0x30
 8006682:	f805 6b01 	strb.w	r6, [r5], #1
 8006686:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800668a:	e9cd 0100 	strd	r0, r1, [sp]
 800668e:	f7fa fa45 	bl	8000b1c <__aeabi_dcmplt>
 8006692:	2800      	cmp	r0, #0
 8006694:	d163      	bne.n	800675e <_dtoa_r+0x5de>
 8006696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800669a:	2000      	movs	r0, #0
 800669c:	4937      	ldr	r1, [pc, #220]	; (800677c <_dtoa_r+0x5fc>)
 800669e:	f7f9 fe13 	bl	80002c8 <__aeabi_dsub>
 80066a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066a6:	f7fa fa39 	bl	8000b1c <__aeabi_dcmplt>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f040 80b7 	bne.w	800681e <_dtoa_r+0x69e>
 80066b0:	eba5 030b 	sub.w	r3, r5, fp
 80066b4:	429f      	cmp	r7, r3
 80066b6:	f77f af7c 	ble.w	80065b2 <_dtoa_r+0x432>
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b30      	ldr	r3, [pc, #192]	; (8006780 <_dtoa_r+0x600>)
 80066be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c2:	f7f9 ffb9 	bl	8000638 <__aeabi_dmul>
 80066c6:	2200      	movs	r2, #0
 80066c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066cc:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <_dtoa_r+0x600>)
 80066ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d2:	f7f9 ffb1 	bl	8000638 <__aeabi_dmul>
 80066d6:	e9cd 0100 	strd	r0, r1, [sp]
 80066da:	e7c4      	b.n	8006666 <_dtoa_r+0x4e6>
 80066dc:	462a      	mov	r2, r5
 80066de:	4633      	mov	r3, r6
 80066e0:	f7f9 ffaa 	bl	8000638 <__aeabi_dmul>
 80066e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066e8:	eb0b 0507 	add.w	r5, fp, r7
 80066ec:	465e      	mov	r6, fp
 80066ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066f2:	f7fa fa51 	bl	8000b98 <__aeabi_d2iz>
 80066f6:	4607      	mov	r7, r0
 80066f8:	f7f9 ff34 	bl	8000564 <__aeabi_i2d>
 80066fc:	3730      	adds	r7, #48	; 0x30
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006706:	f7f9 fddf 	bl	80002c8 <__aeabi_dsub>
 800670a:	f806 7b01 	strb.w	r7, [r6], #1
 800670e:	42ae      	cmp	r6, r5
 8006710:	e9cd 0100 	strd	r0, r1, [sp]
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	d126      	bne.n	8006768 <_dtoa_r+0x5e8>
 800671a:	4b1c      	ldr	r3, [pc, #112]	; (800678c <_dtoa_r+0x60c>)
 800671c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006720:	f7f9 fdd4 	bl	80002cc <__adddf3>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800672c:	f7fa fa14 	bl	8000b58 <__aeabi_dcmpgt>
 8006730:	2800      	cmp	r0, #0
 8006732:	d174      	bne.n	800681e <_dtoa_r+0x69e>
 8006734:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006738:	2000      	movs	r0, #0
 800673a:	4914      	ldr	r1, [pc, #80]	; (800678c <_dtoa_r+0x60c>)
 800673c:	f7f9 fdc4 	bl	80002c8 <__aeabi_dsub>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006748:	f7fa f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800674c:	2800      	cmp	r0, #0
 800674e:	f43f af30 	beq.w	80065b2 <_dtoa_r+0x432>
 8006752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006756:	2b30      	cmp	r3, #48	; 0x30
 8006758:	f105 32ff 	add.w	r2, r5, #4294967295
 800675c:	d002      	beq.n	8006764 <_dtoa_r+0x5e4>
 800675e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006762:	e04a      	b.n	80067fa <_dtoa_r+0x67a>
 8006764:	4615      	mov	r5, r2
 8006766:	e7f4      	b.n	8006752 <_dtoa_r+0x5d2>
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <_dtoa_r+0x600>)
 800676a:	f7f9 ff65 	bl	8000638 <__aeabi_dmul>
 800676e:	e9cd 0100 	strd	r0, r1, [sp]
 8006772:	e7bc      	b.n	80066ee <_dtoa_r+0x56e>
 8006774:	08008b50 	.word	0x08008b50
 8006778:	08008b28 	.word	0x08008b28
 800677c:	3ff00000 	.word	0x3ff00000
 8006780:	40240000 	.word	0x40240000
 8006784:	401c0000 	.word	0x401c0000
 8006788:	40140000 	.word	0x40140000
 800678c:	3fe00000 	.word	0x3fe00000
 8006790:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006794:	465d      	mov	r5, fp
 8006796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800679a:	4630      	mov	r0, r6
 800679c:	4639      	mov	r1, r7
 800679e:	f7fa f875 	bl	800088c <__aeabi_ddiv>
 80067a2:	f7fa f9f9 	bl	8000b98 <__aeabi_d2iz>
 80067a6:	4680      	mov	r8, r0
 80067a8:	f7f9 fedc 	bl	8000564 <__aeabi_i2d>
 80067ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b0:	f7f9 ff42 	bl	8000638 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80067c0:	f7f9 fd82 	bl	80002c8 <__aeabi_dsub>
 80067c4:	f805 6b01 	strb.w	r6, [r5], #1
 80067c8:	eba5 060b 	sub.w	r6, r5, fp
 80067cc:	45b1      	cmp	r9, r6
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	d139      	bne.n	8006848 <_dtoa_r+0x6c8>
 80067d4:	f7f9 fd7a 	bl	80002cc <__adddf3>
 80067d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	f7fa f9ba 	bl	8000b58 <__aeabi_dcmpgt>
 80067e4:	b9c8      	cbnz	r0, 800681a <_dtoa_r+0x69a>
 80067e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7fa f98b 	bl	8000b08 <__aeabi_dcmpeq>
 80067f2:	b110      	cbz	r0, 80067fa <_dtoa_r+0x67a>
 80067f4:	f018 0f01 	tst.w	r8, #1
 80067f8:	d10f      	bne.n	800681a <_dtoa_r+0x69a>
 80067fa:	9904      	ldr	r1, [sp, #16]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fed4 	bl	80075aa <_Bfree>
 8006802:	2300      	movs	r3, #0
 8006804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006806:	702b      	strb	r3, [r5, #0]
 8006808:	f10a 0301 	add.w	r3, sl, #1
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8241 	beq.w	8006c98 <_dtoa_r+0xb18>
 8006816:	601d      	str	r5, [r3, #0]
 8006818:	e23e      	b.n	8006c98 <_dtoa_r+0xb18>
 800681a:	f8cd a020 	str.w	sl, [sp, #32]
 800681e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006822:	2a39      	cmp	r2, #57	; 0x39
 8006824:	f105 33ff 	add.w	r3, r5, #4294967295
 8006828:	d108      	bne.n	800683c <_dtoa_r+0x6bc>
 800682a:	459b      	cmp	fp, r3
 800682c:	d10a      	bne.n	8006844 <_dtoa_r+0x6c4>
 800682e:	9b08      	ldr	r3, [sp, #32]
 8006830:	3301      	adds	r3, #1
 8006832:	9308      	str	r3, [sp, #32]
 8006834:	2330      	movs	r3, #48	; 0x30
 8006836:	f88b 3000 	strb.w	r3, [fp]
 800683a:	465b      	mov	r3, fp
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	3201      	adds	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e78c      	b.n	800675e <_dtoa_r+0x5de>
 8006844:	461d      	mov	r5, r3
 8006846:	e7ea      	b.n	800681e <_dtoa_r+0x69e>
 8006848:	2200      	movs	r2, #0
 800684a:	4b9b      	ldr	r3, [pc, #620]	; (8006ab8 <_dtoa_r+0x938>)
 800684c:	f7f9 fef4 	bl	8000638 <__aeabi_dmul>
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f7fa f956 	bl	8000b08 <__aeabi_dcmpeq>
 800685c:	2800      	cmp	r0, #0
 800685e:	d09a      	beq.n	8006796 <_dtoa_r+0x616>
 8006860:	e7cb      	b.n	80067fa <_dtoa_r+0x67a>
 8006862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006864:	2a00      	cmp	r2, #0
 8006866:	f000 808b 	beq.w	8006980 <_dtoa_r+0x800>
 800686a:	9a06      	ldr	r2, [sp, #24]
 800686c:	2a01      	cmp	r2, #1
 800686e:	dc6e      	bgt.n	800694e <_dtoa_r+0x7ce>
 8006870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006872:	2a00      	cmp	r2, #0
 8006874:	d067      	beq.n	8006946 <_dtoa_r+0x7c6>
 8006876:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800687a:	9f07      	ldr	r7, [sp, #28]
 800687c:	9d05      	ldr	r5, [sp, #20]
 800687e:	9a05      	ldr	r2, [sp, #20]
 8006880:	2101      	movs	r1, #1
 8006882:	441a      	add	r2, r3
 8006884:	4620      	mov	r0, r4
 8006886:	9205      	str	r2, [sp, #20]
 8006888:	4498      	add	r8, r3
 800688a:	f000 ff6c 	bl	8007766 <__i2b>
 800688e:	4606      	mov	r6, r0
 8006890:	2d00      	cmp	r5, #0
 8006892:	dd0c      	ble.n	80068ae <_dtoa_r+0x72e>
 8006894:	f1b8 0f00 	cmp.w	r8, #0
 8006898:	dd09      	ble.n	80068ae <_dtoa_r+0x72e>
 800689a:	4545      	cmp	r5, r8
 800689c:	9a05      	ldr	r2, [sp, #20]
 800689e:	462b      	mov	r3, r5
 80068a0:	bfa8      	it	ge
 80068a2:	4643      	movge	r3, r8
 80068a4:	1ad2      	subs	r2, r2, r3
 80068a6:	9205      	str	r2, [sp, #20]
 80068a8:	1aed      	subs	r5, r5, r3
 80068aa:	eba8 0803 	sub.w	r8, r8, r3
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	b1eb      	cbz	r3, 80068ee <_dtoa_r+0x76e>
 80068b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d067      	beq.n	8006988 <_dtoa_r+0x808>
 80068b8:	b18f      	cbz	r7, 80068de <_dtoa_r+0x75e>
 80068ba:	4631      	mov	r1, r6
 80068bc:	463a      	mov	r2, r7
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fff0 	bl	80078a4 <__pow5mult>
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	4601      	mov	r1, r0
 80068c8:	4606      	mov	r6, r0
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 ff54 	bl	8007778 <__multiply>
 80068d0:	9904      	ldr	r1, [sp, #16]
 80068d2:	9008      	str	r0, [sp, #32]
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fe68 	bl	80075aa <_Bfree>
 80068da:	9b08      	ldr	r3, [sp, #32]
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	1bda      	subs	r2, r3, r7
 80068e2:	d004      	beq.n	80068ee <_dtoa_r+0x76e>
 80068e4:	9904      	ldr	r1, [sp, #16]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 ffdc 	bl	80078a4 <__pow5mult>
 80068ec:	9004      	str	r0, [sp, #16]
 80068ee:	2101      	movs	r1, #1
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 ff38 	bl	8007766 <__i2b>
 80068f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f8:	4607      	mov	r7, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 81d0 	beq.w	8006ca0 <_dtoa_r+0xb20>
 8006900:	461a      	mov	r2, r3
 8006902:	4601      	mov	r1, r0
 8006904:	4620      	mov	r0, r4
 8006906:	f000 ffcd 	bl	80078a4 <__pow5mult>
 800690a:	9b06      	ldr	r3, [sp, #24]
 800690c:	2b01      	cmp	r3, #1
 800690e:	4607      	mov	r7, r0
 8006910:	dc40      	bgt.n	8006994 <_dtoa_r+0x814>
 8006912:	9b00      	ldr	r3, [sp, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d139      	bne.n	800698c <_dtoa_r+0x80c>
 8006918:	9b01      	ldr	r3, [sp, #4]
 800691a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800691e:	2b00      	cmp	r3, #0
 8006920:	d136      	bne.n	8006990 <_dtoa_r+0x810>
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006928:	0d1b      	lsrs	r3, r3, #20
 800692a:	051b      	lsls	r3, r3, #20
 800692c:	b12b      	cbz	r3, 800693a <_dtoa_r+0x7ba>
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	3301      	adds	r3, #1
 8006932:	9305      	str	r3, [sp, #20]
 8006934:	f108 0801 	add.w	r8, r8, #1
 8006938:	2301      	movs	r3, #1
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	d12a      	bne.n	8006998 <_dtoa_r+0x818>
 8006942:	2001      	movs	r0, #1
 8006944:	e030      	b.n	80069a8 <_dtoa_r+0x828>
 8006946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006948:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694c:	e795      	b.n	800687a <_dtoa_r+0x6fa>
 800694e:	9b07      	ldr	r3, [sp, #28]
 8006950:	f109 37ff 	add.w	r7, r9, #4294967295
 8006954:	42bb      	cmp	r3, r7
 8006956:	bfbf      	itttt	lt
 8006958:	9b07      	ldrlt	r3, [sp, #28]
 800695a:	9707      	strlt	r7, [sp, #28]
 800695c:	1afa      	sublt	r2, r7, r3
 800695e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006960:	bfbb      	ittet	lt
 8006962:	189b      	addlt	r3, r3, r2
 8006964:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006966:	1bdf      	subge	r7, r3, r7
 8006968:	2700      	movlt	r7, #0
 800696a:	f1b9 0f00 	cmp.w	r9, #0
 800696e:	bfb5      	itete	lt
 8006970:	9b05      	ldrlt	r3, [sp, #20]
 8006972:	9d05      	ldrge	r5, [sp, #20]
 8006974:	eba3 0509 	sublt.w	r5, r3, r9
 8006978:	464b      	movge	r3, r9
 800697a:	bfb8      	it	lt
 800697c:	2300      	movlt	r3, #0
 800697e:	e77e      	b.n	800687e <_dtoa_r+0x6fe>
 8006980:	9f07      	ldr	r7, [sp, #28]
 8006982:	9d05      	ldr	r5, [sp, #20]
 8006984:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006986:	e783      	b.n	8006890 <_dtoa_r+0x710>
 8006988:	9a07      	ldr	r2, [sp, #28]
 800698a:	e7ab      	b.n	80068e4 <_dtoa_r+0x764>
 800698c:	2300      	movs	r3, #0
 800698e:	e7d4      	b.n	800693a <_dtoa_r+0x7ba>
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	e7d2      	b.n	800693a <_dtoa_r+0x7ba>
 8006994:	2300      	movs	r3, #0
 8006996:	9307      	str	r3, [sp, #28]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800699e:	6918      	ldr	r0, [r3, #16]
 80069a0:	f000 fe93 	bl	80076ca <__hi0bits>
 80069a4:	f1c0 0020 	rsb	r0, r0, #32
 80069a8:	4440      	add	r0, r8
 80069aa:	f010 001f 	ands.w	r0, r0, #31
 80069ae:	d047      	beq.n	8006a40 <_dtoa_r+0x8c0>
 80069b0:	f1c0 0320 	rsb	r3, r0, #32
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	dd3b      	ble.n	8006a30 <_dtoa_r+0x8b0>
 80069b8:	9b05      	ldr	r3, [sp, #20]
 80069ba:	f1c0 001c 	rsb	r0, r0, #28
 80069be:	4403      	add	r3, r0
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	4405      	add	r5, r0
 80069c4:	4480      	add	r8, r0
 80069c6:	9b05      	ldr	r3, [sp, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dd05      	ble.n	80069d8 <_dtoa_r+0x858>
 80069cc:	461a      	mov	r2, r3
 80069ce:	9904      	ldr	r1, [sp, #16]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 ffb5 	bl	8007940 <__lshift>
 80069d6:	9004      	str	r0, [sp, #16]
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	dd05      	ble.n	80069ea <_dtoa_r+0x86a>
 80069de:	4639      	mov	r1, r7
 80069e0:	4642      	mov	r2, r8
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 ffac 	bl	8007940 <__lshift>
 80069e8:	4607      	mov	r7, r0
 80069ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069ec:	b353      	cbz	r3, 8006a44 <_dtoa_r+0x8c4>
 80069ee:	4639      	mov	r1, r7
 80069f0:	9804      	ldr	r0, [sp, #16]
 80069f2:	f000 fff9 	bl	80079e8 <__mcmp>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	da24      	bge.n	8006a44 <_dtoa_r+0x8c4>
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	9904      	ldr	r1, [sp, #16]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fde9 	bl	80075d8 <__multadd>
 8006a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a08:	9004      	str	r0, [sp, #16]
 8006a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 814d 	beq.w	8006cae <_dtoa_r+0xb2e>
 8006a14:	2300      	movs	r3, #0
 8006a16:	4631      	mov	r1, r6
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 fddc 	bl	80075d8 <__multadd>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	4606      	mov	r6, r0
 8006a26:	dc4f      	bgt.n	8006ac8 <_dtoa_r+0x948>
 8006a28:	9b06      	ldr	r3, [sp, #24]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	dd4c      	ble.n	8006ac8 <_dtoa_r+0x948>
 8006a2e:	e011      	b.n	8006a54 <_dtoa_r+0x8d4>
 8006a30:	d0c9      	beq.n	80069c6 <_dtoa_r+0x846>
 8006a32:	9a05      	ldr	r2, [sp, #20]
 8006a34:	331c      	adds	r3, #28
 8006a36:	441a      	add	r2, r3
 8006a38:	9205      	str	r2, [sp, #20]
 8006a3a:	441d      	add	r5, r3
 8006a3c:	4498      	add	r8, r3
 8006a3e:	e7c2      	b.n	80069c6 <_dtoa_r+0x846>
 8006a40:	4603      	mov	r3, r0
 8006a42:	e7f6      	b.n	8006a32 <_dtoa_r+0x8b2>
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	dc38      	bgt.n	8006abc <_dtoa_r+0x93c>
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	dd35      	ble.n	8006abc <_dtoa_r+0x93c>
 8006a50:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a54:	9b02      	ldr	r3, [sp, #8]
 8006a56:	b963      	cbnz	r3, 8006a72 <_dtoa_r+0x8f2>
 8006a58:	4639      	mov	r1, r7
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fdbb 	bl	80075d8 <__multadd>
 8006a62:	4601      	mov	r1, r0
 8006a64:	4607      	mov	r7, r0
 8006a66:	9804      	ldr	r0, [sp, #16]
 8006a68:	f000 ffbe 	bl	80079e8 <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f73f adcc 	bgt.w	800660a <_dtoa_r+0x48a>
 8006a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a74:	465d      	mov	r5, fp
 8006a76:	ea6f 0a03 	mvn.w	sl, r3
 8006a7a:	f04f 0900 	mov.w	r9, #0
 8006a7e:	4639      	mov	r1, r7
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fd92 	bl	80075aa <_Bfree>
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	f43f aeb7 	beq.w	80067fa <_dtoa_r+0x67a>
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	d005      	beq.n	8006a9e <_dtoa_r+0x91e>
 8006a92:	45b1      	cmp	r9, r6
 8006a94:	d003      	beq.n	8006a9e <_dtoa_r+0x91e>
 8006a96:	4649      	mov	r1, r9
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fd86 	bl	80075aa <_Bfree>
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fd82 	bl	80075aa <_Bfree>
 8006aa6:	e6a8      	b.n	80067fa <_dtoa_r+0x67a>
 8006aa8:	2700      	movs	r7, #0
 8006aaa:	463e      	mov	r6, r7
 8006aac:	e7e1      	b.n	8006a72 <_dtoa_r+0x8f2>
 8006aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006ab2:	463e      	mov	r6, r7
 8006ab4:	e5a9      	b.n	800660a <_dtoa_r+0x48a>
 8006ab6:	bf00      	nop
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80fa 	beq.w	8006cbc <_dtoa_r+0xb3c>
 8006ac8:	2d00      	cmp	r5, #0
 8006aca:	dd05      	ble.n	8006ad8 <_dtoa_r+0x958>
 8006acc:	4631      	mov	r1, r6
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 ff35 	bl	8007940 <__lshift>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d04c      	beq.n	8006b78 <_dtoa_r+0x9f8>
 8006ade:	6871      	ldr	r1, [r6, #4]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fd2e 	bl	8007542 <_Balloc>
 8006ae6:	6932      	ldr	r2, [r6, #16]
 8006ae8:	3202      	adds	r2, #2
 8006aea:	4605      	mov	r5, r0
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	f106 010c 	add.w	r1, r6, #12
 8006af2:	300c      	adds	r0, #12
 8006af4:	f000 fd1a 	bl	800752c <memcpy>
 8006af8:	2201      	movs	r2, #1
 8006afa:	4629      	mov	r1, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 ff1f 	bl	8007940 <__lshift>
 8006b02:	9b00      	ldr	r3, [sp, #0]
 8006b04:	f8cd b014 	str.w	fp, [sp, #20]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	46b1      	mov	r9, r6
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	4606      	mov	r6, r0
 8006b12:	4639      	mov	r1, r7
 8006b14:	9804      	ldr	r0, [sp, #16]
 8006b16:	f7ff faa5 	bl	8006064 <quorem>
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b22:	9804      	ldr	r0, [sp, #16]
 8006b24:	f000 ff60 	bl	80079e8 <__mcmp>
 8006b28:	4632      	mov	r2, r6
 8006b2a:	9000      	str	r0, [sp, #0]
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 ff74 	bl	8007a1c <__mdiff>
 8006b34:	68c3      	ldr	r3, [r0, #12]
 8006b36:	4602      	mov	r2, r0
 8006b38:	bb03      	cbnz	r3, 8006b7c <_dtoa_r+0x9fc>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	9008      	str	r0, [sp, #32]
 8006b3e:	9804      	ldr	r0, [sp, #16]
 8006b40:	f000 ff52 	bl	80079e8 <__mcmp>
 8006b44:	9a08      	ldr	r2, [sp, #32]
 8006b46:	4603      	mov	r3, r0
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	9308      	str	r3, [sp, #32]
 8006b4e:	f000 fd2c 	bl	80075aa <_Bfree>
 8006b52:	9b08      	ldr	r3, [sp, #32]
 8006b54:	b9a3      	cbnz	r3, 8006b80 <_dtoa_r+0xa00>
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	b992      	cbnz	r2, 8006b80 <_dtoa_r+0xa00>
 8006b5a:	9a07      	ldr	r2, [sp, #28]
 8006b5c:	b982      	cbnz	r2, 8006b80 <_dtoa_r+0xa00>
 8006b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b62:	d029      	beq.n	8006bb8 <_dtoa_r+0xa38>
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	dd01      	ble.n	8006b6e <_dtoa_r+0x9ee>
 8006b6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006b6e:	9b05      	ldr	r3, [sp, #20]
 8006b70:	1c5d      	adds	r5, r3, #1
 8006b72:	f883 8000 	strb.w	r8, [r3]
 8006b76:	e782      	b.n	8006a7e <_dtoa_r+0x8fe>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	e7c2      	b.n	8006b02 <_dtoa_r+0x982>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e7e3      	b.n	8006b48 <_dtoa_r+0x9c8>
 8006b80:	9a00      	ldr	r2, [sp, #0]
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	db04      	blt.n	8006b90 <_dtoa_r+0xa10>
 8006b86:	d125      	bne.n	8006bd4 <_dtoa_r+0xa54>
 8006b88:	9a06      	ldr	r2, [sp, #24]
 8006b8a:	bb1a      	cbnz	r2, 8006bd4 <_dtoa_r+0xa54>
 8006b8c:	9a07      	ldr	r2, [sp, #28]
 8006b8e:	bb0a      	cbnz	r2, 8006bd4 <_dtoa_r+0xa54>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	ddec      	ble.n	8006b6e <_dtoa_r+0x9ee>
 8006b94:	2201      	movs	r2, #1
 8006b96:	9904      	ldr	r1, [sp, #16]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fed1 	bl	8007940 <__lshift>
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	9004      	str	r0, [sp, #16]
 8006ba2:	f000 ff21 	bl	80079e8 <__mcmp>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dc03      	bgt.n	8006bb2 <_dtoa_r+0xa32>
 8006baa:	d1e0      	bne.n	8006b6e <_dtoa_r+0x9ee>
 8006bac:	f018 0f01 	tst.w	r8, #1
 8006bb0:	d0dd      	beq.n	8006b6e <_dtoa_r+0x9ee>
 8006bb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bb6:	d1d8      	bne.n	8006b6a <_dtoa_r+0x9ea>
 8006bb8:	9b05      	ldr	r3, [sp, #20]
 8006bba:	9a05      	ldr	r2, [sp, #20]
 8006bbc:	1c5d      	adds	r5, r3, #1
 8006bbe:	2339      	movs	r3, #57	; 0x39
 8006bc0:	7013      	strb	r3, [r2, #0]
 8006bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bc6:	2b39      	cmp	r3, #57	; 0x39
 8006bc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bcc:	d04f      	beq.n	8006c6e <_dtoa_r+0xaee>
 8006bce:	3301      	adds	r3, #1
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	e754      	b.n	8006a7e <_dtoa_r+0x8fe>
 8006bd4:	9a05      	ldr	r2, [sp, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f102 0501 	add.w	r5, r2, #1
 8006bdc:	dd06      	ble.n	8006bec <_dtoa_r+0xa6c>
 8006bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006be2:	d0e9      	beq.n	8006bb8 <_dtoa_r+0xa38>
 8006be4:	f108 0801 	add.w	r8, r8, #1
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	e7c2      	b.n	8006b72 <_dtoa_r+0x9f2>
 8006bec:	9a02      	ldr	r2, [sp, #8]
 8006bee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006bf2:	eba5 030b 	sub.w	r3, r5, fp
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d021      	beq.n	8006c3e <_dtoa_r+0xabe>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	9904      	ldr	r1, [sp, #16]
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fce9 	bl	80075d8 <__multadd>
 8006c06:	45b1      	cmp	r9, r6
 8006c08:	9004      	str	r0, [sp, #16]
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	f04f 020a 	mov.w	r2, #10
 8006c12:	4649      	mov	r1, r9
 8006c14:	4620      	mov	r0, r4
 8006c16:	d105      	bne.n	8006c24 <_dtoa_r+0xaa4>
 8006c18:	f000 fcde 	bl	80075d8 <__multadd>
 8006c1c:	4681      	mov	r9, r0
 8006c1e:	4606      	mov	r6, r0
 8006c20:	9505      	str	r5, [sp, #20]
 8006c22:	e776      	b.n	8006b12 <_dtoa_r+0x992>
 8006c24:	f000 fcd8 	bl	80075d8 <__multadd>
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4681      	mov	r9, r0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	220a      	movs	r2, #10
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fcd1 	bl	80075d8 <__multadd>
 8006c36:	4606      	mov	r6, r0
 8006c38:	e7f2      	b.n	8006c20 <_dtoa_r+0xaa0>
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	2201      	movs	r2, #1
 8006c40:	9904      	ldr	r1, [sp, #16]
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fe7c 	bl	8007940 <__lshift>
 8006c48:	4639      	mov	r1, r7
 8006c4a:	9004      	str	r0, [sp, #16]
 8006c4c:	f000 fecc 	bl	80079e8 <__mcmp>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	dcb6      	bgt.n	8006bc2 <_dtoa_r+0xa42>
 8006c54:	d102      	bne.n	8006c5c <_dtoa_r+0xadc>
 8006c56:	f018 0f01 	tst.w	r8, #1
 8006c5a:	d1b2      	bne.n	8006bc2 <_dtoa_r+0xa42>
 8006c5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c60:	2b30      	cmp	r3, #48	; 0x30
 8006c62:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c66:	f47f af0a 	bne.w	8006a7e <_dtoa_r+0x8fe>
 8006c6a:	4615      	mov	r5, r2
 8006c6c:	e7f6      	b.n	8006c5c <_dtoa_r+0xadc>
 8006c6e:	4593      	cmp	fp, r2
 8006c70:	d105      	bne.n	8006c7e <_dtoa_r+0xafe>
 8006c72:	2331      	movs	r3, #49	; 0x31
 8006c74:	f10a 0a01 	add.w	sl, sl, #1
 8006c78:	f88b 3000 	strb.w	r3, [fp]
 8006c7c:	e6ff      	b.n	8006a7e <_dtoa_r+0x8fe>
 8006c7e:	4615      	mov	r5, r2
 8006c80:	e79f      	b.n	8006bc2 <_dtoa_r+0xa42>
 8006c82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ce8 <_dtoa_r+0xb68>
 8006c86:	e007      	b.n	8006c98 <_dtoa_r+0xb18>
 8006c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006cec <_dtoa_r+0xb6c>
 8006c8e:	b11b      	cbz	r3, 8006c98 <_dtoa_r+0xb18>
 8006c90:	f10b 0308 	add.w	r3, fp, #8
 8006c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4658      	mov	r0, fp
 8006c9a:	b017      	add	sp, #92	; 0x5c
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	9b06      	ldr	r3, [sp, #24]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	f77f ae35 	ble.w	8006912 <_dtoa_r+0x792>
 8006ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	e649      	b.n	8006942 <_dtoa_r+0x7c2>
 8006cae:	9b02      	ldr	r3, [sp, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc03      	bgt.n	8006cbc <_dtoa_r+0xb3c>
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	f73f aecc 	bgt.w	8006a54 <_dtoa_r+0x8d4>
 8006cbc:	465d      	mov	r5, fp
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	9804      	ldr	r0, [sp, #16]
 8006cc2:	f7ff f9cf 	bl	8006064 <quorem>
 8006cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006cca:	f805 8b01 	strb.w	r8, [r5], #1
 8006cce:	9a02      	ldr	r2, [sp, #8]
 8006cd0:	eba5 030b 	sub.w	r3, r5, fp
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	ddb0      	ble.n	8006c3a <_dtoa_r+0xaba>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	220a      	movs	r2, #10
 8006cdc:	9904      	ldr	r1, [sp, #16]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fc7a 	bl	80075d8 <__multadd>
 8006ce4:	9004      	str	r0, [sp, #16]
 8006ce6:	e7ea      	b.n	8006cbe <_dtoa_r+0xb3e>
 8006ce8:	08008a28 	.word	0x08008a28
 8006cec:	08008aa8 	.word	0x08008aa8

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	6083      	str	r3, [r0, #8]
 8006cfc:	8181      	strh	r1, [r0, #12]
 8006cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8006d00:	81c2      	strh	r2, [r0, #14]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	; 0x5c
 8006d0e:	f7fd fc77 	bl	8004600 <memset>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x38>)
 8006d14:	6263      	str	r3, [r4, #36]	; 0x24
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x3c>)
 8006d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x40>)
 8006d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x44>)
 8006d20:	6224      	str	r4, [r4, #32]
 8006d22:	6323      	str	r3, [r4, #48]	; 0x30
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	080083f1 	.word	0x080083f1
 8006d2c:	08008413 	.word	0x08008413
 8006d30:	0800844b 	.word	0x0800844b
 8006d34:	0800846f 	.word	0x0800846f

08006d38 <_cleanup_r>:
 8006d38:	4901      	ldr	r1, [pc, #4]	; (8006d40 <_cleanup_r+0x8>)
 8006d3a:	f000 b885 	b.w	8006e48 <_fwalk_reent>
 8006d3e:	bf00      	nop
 8006d40:	08008789 	.word	0x08008789

08006d44 <__sfmoreglue>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	1e4a      	subs	r2, r1, #1
 8006d48:	2568      	movs	r5, #104	; 0x68
 8006d4a:	4355      	muls	r5, r2
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d52:	f001 f851 	bl	8007df8 <_malloc_r>
 8006d56:	4604      	mov	r4, r0
 8006d58:	b140      	cbz	r0, 8006d6c <__sfmoreglue+0x28>
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d60:	300c      	adds	r0, #12
 8006d62:	60a0      	str	r0, [r4, #8]
 8006d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d68:	f7fd fc4a 	bl	8004600 <memset>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}

08006d70 <__sinit>:
 8006d70:	6983      	ldr	r3, [r0, #24]
 8006d72:	b510      	push	{r4, lr}
 8006d74:	4604      	mov	r4, r0
 8006d76:	bb33      	cbnz	r3, 8006dc6 <__sinit+0x56>
 8006d78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d7c:	6503      	str	r3, [r0, #80]	; 0x50
 8006d7e:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <__sinit+0x58>)
 8006d80:	4a12      	ldr	r2, [pc, #72]	; (8006dcc <__sinit+0x5c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6282      	str	r2, [r0, #40]	; 0x28
 8006d86:	4298      	cmp	r0, r3
 8006d88:	bf04      	itt	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	6183      	streq	r3, [r0, #24]
 8006d8e:	f000 f81f 	bl	8006dd0 <__sfp>
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 f81b 	bl	8006dd0 <__sfp>
 8006d9a:	60a0      	str	r0, [r4, #8]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f817 	bl	8006dd0 <__sfp>
 8006da2:	2200      	movs	r2, #0
 8006da4:	60e0      	str	r0, [r4, #12]
 8006da6:	2104      	movs	r1, #4
 8006da8:	6860      	ldr	r0, [r4, #4]
 8006daa:	f7ff ffa1 	bl	8006cf0 <std>
 8006dae:	2201      	movs	r2, #1
 8006db0:	2109      	movs	r1, #9
 8006db2:	68a0      	ldr	r0, [r4, #8]
 8006db4:	f7ff ff9c 	bl	8006cf0 <std>
 8006db8:	2202      	movs	r2, #2
 8006dba:	2112      	movs	r1, #18
 8006dbc:	68e0      	ldr	r0, [r4, #12]
 8006dbe:	f7ff ff97 	bl	8006cf0 <std>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61a3      	str	r3, [r4, #24]
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	08008a14 	.word	0x08008a14
 8006dcc:	08006d39 	.word	0x08006d39

08006dd0 <__sfp>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <__sfp+0x70>)
 8006dd4:	681e      	ldr	r6, [r3, #0]
 8006dd6:	69b3      	ldr	r3, [r6, #24]
 8006dd8:	4607      	mov	r7, r0
 8006dda:	b913      	cbnz	r3, 8006de2 <__sfp+0x12>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7ff ffc7 	bl	8006d70 <__sinit>
 8006de2:	3648      	adds	r6, #72	; 0x48
 8006de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	d503      	bpl.n	8006df4 <__sfp+0x24>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	b133      	cbz	r3, 8006dfe <__sfp+0x2e>
 8006df0:	6836      	ldr	r6, [r6, #0]
 8006df2:	e7f7      	b.n	8006de4 <__sfp+0x14>
 8006df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006df8:	b16d      	cbz	r5, 8006e16 <__sfp+0x46>
 8006dfa:	3468      	adds	r4, #104	; 0x68
 8006dfc:	e7f4      	b.n	8006de8 <__sfp+0x18>
 8006dfe:	2104      	movs	r1, #4
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7ff ff9f 	bl	8006d44 <__sfmoreglue>
 8006e06:	6030      	str	r0, [r6, #0]
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1f1      	bne.n	8006df0 <__sfp+0x20>
 8006e0c:	230c      	movs	r3, #12
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4604      	mov	r4, r0
 8006e12:	4620      	mov	r0, r4
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <__sfp+0x74>)
 8006e18:	6665      	str	r5, [r4, #100]	; 0x64
 8006e1a:	e9c4 5500 	strd	r5, r5, [r4]
 8006e1e:	60a5      	str	r5, [r4, #8]
 8006e20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006e24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e30:	f7fd fbe6 	bl	8004600 <memset>
 8006e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e3c:	e7e9      	b.n	8006e12 <__sfp+0x42>
 8006e3e:	bf00      	nop
 8006e40:	08008a14 	.word	0x08008a14
 8006e44:	ffff0001 	.word	0xffff0001

08006e48 <_fwalk_reent>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4689      	mov	r9, r1
 8006e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e54:	2600      	movs	r6, #0
 8006e56:	b914      	cbnz	r4, 8006e5e <_fwalk_reent+0x16>
 8006e58:	4630      	mov	r0, r6
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e62:	3f01      	subs	r7, #1
 8006e64:	d501      	bpl.n	8006e6a <_fwalk_reent+0x22>
 8006e66:	6824      	ldr	r4, [r4, #0]
 8006e68:	e7f5      	b.n	8006e56 <_fwalk_reent+0xe>
 8006e6a:	89ab      	ldrh	r3, [r5, #12]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d907      	bls.n	8006e80 <_fwalk_reent+0x38>
 8006e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e74:	3301      	adds	r3, #1
 8006e76:	d003      	beq.n	8006e80 <_fwalk_reent+0x38>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	47c8      	blx	r9
 8006e7e:	4306      	orrs	r6, r0
 8006e80:	3568      	adds	r5, #104	; 0x68
 8006e82:	e7ee      	b.n	8006e62 <_fwalk_reent+0x1a>

08006e84 <rshift>:
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	6906      	ldr	r6, [r0, #16]
 8006e88:	114b      	asrs	r3, r1, #5
 8006e8a:	429e      	cmp	r6, r3
 8006e8c:	f100 0414 	add.w	r4, r0, #20
 8006e90:	dd30      	ble.n	8006ef4 <rshift+0x70>
 8006e92:	f011 011f 	ands.w	r1, r1, #31
 8006e96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006e9a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006e9e:	d108      	bne.n	8006eb2 <rshift+0x2e>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	42b2      	cmp	r2, r6
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	d211      	bcs.n	8006ecc <rshift+0x48>
 8006ea8:	f852 3b04 	ldr.w	r3, [r2], #4
 8006eac:	f841 3b04 	str.w	r3, [r1], #4
 8006eb0:	e7f7      	b.n	8006ea2 <rshift+0x1e>
 8006eb2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006eb6:	f1c1 0c20 	rsb	ip, r1, #32
 8006eba:	40cd      	lsrs	r5, r1
 8006ebc:	3204      	adds	r2, #4
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	42b2      	cmp	r2, r6
 8006ec2:	4617      	mov	r7, r2
 8006ec4:	d30c      	bcc.n	8006ee0 <rshift+0x5c>
 8006ec6:	601d      	str	r5, [r3, #0]
 8006ec8:	b105      	cbz	r5, 8006ecc <rshift+0x48>
 8006eca:	3304      	adds	r3, #4
 8006ecc:	1b1a      	subs	r2, r3, r4
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ed4:	bf08      	it	eq
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	6102      	str	r2, [r0, #16]
 8006eda:	bf08      	it	eq
 8006edc:	6143      	streq	r3, [r0, #20]
 8006ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee0:	683f      	ldr	r7, [r7, #0]
 8006ee2:	fa07 f70c 	lsl.w	r7, r7, ip
 8006ee6:	433d      	orrs	r5, r7
 8006ee8:	f843 5b04 	str.w	r5, [r3], #4
 8006eec:	f852 5b04 	ldr.w	r5, [r2], #4
 8006ef0:	40cd      	lsrs	r5, r1
 8006ef2:	e7e5      	b.n	8006ec0 <rshift+0x3c>
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	e7e9      	b.n	8006ecc <rshift+0x48>

08006ef8 <__hexdig_fun>:
 8006ef8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d802      	bhi.n	8006f06 <__hexdig_fun+0xe>
 8006f00:	3820      	subs	r0, #32
 8006f02:	b2c0      	uxtb	r0, r0
 8006f04:	4770      	bx	lr
 8006f06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d801      	bhi.n	8006f12 <__hexdig_fun+0x1a>
 8006f0e:	3847      	subs	r0, #71	; 0x47
 8006f10:	e7f7      	b.n	8006f02 <__hexdig_fun+0xa>
 8006f12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d801      	bhi.n	8006f1e <__hexdig_fun+0x26>
 8006f1a:	3827      	subs	r0, #39	; 0x27
 8006f1c:	e7f1      	b.n	8006f02 <__hexdig_fun+0xa>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	4770      	bx	lr

08006f22 <__gethex>:
 8006f22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f26:	b08b      	sub	sp, #44	; 0x2c
 8006f28:	468a      	mov	sl, r1
 8006f2a:	9002      	str	r0, [sp, #8]
 8006f2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006f2e:	9306      	str	r3, [sp, #24]
 8006f30:	4690      	mov	r8, r2
 8006f32:	f000 fad0 	bl	80074d6 <__localeconv_l>
 8006f36:	6803      	ldr	r3, [r0, #0]
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 f968 	bl	8000210 <strlen>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	9001      	str	r0, [sp, #4]
 8006f44:	4403      	add	r3, r0
 8006f46:	f04f 0b00 	mov.w	fp, #0
 8006f4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f4e:	9307      	str	r3, [sp, #28]
 8006f50:	f8da 3000 	ldr.w	r3, [sl]
 8006f54:	3302      	adds	r3, #2
 8006f56:	461f      	mov	r7, r3
 8006f58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f5c:	2830      	cmp	r0, #48	; 0x30
 8006f5e:	d06c      	beq.n	800703a <__gethex+0x118>
 8006f60:	f7ff ffca 	bl	8006ef8 <__hexdig_fun>
 8006f64:	4604      	mov	r4, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d16a      	bne.n	8007040 <__gethex+0x11e>
 8006f6a:	9a01      	ldr	r2, [sp, #4]
 8006f6c:	9903      	ldr	r1, [sp, #12]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f001 fa81 	bl	8008476 <strncmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d166      	bne.n	8007046 <__gethex+0x124>
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	5cf8      	ldrb	r0, [r7, r3]
 8006f7c:	18fe      	adds	r6, r7, r3
 8006f7e:	f7ff ffbb 	bl	8006ef8 <__hexdig_fun>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d062      	beq.n	800704c <__gethex+0x12a>
 8006f86:	4633      	mov	r3, r6
 8006f88:	7818      	ldrb	r0, [r3, #0]
 8006f8a:	2830      	cmp	r0, #48	; 0x30
 8006f8c:	461f      	mov	r7, r3
 8006f8e:	f103 0301 	add.w	r3, r3, #1
 8006f92:	d0f9      	beq.n	8006f88 <__gethex+0x66>
 8006f94:	f7ff ffb0 	bl	8006ef8 <__hexdig_fun>
 8006f98:	fab0 f580 	clz	r5, r0
 8006f9c:	096d      	lsrs	r5, r5, #5
 8006f9e:	4634      	mov	r4, r6
 8006fa0:	f04f 0b01 	mov.w	fp, #1
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	4616      	mov	r6, r2
 8006fa8:	3201      	adds	r2, #1
 8006faa:	7830      	ldrb	r0, [r6, #0]
 8006fac:	f7ff ffa4 	bl	8006ef8 <__hexdig_fun>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d1f8      	bne.n	8006fa6 <__gethex+0x84>
 8006fb4:	9a01      	ldr	r2, [sp, #4]
 8006fb6:	9903      	ldr	r1, [sp, #12]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f001 fa5c 	bl	8008476 <strncmp>
 8006fbe:	b950      	cbnz	r0, 8006fd6 <__gethex+0xb4>
 8006fc0:	b954      	cbnz	r4, 8006fd8 <__gethex+0xb6>
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	18f4      	adds	r4, r6, r3
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	4616      	mov	r6, r2
 8006fca:	3201      	adds	r2, #1
 8006fcc:	7830      	ldrb	r0, [r6, #0]
 8006fce:	f7ff ff93 	bl	8006ef8 <__hexdig_fun>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1f8      	bne.n	8006fc8 <__gethex+0xa6>
 8006fd6:	b10c      	cbz	r4, 8006fdc <__gethex+0xba>
 8006fd8:	1ba4      	subs	r4, r4, r6
 8006fda:	00a4      	lsls	r4, r4, #2
 8006fdc:	7833      	ldrb	r3, [r6, #0]
 8006fde:	2b50      	cmp	r3, #80	; 0x50
 8006fe0:	d001      	beq.n	8006fe6 <__gethex+0xc4>
 8006fe2:	2b70      	cmp	r3, #112	; 0x70
 8006fe4:	d140      	bne.n	8007068 <__gethex+0x146>
 8006fe6:	7873      	ldrb	r3, [r6, #1]
 8006fe8:	2b2b      	cmp	r3, #43	; 0x2b
 8006fea:	d031      	beq.n	8007050 <__gethex+0x12e>
 8006fec:	2b2d      	cmp	r3, #45	; 0x2d
 8006fee:	d033      	beq.n	8007058 <__gethex+0x136>
 8006ff0:	1c71      	adds	r1, r6, #1
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	7808      	ldrb	r0, [r1, #0]
 8006ff8:	f7ff ff7e 	bl	8006ef8 <__hexdig_fun>
 8006ffc:	1e43      	subs	r3, r0, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b18      	cmp	r3, #24
 8007002:	d831      	bhi.n	8007068 <__gethex+0x146>
 8007004:	f1a0 0210 	sub.w	r2, r0, #16
 8007008:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800700c:	f7ff ff74 	bl	8006ef8 <__hexdig_fun>
 8007010:	1e43      	subs	r3, r0, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b18      	cmp	r3, #24
 8007016:	d922      	bls.n	800705e <__gethex+0x13c>
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	d000      	beq.n	8007020 <__gethex+0xfe>
 800701e:	4252      	negs	r2, r2
 8007020:	4414      	add	r4, r2
 8007022:	f8ca 1000 	str.w	r1, [sl]
 8007026:	b30d      	cbz	r5, 800706c <__gethex+0x14a>
 8007028:	f1bb 0f00 	cmp.w	fp, #0
 800702c:	bf0c      	ite	eq
 800702e:	2706      	moveq	r7, #6
 8007030:	2700      	movne	r7, #0
 8007032:	4638      	mov	r0, r7
 8007034:	b00b      	add	sp, #44	; 0x2c
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	f10b 0b01 	add.w	fp, fp, #1
 800703e:	e78a      	b.n	8006f56 <__gethex+0x34>
 8007040:	2500      	movs	r5, #0
 8007042:	462c      	mov	r4, r5
 8007044:	e7ae      	b.n	8006fa4 <__gethex+0x82>
 8007046:	463e      	mov	r6, r7
 8007048:	2501      	movs	r5, #1
 800704a:	e7c7      	b.n	8006fdc <__gethex+0xba>
 800704c:	4604      	mov	r4, r0
 800704e:	e7fb      	b.n	8007048 <__gethex+0x126>
 8007050:	f04f 0900 	mov.w	r9, #0
 8007054:	1cb1      	adds	r1, r6, #2
 8007056:	e7ce      	b.n	8006ff6 <__gethex+0xd4>
 8007058:	f04f 0901 	mov.w	r9, #1
 800705c:	e7fa      	b.n	8007054 <__gethex+0x132>
 800705e:	230a      	movs	r3, #10
 8007060:	fb03 0202 	mla	r2, r3, r2, r0
 8007064:	3a10      	subs	r2, #16
 8007066:	e7cf      	b.n	8007008 <__gethex+0xe6>
 8007068:	4631      	mov	r1, r6
 800706a:	e7da      	b.n	8007022 <__gethex+0x100>
 800706c:	1bf3      	subs	r3, r6, r7
 800706e:	3b01      	subs	r3, #1
 8007070:	4629      	mov	r1, r5
 8007072:	2b07      	cmp	r3, #7
 8007074:	dc49      	bgt.n	800710a <__gethex+0x1e8>
 8007076:	9802      	ldr	r0, [sp, #8]
 8007078:	f000 fa63 	bl	8007542 <_Balloc>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	f100 0914 	add.w	r9, r0, #20
 8007082:	f04f 0b00 	mov.w	fp, #0
 8007086:	f1c3 0301 	rsb	r3, r3, #1
 800708a:	4605      	mov	r5, r0
 800708c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007090:	46da      	mov	sl, fp
 8007092:	9308      	str	r3, [sp, #32]
 8007094:	42b7      	cmp	r7, r6
 8007096:	d33b      	bcc.n	8007110 <__gethex+0x1ee>
 8007098:	9804      	ldr	r0, [sp, #16]
 800709a:	f840 ab04 	str.w	sl, [r0], #4
 800709e:	eba0 0009 	sub.w	r0, r0, r9
 80070a2:	1080      	asrs	r0, r0, #2
 80070a4:	6128      	str	r0, [r5, #16]
 80070a6:	0147      	lsls	r7, r0, #5
 80070a8:	4650      	mov	r0, sl
 80070aa:	f000 fb0e 	bl	80076ca <__hi0bits>
 80070ae:	f8d8 6000 	ldr.w	r6, [r8]
 80070b2:	1a3f      	subs	r7, r7, r0
 80070b4:	42b7      	cmp	r7, r6
 80070b6:	dd64      	ble.n	8007182 <__gethex+0x260>
 80070b8:	1bbf      	subs	r7, r7, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	4628      	mov	r0, r5
 80070be:	f000 fe1d 	bl	8007cfc <__any_on>
 80070c2:	4682      	mov	sl, r0
 80070c4:	b178      	cbz	r0, 80070e6 <__gethex+0x1c4>
 80070c6:	1e7b      	subs	r3, r7, #1
 80070c8:	1159      	asrs	r1, r3, #5
 80070ca:	f003 021f 	and.w	r2, r3, #31
 80070ce:	f04f 0a01 	mov.w	sl, #1
 80070d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80070d6:	fa0a f202 	lsl.w	r2, sl, r2
 80070da:	420a      	tst	r2, r1
 80070dc:	d003      	beq.n	80070e6 <__gethex+0x1c4>
 80070de:	4553      	cmp	r3, sl
 80070e0:	dc46      	bgt.n	8007170 <__gethex+0x24e>
 80070e2:	f04f 0a02 	mov.w	sl, #2
 80070e6:	4639      	mov	r1, r7
 80070e8:	4628      	mov	r0, r5
 80070ea:	f7ff fecb 	bl	8006e84 <rshift>
 80070ee:	443c      	add	r4, r7
 80070f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	da52      	bge.n	800719e <__gethex+0x27c>
 80070f8:	4629      	mov	r1, r5
 80070fa:	9802      	ldr	r0, [sp, #8]
 80070fc:	f000 fa55 	bl	80075aa <_Bfree>
 8007100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007102:	2300      	movs	r3, #0
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	27a3      	movs	r7, #163	; 0xa3
 8007108:	e793      	b.n	8007032 <__gethex+0x110>
 800710a:	3101      	adds	r1, #1
 800710c:	105b      	asrs	r3, r3, #1
 800710e:	e7b0      	b.n	8007072 <__gethex+0x150>
 8007110:	1e73      	subs	r3, r6, #1
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	9a07      	ldr	r2, [sp, #28]
 8007116:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800711a:	4293      	cmp	r3, r2
 800711c:	d018      	beq.n	8007150 <__gethex+0x22e>
 800711e:	f1bb 0f20 	cmp.w	fp, #32
 8007122:	d107      	bne.n	8007134 <__gethex+0x212>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	f8c3 a000 	str.w	sl, [r3]
 800712a:	3304      	adds	r3, #4
 800712c:	f04f 0a00 	mov.w	sl, #0
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	46d3      	mov	fp, sl
 8007134:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007138:	f7ff fede 	bl	8006ef8 <__hexdig_fun>
 800713c:	f000 000f 	and.w	r0, r0, #15
 8007140:	fa00 f00b 	lsl.w	r0, r0, fp
 8007144:	ea4a 0a00 	orr.w	sl, sl, r0
 8007148:	f10b 0b04 	add.w	fp, fp, #4
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	e00d      	b.n	800716c <__gethex+0x24a>
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	9a08      	ldr	r2, [sp, #32]
 8007154:	4413      	add	r3, r2
 8007156:	42bb      	cmp	r3, r7
 8007158:	d3e1      	bcc.n	800711e <__gethex+0x1fc>
 800715a:	4618      	mov	r0, r3
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	9903      	ldr	r1, [sp, #12]
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	f001 f988 	bl	8008476 <strncmp>
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	2800      	cmp	r0, #0
 800716a:	d1d8      	bne.n	800711e <__gethex+0x1fc>
 800716c:	461e      	mov	r6, r3
 800716e:	e791      	b.n	8007094 <__gethex+0x172>
 8007170:	1eb9      	subs	r1, r7, #2
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fdc2 	bl	8007cfc <__any_on>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0b2      	beq.n	80070e2 <__gethex+0x1c0>
 800717c:	f04f 0a03 	mov.w	sl, #3
 8007180:	e7b1      	b.n	80070e6 <__gethex+0x1c4>
 8007182:	da09      	bge.n	8007198 <__gethex+0x276>
 8007184:	1bf7      	subs	r7, r6, r7
 8007186:	4629      	mov	r1, r5
 8007188:	463a      	mov	r2, r7
 800718a:	9802      	ldr	r0, [sp, #8]
 800718c:	f000 fbd8 	bl	8007940 <__lshift>
 8007190:	1be4      	subs	r4, r4, r7
 8007192:	4605      	mov	r5, r0
 8007194:	f100 0914 	add.w	r9, r0, #20
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	e7a8      	b.n	80070f0 <__gethex+0x1ce>
 800719e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071a2:	42a0      	cmp	r0, r4
 80071a4:	dd6a      	ble.n	800727c <__gethex+0x35a>
 80071a6:	1b04      	subs	r4, r0, r4
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	dc2e      	bgt.n	800720a <__gethex+0x2e8>
 80071ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d022      	beq.n	80071fa <__gethex+0x2d8>
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d024      	beq.n	8007202 <__gethex+0x2e0>
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d115      	bne.n	80071e8 <__gethex+0x2c6>
 80071bc:	42a6      	cmp	r6, r4
 80071be:	d113      	bne.n	80071e8 <__gethex+0x2c6>
 80071c0:	2e01      	cmp	r6, #1
 80071c2:	dc0b      	bgt.n	80071dc <__gethex+0x2ba>
 80071c4:	9a06      	ldr	r2, [sp, #24]
 80071c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	2301      	movs	r3, #1
 80071ce:	612b      	str	r3, [r5, #16]
 80071d0:	f8c9 3000 	str.w	r3, [r9]
 80071d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071d6:	2762      	movs	r7, #98	; 0x62
 80071d8:	601d      	str	r5, [r3, #0]
 80071da:	e72a      	b.n	8007032 <__gethex+0x110>
 80071dc:	1e71      	subs	r1, r6, #1
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 fd8c 	bl	8007cfc <__any_on>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1ed      	bne.n	80071c4 <__gethex+0x2a2>
 80071e8:	4629      	mov	r1, r5
 80071ea:	9802      	ldr	r0, [sp, #8]
 80071ec:	f000 f9dd 	bl	80075aa <_Bfree>
 80071f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071f2:	2300      	movs	r3, #0
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	2750      	movs	r7, #80	; 0x50
 80071f8:	e71b      	b.n	8007032 <__gethex+0x110>
 80071fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0e1      	beq.n	80071c4 <__gethex+0x2a2>
 8007200:	e7f2      	b.n	80071e8 <__gethex+0x2c6>
 8007202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1dd      	bne.n	80071c4 <__gethex+0x2a2>
 8007208:	e7ee      	b.n	80071e8 <__gethex+0x2c6>
 800720a:	1e67      	subs	r7, r4, #1
 800720c:	f1ba 0f00 	cmp.w	sl, #0
 8007210:	d131      	bne.n	8007276 <__gethex+0x354>
 8007212:	b127      	cbz	r7, 800721e <__gethex+0x2fc>
 8007214:	4639      	mov	r1, r7
 8007216:	4628      	mov	r0, r5
 8007218:	f000 fd70 	bl	8007cfc <__any_on>
 800721c:	4682      	mov	sl, r0
 800721e:	117a      	asrs	r2, r7, #5
 8007220:	2301      	movs	r3, #1
 8007222:	f007 071f 	and.w	r7, r7, #31
 8007226:	fa03 f707 	lsl.w	r7, r3, r7
 800722a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800722e:	4621      	mov	r1, r4
 8007230:	421f      	tst	r7, r3
 8007232:	4628      	mov	r0, r5
 8007234:	bf18      	it	ne
 8007236:	f04a 0a02 	orrne.w	sl, sl, #2
 800723a:	1b36      	subs	r6, r6, r4
 800723c:	f7ff fe22 	bl	8006e84 <rshift>
 8007240:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007244:	2702      	movs	r7, #2
 8007246:	f1ba 0f00 	cmp.w	sl, #0
 800724a:	d048      	beq.n	80072de <__gethex+0x3bc>
 800724c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d015      	beq.n	8007280 <__gethex+0x35e>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d017      	beq.n	8007288 <__gethex+0x366>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d109      	bne.n	8007270 <__gethex+0x34e>
 800725c:	f01a 0f02 	tst.w	sl, #2
 8007260:	d006      	beq.n	8007270 <__gethex+0x34e>
 8007262:	f8d9 3000 	ldr.w	r3, [r9]
 8007266:	ea4a 0a03 	orr.w	sl, sl, r3
 800726a:	f01a 0f01 	tst.w	sl, #1
 800726e:	d10e      	bne.n	800728e <__gethex+0x36c>
 8007270:	f047 0710 	orr.w	r7, r7, #16
 8007274:	e033      	b.n	80072de <__gethex+0x3bc>
 8007276:	f04f 0a01 	mov.w	sl, #1
 800727a:	e7d0      	b.n	800721e <__gethex+0x2fc>
 800727c:	2701      	movs	r7, #1
 800727e:	e7e2      	b.n	8007246 <__gethex+0x324>
 8007280:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007282:	f1c3 0301 	rsb	r3, r3, #1
 8007286:	9315      	str	r3, [sp, #84]	; 0x54
 8007288:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <__gethex+0x34e>
 800728e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007292:	f105 0314 	add.w	r3, r5, #20
 8007296:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800729a:	eb03 010a 	add.w	r1, r3, sl
 800729e:	f04f 0c00 	mov.w	ip, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80072ac:	d01c      	beq.n	80072e8 <__gethex+0x3c6>
 80072ae:	3201      	adds	r2, #1
 80072b0:	6002      	str	r2, [r0, #0]
 80072b2:	2f02      	cmp	r7, #2
 80072b4:	f105 0314 	add.w	r3, r5, #20
 80072b8:	d138      	bne.n	800732c <__gethex+0x40a>
 80072ba:	f8d8 2000 	ldr.w	r2, [r8]
 80072be:	3a01      	subs	r2, #1
 80072c0:	42b2      	cmp	r2, r6
 80072c2:	d10a      	bne.n	80072da <__gethex+0x3b8>
 80072c4:	1171      	asrs	r1, r6, #5
 80072c6:	2201      	movs	r2, #1
 80072c8:	f006 061f 	and.w	r6, r6, #31
 80072cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072d0:	fa02 f606 	lsl.w	r6, r2, r6
 80072d4:	421e      	tst	r6, r3
 80072d6:	bf18      	it	ne
 80072d8:	4617      	movne	r7, r2
 80072da:	f047 0720 	orr.w	r7, r7, #32
 80072de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072e0:	601d      	str	r5, [r3, #0]
 80072e2:	9b06      	ldr	r3, [sp, #24]
 80072e4:	601c      	str	r4, [r3, #0]
 80072e6:	e6a4      	b.n	8007032 <__gethex+0x110>
 80072e8:	4299      	cmp	r1, r3
 80072ea:	f843 cc04 	str.w	ip, [r3, #-4]
 80072ee:	d8d8      	bhi.n	80072a2 <__gethex+0x380>
 80072f0:	68ab      	ldr	r3, [r5, #8]
 80072f2:	4599      	cmp	r9, r3
 80072f4:	db12      	blt.n	800731c <__gethex+0x3fa>
 80072f6:	6869      	ldr	r1, [r5, #4]
 80072f8:	9802      	ldr	r0, [sp, #8]
 80072fa:	3101      	adds	r1, #1
 80072fc:	f000 f921 	bl	8007542 <_Balloc>
 8007300:	692a      	ldr	r2, [r5, #16]
 8007302:	3202      	adds	r2, #2
 8007304:	f105 010c 	add.w	r1, r5, #12
 8007308:	4683      	mov	fp, r0
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	300c      	adds	r0, #12
 800730e:	f000 f90d 	bl	800752c <memcpy>
 8007312:	4629      	mov	r1, r5
 8007314:	9802      	ldr	r0, [sp, #8]
 8007316:	f000 f948 	bl	80075aa <_Bfree>
 800731a:	465d      	mov	r5, fp
 800731c:	692b      	ldr	r3, [r5, #16]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007324:	612a      	str	r2, [r5, #16]
 8007326:	2201      	movs	r2, #1
 8007328:	615a      	str	r2, [r3, #20]
 800732a:	e7c2      	b.n	80072b2 <__gethex+0x390>
 800732c:	692a      	ldr	r2, [r5, #16]
 800732e:	454a      	cmp	r2, r9
 8007330:	dd0b      	ble.n	800734a <__gethex+0x428>
 8007332:	2101      	movs	r1, #1
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff fda5 	bl	8006e84 <rshift>
 800733a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800733e:	3401      	adds	r4, #1
 8007340:	42a3      	cmp	r3, r4
 8007342:	f6ff aed9 	blt.w	80070f8 <__gethex+0x1d6>
 8007346:	2701      	movs	r7, #1
 8007348:	e7c7      	b.n	80072da <__gethex+0x3b8>
 800734a:	f016 061f 	ands.w	r6, r6, #31
 800734e:	d0fa      	beq.n	8007346 <__gethex+0x424>
 8007350:	449a      	add	sl, r3
 8007352:	f1c6 0620 	rsb	r6, r6, #32
 8007356:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800735a:	f000 f9b6 	bl	80076ca <__hi0bits>
 800735e:	42b0      	cmp	r0, r6
 8007360:	dbe7      	blt.n	8007332 <__gethex+0x410>
 8007362:	e7f0      	b.n	8007346 <__gethex+0x424>

08007364 <L_shift>:
 8007364:	f1c2 0208 	rsb	r2, r2, #8
 8007368:	0092      	lsls	r2, r2, #2
 800736a:	b570      	push	{r4, r5, r6, lr}
 800736c:	f1c2 0620 	rsb	r6, r2, #32
 8007370:	6843      	ldr	r3, [r0, #4]
 8007372:	6804      	ldr	r4, [r0, #0]
 8007374:	fa03 f506 	lsl.w	r5, r3, r6
 8007378:	432c      	orrs	r4, r5
 800737a:	40d3      	lsrs	r3, r2
 800737c:	6004      	str	r4, [r0, #0]
 800737e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007382:	4288      	cmp	r0, r1
 8007384:	d3f4      	bcc.n	8007370 <L_shift+0xc>
 8007386:	bd70      	pop	{r4, r5, r6, pc}

08007388 <__match>:
 8007388:	b530      	push	{r4, r5, lr}
 800738a:	6803      	ldr	r3, [r0, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007392:	b914      	cbnz	r4, 800739a <__match+0x12>
 8007394:	6003      	str	r3, [r0, #0]
 8007396:	2001      	movs	r0, #1
 8007398:	bd30      	pop	{r4, r5, pc}
 800739a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800739e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80073a2:	2d19      	cmp	r5, #25
 80073a4:	bf98      	it	ls
 80073a6:	3220      	addls	r2, #32
 80073a8:	42a2      	cmp	r2, r4
 80073aa:	d0f0      	beq.n	800738e <__match+0x6>
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7f3      	b.n	8007398 <__match+0x10>

080073b0 <__hexnan>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	6801      	ldr	r1, [r0, #0]
 80073b8:	115f      	asrs	r7, r3, #5
 80073ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80073be:	f013 031f 	ands.w	r3, r3, #31
 80073c2:	b087      	sub	sp, #28
 80073c4:	bf18      	it	ne
 80073c6:	3704      	addne	r7, #4
 80073c8:	2500      	movs	r5, #0
 80073ca:	1f3e      	subs	r6, r7, #4
 80073cc:	4682      	mov	sl, r0
 80073ce:	4690      	mov	r8, r2
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	f847 5c04 	str.w	r5, [r7, #-4]
 80073d6:	46b1      	mov	r9, r6
 80073d8:	4634      	mov	r4, r6
 80073da:	9502      	str	r5, [sp, #8]
 80073dc:	46ab      	mov	fp, r5
 80073de:	784a      	ldrb	r2, [r1, #1]
 80073e0:	1c4b      	adds	r3, r1, #1
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	b342      	cbz	r2, 8007438 <__hexnan+0x88>
 80073e6:	4610      	mov	r0, r2
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	9204      	str	r2, [sp, #16]
 80073ec:	f7ff fd84 	bl	8006ef8 <__hexdig_fun>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d143      	bne.n	800747c <__hexnan+0xcc>
 80073f4:	9a04      	ldr	r2, [sp, #16]
 80073f6:	9905      	ldr	r1, [sp, #20]
 80073f8:	2a20      	cmp	r2, #32
 80073fa:	d818      	bhi.n	800742e <__hexnan+0x7e>
 80073fc:	9b02      	ldr	r3, [sp, #8]
 80073fe:	459b      	cmp	fp, r3
 8007400:	dd13      	ble.n	800742a <__hexnan+0x7a>
 8007402:	454c      	cmp	r4, r9
 8007404:	d206      	bcs.n	8007414 <__hexnan+0x64>
 8007406:	2d07      	cmp	r5, #7
 8007408:	dc04      	bgt.n	8007414 <__hexnan+0x64>
 800740a:	462a      	mov	r2, r5
 800740c:	4649      	mov	r1, r9
 800740e:	4620      	mov	r0, r4
 8007410:	f7ff ffa8 	bl	8007364 <L_shift>
 8007414:	4544      	cmp	r4, r8
 8007416:	d944      	bls.n	80074a2 <__hexnan+0xf2>
 8007418:	2300      	movs	r3, #0
 800741a:	f1a4 0904 	sub.w	r9, r4, #4
 800741e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007422:	f8cd b008 	str.w	fp, [sp, #8]
 8007426:	464c      	mov	r4, r9
 8007428:	461d      	mov	r5, r3
 800742a:	9903      	ldr	r1, [sp, #12]
 800742c:	e7d7      	b.n	80073de <__hexnan+0x2e>
 800742e:	2a29      	cmp	r2, #41	; 0x29
 8007430:	d14a      	bne.n	80074c8 <__hexnan+0x118>
 8007432:	3102      	adds	r1, #2
 8007434:	f8ca 1000 	str.w	r1, [sl]
 8007438:	f1bb 0f00 	cmp.w	fp, #0
 800743c:	d044      	beq.n	80074c8 <__hexnan+0x118>
 800743e:	454c      	cmp	r4, r9
 8007440:	d206      	bcs.n	8007450 <__hexnan+0xa0>
 8007442:	2d07      	cmp	r5, #7
 8007444:	dc04      	bgt.n	8007450 <__hexnan+0xa0>
 8007446:	462a      	mov	r2, r5
 8007448:	4649      	mov	r1, r9
 800744a:	4620      	mov	r0, r4
 800744c:	f7ff ff8a 	bl	8007364 <L_shift>
 8007450:	4544      	cmp	r4, r8
 8007452:	d928      	bls.n	80074a6 <__hexnan+0xf6>
 8007454:	4643      	mov	r3, r8
 8007456:	f854 2b04 	ldr.w	r2, [r4], #4
 800745a:	f843 2b04 	str.w	r2, [r3], #4
 800745e:	42a6      	cmp	r6, r4
 8007460:	d2f9      	bcs.n	8007456 <__hexnan+0xa6>
 8007462:	2200      	movs	r2, #0
 8007464:	f843 2b04 	str.w	r2, [r3], #4
 8007468:	429e      	cmp	r6, r3
 800746a:	d2fb      	bcs.n	8007464 <__hexnan+0xb4>
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	b91b      	cbnz	r3, 8007478 <__hexnan+0xc8>
 8007470:	4546      	cmp	r6, r8
 8007472:	d127      	bne.n	80074c4 <__hexnan+0x114>
 8007474:	2301      	movs	r3, #1
 8007476:	6033      	str	r3, [r6, #0]
 8007478:	2005      	movs	r0, #5
 800747a:	e026      	b.n	80074ca <__hexnan+0x11a>
 800747c:	3501      	adds	r5, #1
 800747e:	2d08      	cmp	r5, #8
 8007480:	f10b 0b01 	add.w	fp, fp, #1
 8007484:	dd06      	ble.n	8007494 <__hexnan+0xe4>
 8007486:	4544      	cmp	r4, r8
 8007488:	d9cf      	bls.n	800742a <__hexnan+0x7a>
 800748a:	2300      	movs	r3, #0
 800748c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007490:	2501      	movs	r5, #1
 8007492:	3c04      	subs	r4, #4
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	f000 000f 	and.w	r0, r0, #15
 800749a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	e7c3      	b.n	800742a <__hexnan+0x7a>
 80074a2:	2508      	movs	r5, #8
 80074a4:	e7c1      	b.n	800742a <__hexnan+0x7a>
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0df      	beq.n	800746c <__hexnan+0xbc>
 80074ac:	f04f 32ff 	mov.w	r2, #4294967295
 80074b0:	f1c3 0320 	rsb	r3, r3, #32
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80074bc:	401a      	ands	r2, r3
 80074be:	f847 2c04 	str.w	r2, [r7, #-4]
 80074c2:	e7d3      	b.n	800746c <__hexnan+0xbc>
 80074c4:	3e04      	subs	r6, #4
 80074c6:	e7d1      	b.n	800746c <__hexnan+0xbc>
 80074c8:	2004      	movs	r0, #4
 80074ca:	b007      	add	sp, #28
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074d0 <__locale_ctype_ptr_l>:
 80074d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80074d4:	4770      	bx	lr

080074d6 <__localeconv_l>:
 80074d6:	30f0      	adds	r0, #240	; 0xf0
 80074d8:	4770      	bx	lr
	...

080074dc <_localeconv_r>:
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <_localeconv_r+0x14>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a18      	ldr	r0, [r3, #32]
 80074e2:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <_localeconv_r+0x18>)
 80074e4:	2800      	cmp	r0, #0
 80074e6:	bf08      	it	eq
 80074e8:	4618      	moveq	r0, r3
 80074ea:	30f0      	adds	r0, #240	; 0xf0
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	2000000c 	.word	0x2000000c
 80074f4:	20000070 	.word	0x20000070

080074f8 <malloc>:
 80074f8:	4b02      	ldr	r3, [pc, #8]	; (8007504 <malloc+0xc>)
 80074fa:	4601      	mov	r1, r0
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	f000 bc7b 	b.w	8007df8 <_malloc_r>
 8007502:	bf00      	nop
 8007504:	2000000c 	.word	0x2000000c

08007508 <__ascii_mbtowc>:
 8007508:	b082      	sub	sp, #8
 800750a:	b901      	cbnz	r1, 800750e <__ascii_mbtowc+0x6>
 800750c:	a901      	add	r1, sp, #4
 800750e:	b142      	cbz	r2, 8007522 <__ascii_mbtowc+0x1a>
 8007510:	b14b      	cbz	r3, 8007526 <__ascii_mbtowc+0x1e>
 8007512:	7813      	ldrb	r3, [r2, #0]
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	1c10      	adds	r0, r2, #0
 800751a:	bf18      	it	ne
 800751c:	2001      	movne	r0, #1
 800751e:	b002      	add	sp, #8
 8007520:	4770      	bx	lr
 8007522:	4610      	mov	r0, r2
 8007524:	e7fb      	b.n	800751e <__ascii_mbtowc+0x16>
 8007526:	f06f 0001 	mvn.w	r0, #1
 800752a:	e7f8      	b.n	800751e <__ascii_mbtowc+0x16>

0800752c <memcpy>:
 800752c:	b510      	push	{r4, lr}
 800752e:	1e43      	subs	r3, r0, #1
 8007530:	440a      	add	r2, r1
 8007532:	4291      	cmp	r1, r2
 8007534:	d100      	bne.n	8007538 <memcpy+0xc>
 8007536:	bd10      	pop	{r4, pc}
 8007538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800753c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007540:	e7f7      	b.n	8007532 <memcpy+0x6>

08007542 <_Balloc>:
 8007542:	b570      	push	{r4, r5, r6, lr}
 8007544:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007546:	4604      	mov	r4, r0
 8007548:	460e      	mov	r6, r1
 800754a:	b93d      	cbnz	r5, 800755c <_Balloc+0x1a>
 800754c:	2010      	movs	r0, #16
 800754e:	f7ff ffd3 	bl	80074f8 <malloc>
 8007552:	6260      	str	r0, [r4, #36]	; 0x24
 8007554:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007558:	6005      	str	r5, [r0, #0]
 800755a:	60c5      	str	r5, [r0, #12]
 800755c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800755e:	68eb      	ldr	r3, [r5, #12]
 8007560:	b183      	cbz	r3, 8007584 <_Balloc+0x42>
 8007562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800756a:	b9b8      	cbnz	r0, 800759c <_Balloc+0x5a>
 800756c:	2101      	movs	r1, #1
 800756e:	fa01 f506 	lsl.w	r5, r1, r6
 8007572:	1d6a      	adds	r2, r5, #5
 8007574:	0092      	lsls	r2, r2, #2
 8007576:	4620      	mov	r0, r4
 8007578:	f000 fbe1 	bl	8007d3e <_calloc_r>
 800757c:	b160      	cbz	r0, 8007598 <_Balloc+0x56>
 800757e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007582:	e00e      	b.n	80075a2 <_Balloc+0x60>
 8007584:	2221      	movs	r2, #33	; 0x21
 8007586:	2104      	movs	r1, #4
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fbd8 	bl	8007d3e <_calloc_r>
 800758e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007590:	60e8      	str	r0, [r5, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e4      	bne.n	8007562 <_Balloc+0x20>
 8007598:	2000      	movs	r0, #0
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	6802      	ldr	r2, [r0, #0]
 800759e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075a8:	e7f7      	b.n	800759a <_Balloc+0x58>

080075aa <_Bfree>:
 80075aa:	b570      	push	{r4, r5, r6, lr}
 80075ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80075ae:	4606      	mov	r6, r0
 80075b0:	460d      	mov	r5, r1
 80075b2:	b93c      	cbnz	r4, 80075c4 <_Bfree+0x1a>
 80075b4:	2010      	movs	r0, #16
 80075b6:	f7ff ff9f 	bl	80074f8 <malloc>
 80075ba:	6270      	str	r0, [r6, #36]	; 0x24
 80075bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075c0:	6004      	str	r4, [r0, #0]
 80075c2:	60c4      	str	r4, [r0, #12]
 80075c4:	b13d      	cbz	r5, 80075d6 <_Bfree+0x2c>
 80075c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80075c8:	686a      	ldr	r2, [r5, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075d0:	6029      	str	r1, [r5, #0]
 80075d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80075d6:	bd70      	pop	{r4, r5, r6, pc}

080075d8 <__multadd>:
 80075d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075dc:	690d      	ldr	r5, [r1, #16]
 80075de:	461f      	mov	r7, r3
 80075e0:	4606      	mov	r6, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	f101 0c14 	add.w	ip, r1, #20
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8dc 0000 	ldr.w	r0, [ip]
 80075ee:	b281      	uxth	r1, r0
 80075f0:	fb02 7101 	mla	r1, r2, r1, r7
 80075f4:	0c0f      	lsrs	r7, r1, #16
 80075f6:	0c00      	lsrs	r0, r0, #16
 80075f8:	fb02 7000 	mla	r0, r2, r0, r7
 80075fc:	b289      	uxth	r1, r1
 80075fe:	3301      	adds	r3, #1
 8007600:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007604:	429d      	cmp	r5, r3
 8007606:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800760a:	f84c 1b04 	str.w	r1, [ip], #4
 800760e:	dcec      	bgt.n	80075ea <__multadd+0x12>
 8007610:	b1d7      	cbz	r7, 8007648 <__multadd+0x70>
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	42ab      	cmp	r3, r5
 8007616:	dc12      	bgt.n	800763e <__multadd+0x66>
 8007618:	6861      	ldr	r1, [r4, #4]
 800761a:	4630      	mov	r0, r6
 800761c:	3101      	adds	r1, #1
 800761e:	f7ff ff90 	bl	8007542 <_Balloc>
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	3202      	adds	r2, #2
 8007626:	f104 010c 	add.w	r1, r4, #12
 800762a:	4680      	mov	r8, r0
 800762c:	0092      	lsls	r2, r2, #2
 800762e:	300c      	adds	r0, #12
 8007630:	f7ff ff7c 	bl	800752c <memcpy>
 8007634:	4621      	mov	r1, r4
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ffb7 	bl	80075aa <_Bfree>
 800763c:	4644      	mov	r4, r8
 800763e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007642:	3501      	adds	r5, #1
 8007644:	615f      	str	r7, [r3, #20]
 8007646:	6125      	str	r5, [r4, #16]
 8007648:	4620      	mov	r0, r4
 800764a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800764e <__s2b>:
 800764e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007652:	460c      	mov	r4, r1
 8007654:	4615      	mov	r5, r2
 8007656:	461f      	mov	r7, r3
 8007658:	2209      	movs	r2, #9
 800765a:	3308      	adds	r3, #8
 800765c:	4606      	mov	r6, r0
 800765e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007662:	2100      	movs	r1, #0
 8007664:	2201      	movs	r2, #1
 8007666:	429a      	cmp	r2, r3
 8007668:	db20      	blt.n	80076ac <__s2b+0x5e>
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ff69 	bl	8007542 <_Balloc>
 8007670:	9b08      	ldr	r3, [sp, #32]
 8007672:	6143      	str	r3, [r0, #20]
 8007674:	2d09      	cmp	r5, #9
 8007676:	f04f 0301 	mov.w	r3, #1
 800767a:	6103      	str	r3, [r0, #16]
 800767c:	dd19      	ble.n	80076b2 <__s2b+0x64>
 800767e:	f104 0809 	add.w	r8, r4, #9
 8007682:	46c1      	mov	r9, r8
 8007684:	442c      	add	r4, r5
 8007686:	f819 3b01 	ldrb.w	r3, [r9], #1
 800768a:	4601      	mov	r1, r0
 800768c:	3b30      	subs	r3, #48	; 0x30
 800768e:	220a      	movs	r2, #10
 8007690:	4630      	mov	r0, r6
 8007692:	f7ff ffa1 	bl	80075d8 <__multadd>
 8007696:	45a1      	cmp	r9, r4
 8007698:	d1f5      	bne.n	8007686 <__s2b+0x38>
 800769a:	eb08 0405 	add.w	r4, r8, r5
 800769e:	3c08      	subs	r4, #8
 80076a0:	1b2d      	subs	r5, r5, r4
 80076a2:	1963      	adds	r3, r4, r5
 80076a4:	42bb      	cmp	r3, r7
 80076a6:	db07      	blt.n	80076b8 <__s2b+0x6a>
 80076a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ac:	0052      	lsls	r2, r2, #1
 80076ae:	3101      	adds	r1, #1
 80076b0:	e7d9      	b.n	8007666 <__s2b+0x18>
 80076b2:	340a      	adds	r4, #10
 80076b4:	2509      	movs	r5, #9
 80076b6:	e7f3      	b.n	80076a0 <__s2b+0x52>
 80076b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076bc:	4601      	mov	r1, r0
 80076be:	3b30      	subs	r3, #48	; 0x30
 80076c0:	220a      	movs	r2, #10
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ff88 	bl	80075d8 <__multadd>
 80076c8:	e7eb      	b.n	80076a2 <__s2b+0x54>

080076ca <__hi0bits>:
 80076ca:	0c02      	lsrs	r2, r0, #16
 80076cc:	0412      	lsls	r2, r2, #16
 80076ce:	4603      	mov	r3, r0
 80076d0:	b9b2      	cbnz	r2, 8007700 <__hi0bits+0x36>
 80076d2:	0403      	lsls	r3, r0, #16
 80076d4:	2010      	movs	r0, #16
 80076d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076da:	bf04      	itt	eq
 80076dc:	021b      	lsleq	r3, r3, #8
 80076de:	3008      	addeq	r0, #8
 80076e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076e4:	bf04      	itt	eq
 80076e6:	011b      	lsleq	r3, r3, #4
 80076e8:	3004      	addeq	r0, #4
 80076ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076ee:	bf04      	itt	eq
 80076f0:	009b      	lsleq	r3, r3, #2
 80076f2:	3002      	addeq	r0, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	db06      	blt.n	8007706 <__hi0bits+0x3c>
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	d503      	bpl.n	8007704 <__hi0bits+0x3a>
 80076fc:	3001      	adds	r0, #1
 80076fe:	4770      	bx	lr
 8007700:	2000      	movs	r0, #0
 8007702:	e7e8      	b.n	80076d6 <__hi0bits+0xc>
 8007704:	2020      	movs	r0, #32
 8007706:	4770      	bx	lr

08007708 <__lo0bits>:
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	f013 0207 	ands.w	r2, r3, #7
 800770e:	4601      	mov	r1, r0
 8007710:	d00b      	beq.n	800772a <__lo0bits+0x22>
 8007712:	07da      	lsls	r2, r3, #31
 8007714:	d423      	bmi.n	800775e <__lo0bits+0x56>
 8007716:	0798      	lsls	r0, r3, #30
 8007718:	bf49      	itett	mi
 800771a:	085b      	lsrmi	r3, r3, #1
 800771c:	089b      	lsrpl	r3, r3, #2
 800771e:	2001      	movmi	r0, #1
 8007720:	600b      	strmi	r3, [r1, #0]
 8007722:	bf5c      	itt	pl
 8007724:	600b      	strpl	r3, [r1, #0]
 8007726:	2002      	movpl	r0, #2
 8007728:	4770      	bx	lr
 800772a:	b298      	uxth	r0, r3
 800772c:	b9a8      	cbnz	r0, 800775a <__lo0bits+0x52>
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	2010      	movs	r0, #16
 8007732:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007736:	bf04      	itt	eq
 8007738:	0a1b      	lsreq	r3, r3, #8
 800773a:	3008      	addeq	r0, #8
 800773c:	071a      	lsls	r2, r3, #28
 800773e:	bf04      	itt	eq
 8007740:	091b      	lsreq	r3, r3, #4
 8007742:	3004      	addeq	r0, #4
 8007744:	079a      	lsls	r2, r3, #30
 8007746:	bf04      	itt	eq
 8007748:	089b      	lsreq	r3, r3, #2
 800774a:	3002      	addeq	r0, #2
 800774c:	07da      	lsls	r2, r3, #31
 800774e:	d402      	bmi.n	8007756 <__lo0bits+0x4e>
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	d006      	beq.n	8007762 <__lo0bits+0x5a>
 8007754:	3001      	adds	r0, #1
 8007756:	600b      	str	r3, [r1, #0]
 8007758:	4770      	bx	lr
 800775a:	4610      	mov	r0, r2
 800775c:	e7e9      	b.n	8007732 <__lo0bits+0x2a>
 800775e:	2000      	movs	r0, #0
 8007760:	4770      	bx	lr
 8007762:	2020      	movs	r0, #32
 8007764:	4770      	bx	lr

08007766 <__i2b>:
 8007766:	b510      	push	{r4, lr}
 8007768:	460c      	mov	r4, r1
 800776a:	2101      	movs	r1, #1
 800776c:	f7ff fee9 	bl	8007542 <_Balloc>
 8007770:	2201      	movs	r2, #1
 8007772:	6144      	str	r4, [r0, #20]
 8007774:	6102      	str	r2, [r0, #16]
 8007776:	bd10      	pop	{r4, pc}

08007778 <__multiply>:
 8007778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	4614      	mov	r4, r2
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	429a      	cmp	r2, r3
 8007784:	bfb8      	it	lt
 8007786:	460b      	movlt	r3, r1
 8007788:	4688      	mov	r8, r1
 800778a:	bfbc      	itt	lt
 800778c:	46a0      	movlt	r8, r4
 800778e:	461c      	movlt	r4, r3
 8007790:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007794:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007798:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800779c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077a0:	eb07 0609 	add.w	r6, r7, r9
 80077a4:	42b3      	cmp	r3, r6
 80077a6:	bfb8      	it	lt
 80077a8:	3101      	addlt	r1, #1
 80077aa:	f7ff feca 	bl	8007542 <_Balloc>
 80077ae:	f100 0514 	add.w	r5, r0, #20
 80077b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80077b6:	462b      	mov	r3, r5
 80077b8:	2200      	movs	r2, #0
 80077ba:	4573      	cmp	r3, lr
 80077bc:	d316      	bcc.n	80077ec <__multiply+0x74>
 80077be:	f104 0214 	add.w	r2, r4, #20
 80077c2:	f108 0114 	add.w	r1, r8, #20
 80077c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80077ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	9201      	str	r2, [sp, #4]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d80c      	bhi.n	80077f2 <__multiply+0x7a>
 80077d8:	2e00      	cmp	r6, #0
 80077da:	dd03      	ble.n	80077e4 <__multiply+0x6c>
 80077dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d05d      	beq.n	80078a0 <__multiply+0x128>
 80077e4:	6106      	str	r6, [r0, #16]
 80077e6:	b003      	add	sp, #12
 80077e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ec:	f843 2b04 	str.w	r2, [r3], #4
 80077f0:	e7e3      	b.n	80077ba <__multiply+0x42>
 80077f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80077f6:	f1bb 0f00 	cmp.w	fp, #0
 80077fa:	d023      	beq.n	8007844 <__multiply+0xcc>
 80077fc:	4689      	mov	r9, r1
 80077fe:	46ac      	mov	ip, r5
 8007800:	f04f 0800 	mov.w	r8, #0
 8007804:	f859 4b04 	ldr.w	r4, [r9], #4
 8007808:	f8dc a000 	ldr.w	sl, [ip]
 800780c:	b2a3      	uxth	r3, r4
 800780e:	fa1f fa8a 	uxth.w	sl, sl
 8007812:	fb0b a303 	mla	r3, fp, r3, sl
 8007816:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800781a:	f8dc 4000 	ldr.w	r4, [ip]
 800781e:	4443      	add	r3, r8
 8007820:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007824:	fb0b 840a 	mla	r4, fp, sl, r8
 8007828:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800782c:	46e2      	mov	sl, ip
 800782e:	b29b      	uxth	r3, r3
 8007830:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007834:	454f      	cmp	r7, r9
 8007836:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800783a:	f84a 3b04 	str.w	r3, [sl], #4
 800783e:	d82b      	bhi.n	8007898 <__multiply+0x120>
 8007840:	f8cc 8004 	str.w	r8, [ip, #4]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800784a:	3204      	adds	r2, #4
 800784c:	f1ba 0f00 	cmp.w	sl, #0
 8007850:	d020      	beq.n	8007894 <__multiply+0x11c>
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	4689      	mov	r9, r1
 8007856:	46a8      	mov	r8, r5
 8007858:	f04f 0b00 	mov.w	fp, #0
 800785c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007860:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007864:	fb0a 440c 	mla	r4, sl, ip, r4
 8007868:	445c      	add	r4, fp
 800786a:	46c4      	mov	ip, r8
 800786c:	b29b      	uxth	r3, r3
 800786e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007872:	f84c 3b04 	str.w	r3, [ip], #4
 8007876:	f859 3b04 	ldr.w	r3, [r9], #4
 800787a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	fb0a b303 	mla	r3, sl, r3, fp
 8007884:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007888:	454f      	cmp	r7, r9
 800788a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800788e:	d805      	bhi.n	800789c <__multiply+0x124>
 8007890:	f8c8 3004 	str.w	r3, [r8, #4]
 8007894:	3504      	adds	r5, #4
 8007896:	e79b      	b.n	80077d0 <__multiply+0x58>
 8007898:	46d4      	mov	ip, sl
 800789a:	e7b3      	b.n	8007804 <__multiply+0x8c>
 800789c:	46e0      	mov	r8, ip
 800789e:	e7dd      	b.n	800785c <__multiply+0xe4>
 80078a0:	3e01      	subs	r6, #1
 80078a2:	e799      	b.n	80077d8 <__multiply+0x60>

080078a4 <__pow5mult>:
 80078a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a8:	4615      	mov	r5, r2
 80078aa:	f012 0203 	ands.w	r2, r2, #3
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	d007      	beq.n	80078c4 <__pow5mult+0x20>
 80078b4:	3a01      	subs	r2, #1
 80078b6:	4c21      	ldr	r4, [pc, #132]	; (800793c <__pow5mult+0x98>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078be:	f7ff fe8b 	bl	80075d8 <__multadd>
 80078c2:	4607      	mov	r7, r0
 80078c4:	10ad      	asrs	r5, r5, #2
 80078c6:	d035      	beq.n	8007934 <__pow5mult+0x90>
 80078c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078ca:	b93c      	cbnz	r4, 80078dc <__pow5mult+0x38>
 80078cc:	2010      	movs	r0, #16
 80078ce:	f7ff fe13 	bl	80074f8 <malloc>
 80078d2:	6270      	str	r0, [r6, #36]	; 0x24
 80078d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d8:	6004      	str	r4, [r0, #0]
 80078da:	60c4      	str	r4, [r0, #12]
 80078dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e4:	b94c      	cbnz	r4, 80078fa <__pow5mult+0x56>
 80078e6:	f240 2171 	movw	r1, #625	; 0x271
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff3b 	bl	8007766 <__i2b>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80078f6:	4604      	mov	r4, r0
 80078f8:	6003      	str	r3, [r0, #0]
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	07eb      	lsls	r3, r5, #31
 8007900:	d50a      	bpl.n	8007918 <__pow5mult+0x74>
 8007902:	4639      	mov	r1, r7
 8007904:	4622      	mov	r2, r4
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ff36 	bl	8007778 <__multiply>
 800790c:	4639      	mov	r1, r7
 800790e:	4681      	mov	r9, r0
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff fe4a 	bl	80075aa <_Bfree>
 8007916:	464f      	mov	r7, r9
 8007918:	106d      	asrs	r5, r5, #1
 800791a:	d00b      	beq.n	8007934 <__pow5mult+0x90>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	b938      	cbnz	r0, 8007930 <__pow5mult+0x8c>
 8007920:	4622      	mov	r2, r4
 8007922:	4621      	mov	r1, r4
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ff27 	bl	8007778 <__multiply>
 800792a:	6020      	str	r0, [r4, #0]
 800792c:	f8c0 8000 	str.w	r8, [r0]
 8007930:	4604      	mov	r4, r0
 8007932:	e7e4      	b.n	80078fe <__pow5mult+0x5a>
 8007934:	4638      	mov	r0, r7
 8007936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793a:	bf00      	nop
 800793c:	08008c18 	.word	0x08008c18

08007940 <__lshift>:
 8007940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	460c      	mov	r4, r1
 8007946:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6849      	ldr	r1, [r1, #4]
 800794e:	eb0a 0903 	add.w	r9, sl, r3
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	4607      	mov	r7, r0
 8007956:	4616      	mov	r6, r2
 8007958:	f109 0501 	add.w	r5, r9, #1
 800795c:	42ab      	cmp	r3, r5
 800795e:	db32      	blt.n	80079c6 <__lshift+0x86>
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fdee 	bl	8007542 <_Balloc>
 8007966:	2300      	movs	r3, #0
 8007968:	4680      	mov	r8, r0
 800796a:	f100 0114 	add.w	r1, r0, #20
 800796e:	461a      	mov	r2, r3
 8007970:	4553      	cmp	r3, sl
 8007972:	db2b      	blt.n	80079cc <__lshift+0x8c>
 8007974:	6920      	ldr	r0, [r4, #16]
 8007976:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800797a:	f104 0314 	add.w	r3, r4, #20
 800797e:	f016 021f 	ands.w	r2, r6, #31
 8007982:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007986:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800798a:	d025      	beq.n	80079d8 <__lshift+0x98>
 800798c:	f1c2 0e20 	rsb	lr, r2, #32
 8007990:	2000      	movs	r0, #0
 8007992:	681e      	ldr	r6, [r3, #0]
 8007994:	468a      	mov	sl, r1
 8007996:	4096      	lsls	r6, r2
 8007998:	4330      	orrs	r0, r6
 800799a:	f84a 0b04 	str.w	r0, [sl], #4
 800799e:	f853 0b04 	ldr.w	r0, [r3], #4
 80079a2:	459c      	cmp	ip, r3
 80079a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80079a8:	d814      	bhi.n	80079d4 <__lshift+0x94>
 80079aa:	6048      	str	r0, [r1, #4]
 80079ac:	b108      	cbz	r0, 80079b2 <__lshift+0x72>
 80079ae:	f109 0502 	add.w	r5, r9, #2
 80079b2:	3d01      	subs	r5, #1
 80079b4:	4638      	mov	r0, r7
 80079b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80079ba:	4621      	mov	r1, r4
 80079bc:	f7ff fdf5 	bl	80075aa <_Bfree>
 80079c0:	4640      	mov	r0, r8
 80079c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c6:	3101      	adds	r1, #1
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	e7c7      	b.n	800795c <__lshift+0x1c>
 80079cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80079d0:	3301      	adds	r3, #1
 80079d2:	e7cd      	b.n	8007970 <__lshift+0x30>
 80079d4:	4651      	mov	r1, sl
 80079d6:	e7dc      	b.n	8007992 <__lshift+0x52>
 80079d8:	3904      	subs	r1, #4
 80079da:	f853 2b04 	ldr.w	r2, [r3], #4
 80079de:	f841 2f04 	str.w	r2, [r1, #4]!
 80079e2:	459c      	cmp	ip, r3
 80079e4:	d8f9      	bhi.n	80079da <__lshift+0x9a>
 80079e6:	e7e4      	b.n	80079b2 <__lshift+0x72>

080079e8 <__mcmp>:
 80079e8:	6903      	ldr	r3, [r0, #16]
 80079ea:	690a      	ldr	r2, [r1, #16]
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	b530      	push	{r4, r5, lr}
 80079f0:	d10c      	bne.n	8007a0c <__mcmp+0x24>
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	3014      	adds	r0, #20
 80079f6:	3114      	adds	r1, #20
 80079f8:	1884      	adds	r4, r0, r2
 80079fa:	4411      	add	r1, r2
 80079fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a04:	4295      	cmp	r5, r2
 8007a06:	d003      	beq.n	8007a10 <__mcmp+0x28>
 8007a08:	d305      	bcc.n	8007a16 <__mcmp+0x2e>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd30      	pop	{r4, r5, pc}
 8007a10:	42a0      	cmp	r0, r4
 8007a12:	d3f3      	bcc.n	80079fc <__mcmp+0x14>
 8007a14:	e7fa      	b.n	8007a0c <__mcmp+0x24>
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e7f7      	b.n	8007a0c <__mcmp+0x24>

08007a1c <__mdiff>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460d      	mov	r5, r1
 8007a22:	4607      	mov	r7, r0
 8007a24:	4611      	mov	r1, r2
 8007a26:	4628      	mov	r0, r5
 8007a28:	4614      	mov	r4, r2
 8007a2a:	f7ff ffdd 	bl	80079e8 <__mcmp>
 8007a2e:	1e06      	subs	r6, r0, #0
 8007a30:	d108      	bne.n	8007a44 <__mdiff+0x28>
 8007a32:	4631      	mov	r1, r6
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff fd84 	bl	8007542 <_Balloc>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	bfa4      	itt	ge
 8007a46:	4623      	movge	r3, r4
 8007a48:	462c      	movge	r4, r5
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	6861      	ldr	r1, [r4, #4]
 8007a4e:	bfa6      	itte	ge
 8007a50:	461d      	movge	r5, r3
 8007a52:	2600      	movge	r6, #0
 8007a54:	2601      	movlt	r6, #1
 8007a56:	f7ff fd74 	bl	8007542 <_Balloc>
 8007a5a:	692b      	ldr	r3, [r5, #16]
 8007a5c:	60c6      	str	r6, [r0, #12]
 8007a5e:	6926      	ldr	r6, [r4, #16]
 8007a60:	f105 0914 	add.w	r9, r5, #20
 8007a64:	f104 0214 	add.w	r2, r4, #20
 8007a68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007a70:	f100 0514 	add.w	r5, r0, #20
 8007a74:	f04f 0e00 	mov.w	lr, #0
 8007a78:	f852 ab04 	ldr.w	sl, [r2], #4
 8007a7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a80:	fa1e f18a 	uxtah	r1, lr, sl
 8007a84:	b2a3      	uxth	r3, r4
 8007a86:	1ac9      	subs	r1, r1, r3
 8007a88:	0c23      	lsrs	r3, r4, #16
 8007a8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007a8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a92:	b289      	uxth	r1, r1
 8007a94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007a98:	45c8      	cmp	r8, r9
 8007a9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a9e:	4694      	mov	ip, r2
 8007aa0:	f845 3b04 	str.w	r3, [r5], #4
 8007aa4:	d8e8      	bhi.n	8007a78 <__mdiff+0x5c>
 8007aa6:	45bc      	cmp	ip, r7
 8007aa8:	d304      	bcc.n	8007ab4 <__mdiff+0x98>
 8007aaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007aae:	b183      	cbz	r3, 8007ad2 <__mdiff+0xb6>
 8007ab0:	6106      	str	r6, [r0, #16]
 8007ab2:	e7c5      	b.n	8007a40 <__mdiff+0x24>
 8007ab4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ab8:	fa1e f381 	uxtah	r3, lr, r1
 8007abc:	141a      	asrs	r2, r3, #16
 8007abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007acc:	f845 3b04 	str.w	r3, [r5], #4
 8007ad0:	e7e9      	b.n	8007aa6 <__mdiff+0x8a>
 8007ad2:	3e01      	subs	r6, #1
 8007ad4:	e7e9      	b.n	8007aaa <__mdiff+0x8e>
	...

08007ad8 <__ulp>:
 8007ad8:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <__ulp+0x4c>)
 8007ada:	ee10 2a90 	vmov	r2, s1
 8007ade:	401a      	ands	r2, r3
 8007ae0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd04      	ble.n	8007af2 <__ulp+0x1a>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	4619      	mov	r1, r3
 8007aec:	ec41 0b10 	vmov	d0, r0, r1
 8007af0:	4770      	bx	lr
 8007af2:	425b      	negs	r3, r3
 8007af4:	151b      	asrs	r3, r3, #20
 8007af6:	2b13      	cmp	r3, #19
 8007af8:	f04f 0000 	mov.w	r0, #0
 8007afc:	f04f 0100 	mov.w	r1, #0
 8007b00:	dc04      	bgt.n	8007b0c <__ulp+0x34>
 8007b02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b06:	fa42 f103 	asr.w	r1, r2, r3
 8007b0a:	e7ef      	b.n	8007aec <__ulp+0x14>
 8007b0c:	3b14      	subs	r3, #20
 8007b0e:	2b1e      	cmp	r3, #30
 8007b10:	f04f 0201 	mov.w	r2, #1
 8007b14:	bfda      	itte	le
 8007b16:	f1c3 031f 	rsble	r3, r3, #31
 8007b1a:	fa02 f303 	lslle.w	r3, r2, r3
 8007b1e:	4613      	movgt	r3, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	e7e3      	b.n	8007aec <__ulp+0x14>
 8007b24:	7ff00000 	.word	0x7ff00000

08007b28 <__b2d>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	6905      	ldr	r5, [r0, #16]
 8007b2c:	f100 0714 	add.w	r7, r0, #20
 8007b30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b34:	1f2e      	subs	r6, r5, #4
 8007b36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7ff fdc5 	bl	80076ca <__hi0bits>
 8007b40:	f1c0 0320 	rsb	r3, r0, #32
 8007b44:	280a      	cmp	r0, #10
 8007b46:	600b      	str	r3, [r1, #0]
 8007b48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007bc0 <__b2d+0x98>
 8007b4c:	dc14      	bgt.n	8007b78 <__b2d+0x50>
 8007b4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007b52:	fa24 f10e 	lsr.w	r1, r4, lr
 8007b56:	42b7      	cmp	r7, r6
 8007b58:	ea41 030c 	orr.w	r3, r1, ip
 8007b5c:	bf34      	ite	cc
 8007b5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b62:	2100      	movcs	r1, #0
 8007b64:	3015      	adds	r0, #21
 8007b66:	fa04 f000 	lsl.w	r0, r4, r0
 8007b6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8007b6e:	ea40 0201 	orr.w	r2, r0, r1
 8007b72:	ec43 2b10 	vmov	d0, r2, r3
 8007b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b78:	42b7      	cmp	r7, r6
 8007b7a:	bf3a      	itte	cc
 8007b7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007b80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b84:	2100      	movcs	r1, #0
 8007b86:	380b      	subs	r0, #11
 8007b88:	d015      	beq.n	8007bb6 <__b2d+0x8e>
 8007b8a:	4084      	lsls	r4, r0
 8007b8c:	f1c0 0520 	rsb	r5, r0, #32
 8007b90:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007b94:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007b98:	42be      	cmp	r6, r7
 8007b9a:	fa21 fc05 	lsr.w	ip, r1, r5
 8007b9e:	ea44 030c 	orr.w	r3, r4, ip
 8007ba2:	bf8c      	ite	hi
 8007ba4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007ba8:	2400      	movls	r4, #0
 8007baa:	fa01 f000 	lsl.w	r0, r1, r0
 8007bae:	40ec      	lsrs	r4, r5
 8007bb0:	ea40 0204 	orr.w	r2, r0, r4
 8007bb4:	e7dd      	b.n	8007b72 <__b2d+0x4a>
 8007bb6:	ea44 030c 	orr.w	r3, r4, ip
 8007bba:	460a      	mov	r2, r1
 8007bbc:	e7d9      	b.n	8007b72 <__b2d+0x4a>
 8007bbe:	bf00      	nop
 8007bc0:	3ff00000 	.word	0x3ff00000

08007bc4 <__d2b>:
 8007bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	460e      	mov	r6, r1
 8007bca:	2101      	movs	r1, #1
 8007bcc:	ec59 8b10 	vmov	r8, r9, d0
 8007bd0:	4615      	mov	r5, r2
 8007bd2:	f7ff fcb6 	bl	8007542 <_Balloc>
 8007bd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007bda:	4607      	mov	r7, r0
 8007bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be0:	bb34      	cbnz	r4, 8007c30 <__d2b+0x6c>
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	f1b8 0300 	subs.w	r3, r8, #0
 8007be8:	d027      	beq.n	8007c3a <__d2b+0x76>
 8007bea:	a802      	add	r0, sp, #8
 8007bec:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007bf0:	f7ff fd8a 	bl	8007708 <__lo0bits>
 8007bf4:	9900      	ldr	r1, [sp, #0]
 8007bf6:	b1f0      	cbz	r0, 8007c36 <__d2b+0x72>
 8007bf8:	9a01      	ldr	r2, [sp, #4]
 8007bfa:	f1c0 0320 	rsb	r3, r0, #32
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	430b      	orrs	r3, r1
 8007c04:	40c2      	lsrs	r2, r0
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	9201      	str	r2, [sp, #4]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf14      	ite	ne
 8007c12:	2102      	movne	r1, #2
 8007c14:	2101      	moveq	r1, #1
 8007c16:	6139      	str	r1, [r7, #16]
 8007c18:	b1c4      	cbz	r4, 8007c4c <__d2b+0x88>
 8007c1a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c1e:	4404      	add	r4, r0
 8007c20:	6034      	str	r4, [r6, #0]
 8007c22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c26:	6028      	str	r0, [r5, #0]
 8007c28:	4638      	mov	r0, r7
 8007c2a:	b003      	add	sp, #12
 8007c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c34:	e7d5      	b.n	8007be2 <__d2b+0x1e>
 8007c36:	6179      	str	r1, [r7, #20]
 8007c38:	e7e7      	b.n	8007c0a <__d2b+0x46>
 8007c3a:	a801      	add	r0, sp, #4
 8007c3c:	f7ff fd64 	bl	8007708 <__lo0bits>
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	2101      	movs	r1, #1
 8007c46:	6139      	str	r1, [r7, #16]
 8007c48:	3020      	adds	r0, #32
 8007c4a:	e7e5      	b.n	8007c18 <__d2b+0x54>
 8007c4c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c54:	6030      	str	r0, [r6, #0]
 8007c56:	6918      	ldr	r0, [r3, #16]
 8007c58:	f7ff fd37 	bl	80076ca <__hi0bits>
 8007c5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c60:	e7e1      	b.n	8007c26 <__d2b+0x62>

08007c62 <__ratio>:
 8007c62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c66:	4688      	mov	r8, r1
 8007c68:	4669      	mov	r1, sp
 8007c6a:	4681      	mov	r9, r0
 8007c6c:	f7ff ff5c 	bl	8007b28 <__b2d>
 8007c70:	a901      	add	r1, sp, #4
 8007c72:	4640      	mov	r0, r8
 8007c74:	ec57 6b10 	vmov	r6, r7, d0
 8007c78:	f7ff ff56 	bl	8007b28 <__b2d>
 8007c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c84:	eba3 0c02 	sub.w	ip, r3, r2
 8007c88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c92:	ec5b ab10 	vmov	sl, fp, d0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfce      	itee	gt
 8007c9a:	463a      	movgt	r2, r7
 8007c9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ca0:	465a      	movle	r2, fp
 8007ca2:	4659      	mov	r1, fp
 8007ca4:	463d      	mov	r5, r7
 8007ca6:	bfd4      	ite	le
 8007ca8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007cac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	ee10 2a10 	vmov	r2, s0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 fde7 	bl	800088c <__aeabi_ddiv>
 8007cbe:	ec41 0b10 	vmov	d0, r0, r1
 8007cc2:	b003      	add	sp, #12
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cc8 <__copybits>:
 8007cc8:	3901      	subs	r1, #1
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	1149      	asrs	r1, r1, #5
 8007cce:	6914      	ldr	r4, [r2, #16]
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	f102 0314 	add.w	r3, r2, #20
 8007cd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007cda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	d303      	bcc.n	8007cec <__copybits+0x24>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	428a      	cmp	r2, r1
 8007ce8:	d305      	bcc.n	8007cf6 <__copybits+0x2e>
 8007cea:	bd10      	pop	{r4, pc}
 8007cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf0:	f840 2b04 	str.w	r2, [r0], #4
 8007cf4:	e7f3      	b.n	8007cde <__copybits+0x16>
 8007cf6:	f842 3b04 	str.w	r3, [r2], #4
 8007cfa:	e7f4      	b.n	8007ce6 <__copybits+0x1e>

08007cfc <__any_on>:
 8007cfc:	f100 0214 	add.w	r2, r0, #20
 8007d00:	6900      	ldr	r0, [r0, #16]
 8007d02:	114b      	asrs	r3, r1, #5
 8007d04:	4298      	cmp	r0, r3
 8007d06:	b510      	push	{r4, lr}
 8007d08:	db11      	blt.n	8007d2e <__any_on+0x32>
 8007d0a:	dd0a      	ble.n	8007d22 <__any_on+0x26>
 8007d0c:	f011 011f 	ands.w	r1, r1, #31
 8007d10:	d007      	beq.n	8007d22 <__any_on+0x26>
 8007d12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d16:	fa24 f001 	lsr.w	r0, r4, r1
 8007d1a:	fa00 f101 	lsl.w	r1, r0, r1
 8007d1e:	428c      	cmp	r4, r1
 8007d20:	d10b      	bne.n	8007d3a <__any_on+0x3e>
 8007d22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d803      	bhi.n	8007d32 <__any_on+0x36>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	4603      	mov	r3, r0
 8007d30:	e7f7      	b.n	8007d22 <__any_on+0x26>
 8007d32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d0f5      	beq.n	8007d26 <__any_on+0x2a>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	e7f6      	b.n	8007d2c <__any_on+0x30>

08007d3e <_calloc_r>:
 8007d3e:	b538      	push	{r3, r4, r5, lr}
 8007d40:	fb02 f401 	mul.w	r4, r2, r1
 8007d44:	4621      	mov	r1, r4
 8007d46:	f000 f857 	bl	8007df8 <_malloc_r>
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	b118      	cbz	r0, 8007d56 <_calloc_r+0x18>
 8007d4e:	4622      	mov	r2, r4
 8007d50:	2100      	movs	r1, #0
 8007d52:	f7fc fc55 	bl	8004600 <memset>
 8007d56:	4628      	mov	r0, r5
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
	...

08007d5c <_free_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4605      	mov	r5, r0
 8007d60:	2900      	cmp	r1, #0
 8007d62:	d045      	beq.n	8007df0 <_free_r+0x94>
 8007d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d68:	1f0c      	subs	r4, r1, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfb8      	it	lt
 8007d6e:	18e4      	addlt	r4, r4, r3
 8007d70:	f000 fdc3 	bl	80088fa <__malloc_lock>
 8007d74:	4a1f      	ldr	r2, [pc, #124]	; (8007df4 <_free_r+0x98>)
 8007d76:	6813      	ldr	r3, [r2, #0]
 8007d78:	4610      	mov	r0, r2
 8007d7a:	b933      	cbnz	r3, 8007d8a <_free_r+0x2e>
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	6014      	str	r4, [r2, #0]
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d86:	f000 bdb9 	b.w	80088fc <__malloc_unlock>
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	d90c      	bls.n	8007da8 <_free_r+0x4c>
 8007d8e:	6821      	ldr	r1, [r4, #0]
 8007d90:	1862      	adds	r2, r4, r1
 8007d92:	4293      	cmp	r3, r2
 8007d94:	bf04      	itt	eq
 8007d96:	681a      	ldreq	r2, [r3, #0]
 8007d98:	685b      	ldreq	r3, [r3, #4]
 8007d9a:	6063      	str	r3, [r4, #4]
 8007d9c:	bf04      	itt	eq
 8007d9e:	1852      	addeq	r2, r2, r1
 8007da0:	6022      	streq	r2, [r4, #0]
 8007da2:	6004      	str	r4, [r0, #0]
 8007da4:	e7ec      	b.n	8007d80 <_free_r+0x24>
 8007da6:	4613      	mov	r3, r2
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	b10a      	cbz	r2, 8007db0 <_free_r+0x54>
 8007dac:	42a2      	cmp	r2, r4
 8007dae:	d9fa      	bls.n	8007da6 <_free_r+0x4a>
 8007db0:	6819      	ldr	r1, [r3, #0]
 8007db2:	1858      	adds	r0, r3, r1
 8007db4:	42a0      	cmp	r0, r4
 8007db6:	d10b      	bne.n	8007dd0 <_free_r+0x74>
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	4401      	add	r1, r0
 8007dbc:	1858      	adds	r0, r3, r1
 8007dbe:	4282      	cmp	r2, r0
 8007dc0:	6019      	str	r1, [r3, #0]
 8007dc2:	d1dd      	bne.n	8007d80 <_free_r+0x24>
 8007dc4:	6810      	ldr	r0, [r2, #0]
 8007dc6:	6852      	ldr	r2, [r2, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	4401      	add	r1, r0
 8007dcc:	6019      	str	r1, [r3, #0]
 8007dce:	e7d7      	b.n	8007d80 <_free_r+0x24>
 8007dd0:	d902      	bls.n	8007dd8 <_free_r+0x7c>
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	e7d3      	b.n	8007d80 <_free_r+0x24>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	1821      	adds	r1, r4, r0
 8007ddc:	428a      	cmp	r2, r1
 8007dde:	bf04      	itt	eq
 8007de0:	6811      	ldreq	r1, [r2, #0]
 8007de2:	6852      	ldreq	r2, [r2, #4]
 8007de4:	6062      	str	r2, [r4, #4]
 8007de6:	bf04      	itt	eq
 8007de8:	1809      	addeq	r1, r1, r0
 8007dea:	6021      	streq	r1, [r4, #0]
 8007dec:	605c      	str	r4, [r3, #4]
 8007dee:	e7c7      	b.n	8007d80 <_free_r+0x24>
 8007df0:	bd38      	pop	{r3, r4, r5, pc}
 8007df2:	bf00      	nop
 8007df4:	20000208 	.word	0x20000208

08007df8 <_malloc_r>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	1ccd      	adds	r5, r1, #3
 8007dfc:	f025 0503 	bic.w	r5, r5, #3
 8007e00:	3508      	adds	r5, #8
 8007e02:	2d0c      	cmp	r5, #12
 8007e04:	bf38      	it	cc
 8007e06:	250c      	movcc	r5, #12
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	db01      	blt.n	8007e12 <_malloc_r+0x1a>
 8007e0e:	42a9      	cmp	r1, r5
 8007e10:	d903      	bls.n	8007e1a <_malloc_r+0x22>
 8007e12:	230c      	movs	r3, #12
 8007e14:	6033      	str	r3, [r6, #0]
 8007e16:	2000      	movs	r0, #0
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	f000 fd6e 	bl	80088fa <__malloc_lock>
 8007e1e:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <_malloc_r+0xac>)
 8007e20:	6814      	ldr	r4, [r2, #0]
 8007e22:	4621      	mov	r1, r4
 8007e24:	b991      	cbnz	r1, 8007e4c <_malloc_r+0x54>
 8007e26:	4c20      	ldr	r4, [pc, #128]	; (8007ea8 <_malloc_r+0xb0>)
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	b91b      	cbnz	r3, 8007e34 <_malloc_r+0x3c>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f000 facf 	bl	80083d0 <_sbrk_r>
 8007e32:	6020      	str	r0, [r4, #0]
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 faca 	bl	80083d0 <_sbrk_r>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d124      	bne.n	8007e8a <_malloc_r+0x92>
 8007e40:	230c      	movs	r3, #12
 8007e42:	6033      	str	r3, [r6, #0]
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 fd59 	bl	80088fc <__malloc_unlock>
 8007e4a:	e7e4      	b.n	8007e16 <_malloc_r+0x1e>
 8007e4c:	680b      	ldr	r3, [r1, #0]
 8007e4e:	1b5b      	subs	r3, r3, r5
 8007e50:	d418      	bmi.n	8007e84 <_malloc_r+0x8c>
 8007e52:	2b0b      	cmp	r3, #11
 8007e54:	d90f      	bls.n	8007e76 <_malloc_r+0x7e>
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	50cd      	str	r5, [r1, r3]
 8007e5a:	18cc      	adds	r4, r1, r3
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 fd4d 	bl	80088fc <__malloc_unlock>
 8007e62:	f104 000b 	add.w	r0, r4, #11
 8007e66:	1d23      	adds	r3, r4, #4
 8007e68:	f020 0007 	bic.w	r0, r0, #7
 8007e6c:	1ac3      	subs	r3, r0, r3
 8007e6e:	d0d3      	beq.n	8007e18 <_malloc_r+0x20>
 8007e70:	425a      	negs	r2, r3
 8007e72:	50e2      	str	r2, [r4, r3]
 8007e74:	e7d0      	b.n	8007e18 <_malloc_r+0x20>
 8007e76:	428c      	cmp	r4, r1
 8007e78:	684b      	ldr	r3, [r1, #4]
 8007e7a:	bf16      	itet	ne
 8007e7c:	6063      	strne	r3, [r4, #4]
 8007e7e:	6013      	streq	r3, [r2, #0]
 8007e80:	460c      	movne	r4, r1
 8007e82:	e7eb      	b.n	8007e5c <_malloc_r+0x64>
 8007e84:	460c      	mov	r4, r1
 8007e86:	6849      	ldr	r1, [r1, #4]
 8007e88:	e7cc      	b.n	8007e24 <_malloc_r+0x2c>
 8007e8a:	1cc4      	adds	r4, r0, #3
 8007e8c:	f024 0403 	bic.w	r4, r4, #3
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d005      	beq.n	8007ea0 <_malloc_r+0xa8>
 8007e94:	1a21      	subs	r1, r4, r0
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 fa9a 	bl	80083d0 <_sbrk_r>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d0cf      	beq.n	8007e40 <_malloc_r+0x48>
 8007ea0:	6025      	str	r5, [r4, #0]
 8007ea2:	e7db      	b.n	8007e5c <_malloc_r+0x64>
 8007ea4:	20000208 	.word	0x20000208
 8007ea8:	2000020c 	.word	0x2000020c

08007eac <__ssputs_r>:
 8007eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	688e      	ldr	r6, [r1, #8]
 8007eb2:	429e      	cmp	r6, r3
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	4690      	mov	r8, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	d837      	bhi.n	8007f2e <__ssputs_r+0x82>
 8007ebe:	898a      	ldrh	r2, [r1, #12]
 8007ec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ec4:	d031      	beq.n	8007f2a <__ssputs_r+0x7e>
 8007ec6:	6825      	ldr	r5, [r4, #0]
 8007ec8:	6909      	ldr	r1, [r1, #16]
 8007eca:	1a6f      	subs	r7, r5, r1
 8007ecc:	6965      	ldr	r5, [r4, #20]
 8007ece:	2302      	movs	r3, #2
 8007ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ed8:	f109 0301 	add.w	r3, r9, #1
 8007edc:	443b      	add	r3, r7
 8007ede:	429d      	cmp	r5, r3
 8007ee0:	bf38      	it	cc
 8007ee2:	461d      	movcc	r5, r3
 8007ee4:	0553      	lsls	r3, r2, #21
 8007ee6:	d530      	bpl.n	8007f4a <__ssputs_r+0x9e>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7ff ff85 	bl	8007df8 <_malloc_r>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	b950      	cbnz	r0, 8007f08 <__ssputs_r+0x5c>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	f8ca 3000 	str.w	r3, [sl]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f08:	463a      	mov	r2, r7
 8007f0a:	6921      	ldr	r1, [r4, #16]
 8007f0c:	f7ff fb0e 	bl	800752c <memcpy>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	6126      	str	r6, [r4, #16]
 8007f1e:	6165      	str	r5, [r4, #20]
 8007f20:	443e      	add	r6, r7
 8007f22:	1bed      	subs	r5, r5, r7
 8007f24:	6026      	str	r6, [r4, #0]
 8007f26:	60a5      	str	r5, [r4, #8]
 8007f28:	464e      	mov	r6, r9
 8007f2a:	454e      	cmp	r6, r9
 8007f2c:	d900      	bls.n	8007f30 <__ssputs_r+0x84>
 8007f2e:	464e      	mov	r6, r9
 8007f30:	4632      	mov	r2, r6
 8007f32:	4641      	mov	r1, r8
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	f000 fcc7 	bl	80088c8 <memmove>
 8007f3a:	68a3      	ldr	r3, [r4, #8]
 8007f3c:	1b9b      	subs	r3, r3, r6
 8007f3e:	60a3      	str	r3, [r4, #8]
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	441e      	add	r6, r3
 8007f44:	6026      	str	r6, [r4, #0]
 8007f46:	2000      	movs	r0, #0
 8007f48:	e7dc      	b.n	8007f04 <__ssputs_r+0x58>
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	f000 fcd7 	bl	80088fe <_realloc_r>
 8007f50:	4606      	mov	r6, r0
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d1e2      	bne.n	8007f1c <__ssputs_r+0x70>
 8007f56:	6921      	ldr	r1, [r4, #16]
 8007f58:	4650      	mov	r0, sl
 8007f5a:	f7ff feff 	bl	8007d5c <_free_r>
 8007f5e:	e7c8      	b.n	8007ef2 <__ssputs_r+0x46>

08007f60 <_svfiprintf_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	461d      	mov	r5, r3
 8007f66:	898b      	ldrh	r3, [r1, #12]
 8007f68:	061f      	lsls	r7, r3, #24
 8007f6a:	b09d      	sub	sp, #116	; 0x74
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	4616      	mov	r6, r2
 8007f72:	d50f      	bpl.n	8007f94 <_svfiprintf_r+0x34>
 8007f74:	690b      	ldr	r3, [r1, #16]
 8007f76:	b96b      	cbnz	r3, 8007f94 <_svfiprintf_r+0x34>
 8007f78:	2140      	movs	r1, #64	; 0x40
 8007f7a:	f7ff ff3d 	bl	8007df8 <_malloc_r>
 8007f7e:	6020      	str	r0, [r4, #0]
 8007f80:	6120      	str	r0, [r4, #16]
 8007f82:	b928      	cbnz	r0, 8007f90 <_svfiprintf_r+0x30>
 8007f84:	230c      	movs	r3, #12
 8007f86:	f8c8 3000 	str.w	r3, [r8]
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8e:	e0c8      	b.n	8008122 <_svfiprintf_r+0x1c2>
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	2300      	movs	r3, #0
 8007f96:	9309      	str	r3, [sp, #36]	; 0x24
 8007f98:	2320      	movs	r3, #32
 8007f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f9e:	2330      	movs	r3, #48	; 0x30
 8007fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fa4:	9503      	str	r5, [sp, #12]
 8007fa6:	f04f 0b01 	mov.w	fp, #1
 8007faa:	4637      	mov	r7, r6
 8007fac:	463d      	mov	r5, r7
 8007fae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007fb2:	b10b      	cbz	r3, 8007fb8 <_svfiprintf_r+0x58>
 8007fb4:	2b25      	cmp	r3, #37	; 0x25
 8007fb6:	d13e      	bne.n	8008036 <_svfiprintf_r+0xd6>
 8007fb8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007fbc:	d00b      	beq.n	8007fd6 <_svfiprintf_r+0x76>
 8007fbe:	4653      	mov	r3, sl
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	f7ff ff71 	bl	8007eac <__ssputs_r>
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f000 80a4 	beq.w	8008118 <_svfiprintf_r+0x1b8>
 8007fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd2:	4453      	add	r3, sl
 8007fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd6:	783b      	ldrb	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 809d 	beq.w	8008118 <_svfiprintf_r+0x1b8>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff2:	462f      	mov	r7, r5
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ffa:	4850      	ldr	r0, [pc, #320]	; (800813c <_svfiprintf_r+0x1dc>)
 8007ffc:	f7f8 f910 	bl	8000220 <memchr>
 8008000:	9b04      	ldr	r3, [sp, #16]
 8008002:	b9d0      	cbnz	r0, 800803a <_svfiprintf_r+0xda>
 8008004:	06d9      	lsls	r1, r3, #27
 8008006:	bf44      	itt	mi
 8008008:	2220      	movmi	r2, #32
 800800a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800800e:	071a      	lsls	r2, r3, #28
 8008010:	bf44      	itt	mi
 8008012:	222b      	movmi	r2, #43	; 0x2b
 8008014:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008018:	782a      	ldrb	r2, [r5, #0]
 800801a:	2a2a      	cmp	r2, #42	; 0x2a
 800801c:	d015      	beq.n	800804a <_svfiprintf_r+0xea>
 800801e:	9a07      	ldr	r2, [sp, #28]
 8008020:	462f      	mov	r7, r5
 8008022:	2000      	movs	r0, #0
 8008024:	250a      	movs	r5, #10
 8008026:	4639      	mov	r1, r7
 8008028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802c:	3b30      	subs	r3, #48	; 0x30
 800802e:	2b09      	cmp	r3, #9
 8008030:	d94d      	bls.n	80080ce <_svfiprintf_r+0x16e>
 8008032:	b1b8      	cbz	r0, 8008064 <_svfiprintf_r+0x104>
 8008034:	e00f      	b.n	8008056 <_svfiprintf_r+0xf6>
 8008036:	462f      	mov	r7, r5
 8008038:	e7b8      	b.n	8007fac <_svfiprintf_r+0x4c>
 800803a:	4a40      	ldr	r2, [pc, #256]	; (800813c <_svfiprintf_r+0x1dc>)
 800803c:	1a80      	subs	r0, r0, r2
 800803e:	fa0b f000 	lsl.w	r0, fp, r0
 8008042:	4318      	orrs	r0, r3
 8008044:	9004      	str	r0, [sp, #16]
 8008046:	463d      	mov	r5, r7
 8008048:	e7d3      	b.n	8007ff2 <_svfiprintf_r+0x92>
 800804a:	9a03      	ldr	r2, [sp, #12]
 800804c:	1d11      	adds	r1, r2, #4
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	9103      	str	r1, [sp, #12]
 8008052:	2a00      	cmp	r2, #0
 8008054:	db01      	blt.n	800805a <_svfiprintf_r+0xfa>
 8008056:	9207      	str	r2, [sp, #28]
 8008058:	e004      	b.n	8008064 <_svfiprintf_r+0x104>
 800805a:	4252      	negs	r2, r2
 800805c:	f043 0302 	orr.w	r3, r3, #2
 8008060:	9207      	str	r2, [sp, #28]
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	783b      	ldrb	r3, [r7, #0]
 8008066:	2b2e      	cmp	r3, #46	; 0x2e
 8008068:	d10c      	bne.n	8008084 <_svfiprintf_r+0x124>
 800806a:	787b      	ldrb	r3, [r7, #1]
 800806c:	2b2a      	cmp	r3, #42	; 0x2a
 800806e:	d133      	bne.n	80080d8 <_svfiprintf_r+0x178>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	1d1a      	adds	r2, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9203      	str	r2, [sp, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfb8      	it	lt
 800807c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008080:	3702      	adds	r7, #2
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	4d2e      	ldr	r5, [pc, #184]	; (8008140 <_svfiprintf_r+0x1e0>)
 8008086:	7839      	ldrb	r1, [r7, #0]
 8008088:	2203      	movs	r2, #3
 800808a:	4628      	mov	r0, r5
 800808c:	f7f8 f8c8 	bl	8000220 <memchr>
 8008090:	b138      	cbz	r0, 80080a2 <_svfiprintf_r+0x142>
 8008092:	2340      	movs	r3, #64	; 0x40
 8008094:	1b40      	subs	r0, r0, r5
 8008096:	fa03 f000 	lsl.w	r0, r3, r0
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	4303      	orrs	r3, r0
 800809e:	3701      	adds	r7, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	7839      	ldrb	r1, [r7, #0]
 80080a4:	4827      	ldr	r0, [pc, #156]	; (8008144 <_svfiprintf_r+0x1e4>)
 80080a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080aa:	2206      	movs	r2, #6
 80080ac:	1c7e      	adds	r6, r7, #1
 80080ae:	f7f8 f8b7 	bl	8000220 <memchr>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d038      	beq.n	8008128 <_svfiprintf_r+0x1c8>
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <_svfiprintf_r+0x1e8>)
 80080b8:	bb13      	cbnz	r3, 8008100 <_svfiprintf_r+0x1a0>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	3308      	adds	r3, #8
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	444b      	add	r3, r9
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	e76d      	b.n	8007faa <_svfiprintf_r+0x4a>
 80080ce:	fb05 3202 	mla	r2, r5, r2, r3
 80080d2:	2001      	movs	r0, #1
 80080d4:	460f      	mov	r7, r1
 80080d6:	e7a6      	b.n	8008026 <_svfiprintf_r+0xc6>
 80080d8:	2300      	movs	r3, #0
 80080da:	3701      	adds	r7, #1
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	4619      	mov	r1, r3
 80080e0:	250a      	movs	r5, #10
 80080e2:	4638      	mov	r0, r7
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	3a30      	subs	r2, #48	; 0x30
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d903      	bls.n	80080f6 <_svfiprintf_r+0x196>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c8      	beq.n	8008084 <_svfiprintf_r+0x124>
 80080f2:	9105      	str	r1, [sp, #20]
 80080f4:	e7c6      	b.n	8008084 <_svfiprintf_r+0x124>
 80080f6:	fb05 2101 	mla	r1, r5, r1, r2
 80080fa:	2301      	movs	r3, #1
 80080fc:	4607      	mov	r7, r0
 80080fe:	e7f0      	b.n	80080e2 <_svfiprintf_r+0x182>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	4622      	mov	r2, r4
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <_svfiprintf_r+0x1ec>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	4640      	mov	r0, r8
 800810c:	f7fc fb14 	bl	8004738 <_printf_float>
 8008110:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008114:	4681      	mov	r9, r0
 8008116:	d1d6      	bne.n	80080c6 <_svfiprintf_r+0x166>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	065b      	lsls	r3, r3, #25
 800811c:	f53f af35 	bmi.w	8007f8a <_svfiprintf_r+0x2a>
 8008120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008122:	b01d      	add	sp, #116	; 0x74
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	ab03      	add	r3, sp, #12
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4622      	mov	r2, r4
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <_svfiprintf_r+0x1ec>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	4640      	mov	r0, r8
 8008134:	f7fc fdb6 	bl	8004ca4 <_printf_i>
 8008138:	e7ea      	b.n	8008110 <_svfiprintf_r+0x1b0>
 800813a:	bf00      	nop
 800813c:	08008c24 	.word	0x08008c24
 8008140:	08008c2a 	.word	0x08008c2a
 8008144:	08008c2e 	.word	0x08008c2e
 8008148:	08004739 	.word	0x08004739
 800814c:	08007ead 	.word	0x08007ead

08008150 <__sfputc_r>:
 8008150:	6893      	ldr	r3, [r2, #8]
 8008152:	3b01      	subs	r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	b410      	push	{r4}
 8008158:	6093      	str	r3, [r2, #8]
 800815a:	da08      	bge.n	800816e <__sfputc_r+0x1e>
 800815c:	6994      	ldr	r4, [r2, #24]
 800815e:	42a3      	cmp	r3, r4
 8008160:	db01      	blt.n	8008166 <__sfputc_r+0x16>
 8008162:	290a      	cmp	r1, #10
 8008164:	d103      	bne.n	800816e <__sfputc_r+0x1e>
 8008166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816a:	f000 b997 	b.w	800849c <__swbuf_r>
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	1c58      	adds	r0, r3, #1
 8008172:	6010      	str	r0, [r2, #0]
 8008174:	7019      	strb	r1, [r3, #0]
 8008176:	4608      	mov	r0, r1
 8008178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817c:	4770      	bx	lr

0800817e <__sfputs_r>:
 800817e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	4614      	mov	r4, r2
 8008186:	18d5      	adds	r5, r2, r3
 8008188:	42ac      	cmp	r4, r5
 800818a:	d101      	bne.n	8008190 <__sfputs_r+0x12>
 800818c:	2000      	movs	r0, #0
 800818e:	e007      	b.n	80081a0 <__sfputs_r+0x22>
 8008190:	463a      	mov	r2, r7
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffda 	bl	8008150 <__sfputc_r>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d1f3      	bne.n	8008188 <__sfputs_r+0xa>
 80081a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081a4 <_vfiprintf_r>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	b09d      	sub	sp, #116	; 0x74
 80081ac:	4617      	mov	r7, r2
 80081ae:	461d      	mov	r5, r3
 80081b0:	4606      	mov	r6, r0
 80081b2:	b118      	cbz	r0, 80081bc <_vfiprintf_r+0x18>
 80081b4:	6983      	ldr	r3, [r0, #24]
 80081b6:	b90b      	cbnz	r3, 80081bc <_vfiprintf_r+0x18>
 80081b8:	f7fe fdda 	bl	8006d70 <__sinit>
 80081bc:	4b7c      	ldr	r3, [pc, #496]	; (80083b0 <_vfiprintf_r+0x20c>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	d158      	bne.n	8008274 <_vfiprintf_r+0xd0>
 80081c2:	6874      	ldr	r4, [r6, #4]
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	0718      	lsls	r0, r3, #28
 80081c8:	d55e      	bpl.n	8008288 <_vfiprintf_r+0xe4>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d05b      	beq.n	8008288 <_vfiprintf_r+0xe4>
 80081d0:	2300      	movs	r3, #0
 80081d2:	9309      	str	r3, [sp, #36]	; 0x24
 80081d4:	2320      	movs	r3, #32
 80081d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081da:	2330      	movs	r3, #48	; 0x30
 80081dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081e0:	9503      	str	r5, [sp, #12]
 80081e2:	f04f 0b01 	mov.w	fp, #1
 80081e6:	46b8      	mov	r8, r7
 80081e8:	4645      	mov	r5, r8
 80081ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081ee:	b10b      	cbz	r3, 80081f4 <_vfiprintf_r+0x50>
 80081f0:	2b25      	cmp	r3, #37	; 0x25
 80081f2:	d154      	bne.n	800829e <_vfiprintf_r+0xfa>
 80081f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80081f8:	d00b      	beq.n	8008212 <_vfiprintf_r+0x6e>
 80081fa:	4653      	mov	r3, sl
 80081fc:	463a      	mov	r2, r7
 80081fe:	4621      	mov	r1, r4
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ffbc 	bl	800817e <__sfputs_r>
 8008206:	3001      	adds	r0, #1
 8008208:	f000 80c2 	beq.w	8008390 <_vfiprintf_r+0x1ec>
 800820c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820e:	4453      	add	r3, sl
 8008210:	9309      	str	r3, [sp, #36]	; 0x24
 8008212:	f898 3000 	ldrb.w	r3, [r8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80ba 	beq.w	8008390 <_vfiprintf_r+0x1ec>
 800821c:	2300      	movs	r3, #0
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	9307      	str	r3, [sp, #28]
 800822a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800822e:	931a      	str	r3, [sp, #104]	; 0x68
 8008230:	46a8      	mov	r8, r5
 8008232:	2205      	movs	r2, #5
 8008234:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008238:	485e      	ldr	r0, [pc, #376]	; (80083b4 <_vfiprintf_r+0x210>)
 800823a:	f7f7 fff1 	bl	8000220 <memchr>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	bb78      	cbnz	r0, 80082a2 <_vfiprintf_r+0xfe>
 8008242:	06d9      	lsls	r1, r3, #27
 8008244:	bf44      	itt	mi
 8008246:	2220      	movmi	r2, #32
 8008248:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	bf44      	itt	mi
 8008250:	222b      	movmi	r2, #43	; 0x2b
 8008252:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008256:	782a      	ldrb	r2, [r5, #0]
 8008258:	2a2a      	cmp	r2, #42	; 0x2a
 800825a:	d02a      	beq.n	80082b2 <_vfiprintf_r+0x10e>
 800825c:	9a07      	ldr	r2, [sp, #28]
 800825e:	46a8      	mov	r8, r5
 8008260:	2000      	movs	r0, #0
 8008262:	250a      	movs	r5, #10
 8008264:	4641      	mov	r1, r8
 8008266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826a:	3b30      	subs	r3, #48	; 0x30
 800826c:	2b09      	cmp	r3, #9
 800826e:	d969      	bls.n	8008344 <_vfiprintf_r+0x1a0>
 8008270:	b360      	cbz	r0, 80082cc <_vfiprintf_r+0x128>
 8008272:	e024      	b.n	80082be <_vfiprintf_r+0x11a>
 8008274:	4b50      	ldr	r3, [pc, #320]	; (80083b8 <_vfiprintf_r+0x214>)
 8008276:	429c      	cmp	r4, r3
 8008278:	d101      	bne.n	800827e <_vfiprintf_r+0xda>
 800827a:	68b4      	ldr	r4, [r6, #8]
 800827c:	e7a2      	b.n	80081c4 <_vfiprintf_r+0x20>
 800827e:	4b4f      	ldr	r3, [pc, #316]	; (80083bc <_vfiprintf_r+0x218>)
 8008280:	429c      	cmp	r4, r3
 8008282:	bf08      	it	eq
 8008284:	68f4      	ldreq	r4, [r6, #12]
 8008286:	e79d      	b.n	80081c4 <_vfiprintf_r+0x20>
 8008288:	4621      	mov	r1, r4
 800828a:	4630      	mov	r0, r6
 800828c:	f000 f978 	bl	8008580 <__swsetup_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	d09d      	beq.n	80081d0 <_vfiprintf_r+0x2c>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	b01d      	add	sp, #116	; 0x74
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	46a8      	mov	r8, r5
 80082a0:	e7a2      	b.n	80081e8 <_vfiprintf_r+0x44>
 80082a2:	4a44      	ldr	r2, [pc, #272]	; (80083b4 <_vfiprintf_r+0x210>)
 80082a4:	1a80      	subs	r0, r0, r2
 80082a6:	fa0b f000 	lsl.w	r0, fp, r0
 80082aa:	4318      	orrs	r0, r3
 80082ac:	9004      	str	r0, [sp, #16]
 80082ae:	4645      	mov	r5, r8
 80082b0:	e7be      	b.n	8008230 <_vfiprintf_r+0x8c>
 80082b2:	9a03      	ldr	r2, [sp, #12]
 80082b4:	1d11      	adds	r1, r2, #4
 80082b6:	6812      	ldr	r2, [r2, #0]
 80082b8:	9103      	str	r1, [sp, #12]
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	db01      	blt.n	80082c2 <_vfiprintf_r+0x11e>
 80082be:	9207      	str	r2, [sp, #28]
 80082c0:	e004      	b.n	80082cc <_vfiprintf_r+0x128>
 80082c2:	4252      	negs	r2, r2
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	9207      	str	r2, [sp, #28]
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	f898 3000 	ldrb.w	r3, [r8]
 80082d0:	2b2e      	cmp	r3, #46	; 0x2e
 80082d2:	d10e      	bne.n	80082f2 <_vfiprintf_r+0x14e>
 80082d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082d8:	2b2a      	cmp	r3, #42	; 0x2a
 80082da:	d138      	bne.n	800834e <_vfiprintf_r+0x1aa>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb8      	it	lt
 80082e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ec:	f108 0802 	add.w	r8, r8, #2
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	4d33      	ldr	r5, [pc, #204]	; (80083c0 <_vfiprintf_r+0x21c>)
 80082f4:	f898 1000 	ldrb.w	r1, [r8]
 80082f8:	2203      	movs	r2, #3
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7f7 ff90 	bl	8000220 <memchr>
 8008300:	b140      	cbz	r0, 8008314 <_vfiprintf_r+0x170>
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	1b40      	subs	r0, r0, r5
 8008306:	fa03 f000 	lsl.w	r0, r3, r0
 800830a:	9b04      	ldr	r3, [sp, #16]
 800830c:	4303      	orrs	r3, r0
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	f898 1000 	ldrb.w	r1, [r8]
 8008318:	482a      	ldr	r0, [pc, #168]	; (80083c4 <_vfiprintf_r+0x220>)
 800831a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831e:	2206      	movs	r2, #6
 8008320:	f108 0701 	add.w	r7, r8, #1
 8008324:	f7f7 ff7c 	bl	8000220 <memchr>
 8008328:	2800      	cmp	r0, #0
 800832a:	d037      	beq.n	800839c <_vfiprintf_r+0x1f8>
 800832c:	4b26      	ldr	r3, [pc, #152]	; (80083c8 <_vfiprintf_r+0x224>)
 800832e:	bb1b      	cbnz	r3, 8008378 <_vfiprintf_r+0x1d4>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	3308      	adds	r3, #8
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	444b      	add	r3, r9
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	e750      	b.n	80081e6 <_vfiprintf_r+0x42>
 8008344:	fb05 3202 	mla	r2, r5, r2, r3
 8008348:	2001      	movs	r0, #1
 800834a:	4688      	mov	r8, r1
 800834c:	e78a      	b.n	8008264 <_vfiprintf_r+0xc0>
 800834e:	2300      	movs	r3, #0
 8008350:	f108 0801 	add.w	r8, r8, #1
 8008354:	9305      	str	r3, [sp, #20]
 8008356:	4619      	mov	r1, r3
 8008358:	250a      	movs	r5, #10
 800835a:	4640      	mov	r0, r8
 800835c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008360:	3a30      	subs	r2, #48	; 0x30
 8008362:	2a09      	cmp	r2, #9
 8008364:	d903      	bls.n	800836e <_vfiprintf_r+0x1ca>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0c3      	beq.n	80082f2 <_vfiprintf_r+0x14e>
 800836a:	9105      	str	r1, [sp, #20]
 800836c:	e7c1      	b.n	80082f2 <_vfiprintf_r+0x14e>
 800836e:	fb05 2101 	mla	r1, r5, r1, r2
 8008372:	2301      	movs	r3, #1
 8008374:	4680      	mov	r8, r0
 8008376:	e7f0      	b.n	800835a <_vfiprintf_r+0x1b6>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4622      	mov	r2, r4
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <_vfiprintf_r+0x228>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4630      	mov	r0, r6
 8008384:	f7fc f9d8 	bl	8004738 <_printf_float>
 8008388:	f1b0 3fff 	cmp.w	r0, #4294967295
 800838c:	4681      	mov	r9, r0
 800838e:	d1d5      	bne.n	800833c <_vfiprintf_r+0x198>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	065b      	lsls	r3, r3, #25
 8008394:	f53f af7e 	bmi.w	8008294 <_vfiprintf_r+0xf0>
 8008398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800839a:	e77d      	b.n	8008298 <_vfiprintf_r+0xf4>
 800839c:	ab03      	add	r3, sp, #12
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4622      	mov	r2, r4
 80083a2:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <_vfiprintf_r+0x228>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7fc fc7c 	bl	8004ca4 <_printf_i>
 80083ac:	e7ec      	b.n	8008388 <_vfiprintf_r+0x1e4>
 80083ae:	bf00      	nop
 80083b0:	08008ad8 	.word	0x08008ad8
 80083b4:	08008c24 	.word	0x08008c24
 80083b8:	08008af8 	.word	0x08008af8
 80083bc:	08008ab8 	.word	0x08008ab8
 80083c0:	08008c2a 	.word	0x08008c2a
 80083c4:	08008c2e 	.word	0x08008c2e
 80083c8:	08004739 	.word	0x08004739
 80083cc:	0800817f 	.word	0x0800817f

080083d0 <_sbrk_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4c06      	ldr	r4, [pc, #24]	; (80083ec <_sbrk_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4605      	mov	r5, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	f7f9 f898 	bl	8001510 <_sbrk>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_sbrk_r+0x1a>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_sbrk_r+0x1a>
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	200002f4 	.word	0x200002f4

080083f0 <__sread>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	460c      	mov	r4, r1
 80083f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f8:	f000 faa8 	bl	800894c <_read_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	bfab      	itete	ge
 8008400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008402:	89a3      	ldrhlt	r3, [r4, #12]
 8008404:	181b      	addge	r3, r3, r0
 8008406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800840a:	bfac      	ite	ge
 800840c:	6563      	strge	r3, [r4, #84]	; 0x54
 800840e:	81a3      	strhlt	r3, [r4, #12]
 8008410:	bd10      	pop	{r4, pc}

08008412 <__swrite>:
 8008412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008416:	461f      	mov	r7, r3
 8008418:	898b      	ldrh	r3, [r1, #12]
 800841a:	05db      	lsls	r3, r3, #23
 800841c:	4605      	mov	r5, r0
 800841e:	460c      	mov	r4, r1
 8008420:	4616      	mov	r6, r2
 8008422:	d505      	bpl.n	8008430 <__swrite+0x1e>
 8008424:	2302      	movs	r3, #2
 8008426:	2200      	movs	r2, #0
 8008428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842c:	f000 f9d6 	bl	80087dc <_lseek_r>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	4628      	mov	r0, r5
 8008442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008446:	f000 b889 	b.w	800855c <_write_r>

0800844a <__sseek>:
 800844a:	b510      	push	{r4, lr}
 800844c:	460c      	mov	r4, r1
 800844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008452:	f000 f9c3 	bl	80087dc <_lseek_r>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	bf15      	itete	ne
 800845c:	6560      	strne	r0, [r4, #84]	; 0x54
 800845e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008466:	81a3      	strheq	r3, [r4, #12]
 8008468:	bf18      	it	ne
 800846a:	81a3      	strhne	r3, [r4, #12]
 800846c:	bd10      	pop	{r4, pc}

0800846e <__sclose>:
 800846e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008472:	f000 b8f3 	b.w	800865c <_close_r>

08008476 <strncmp>:
 8008476:	b510      	push	{r4, lr}
 8008478:	b16a      	cbz	r2, 8008496 <strncmp+0x20>
 800847a:	3901      	subs	r1, #1
 800847c:	1884      	adds	r4, r0, r2
 800847e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008482:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008486:	4293      	cmp	r3, r2
 8008488:	d103      	bne.n	8008492 <strncmp+0x1c>
 800848a:	42a0      	cmp	r0, r4
 800848c:	d001      	beq.n	8008492 <strncmp+0x1c>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f5      	bne.n	800847e <strncmp+0x8>
 8008492:	1a98      	subs	r0, r3, r2
 8008494:	bd10      	pop	{r4, pc}
 8008496:	4610      	mov	r0, r2
 8008498:	e7fc      	b.n	8008494 <strncmp+0x1e>
	...

0800849c <__swbuf_r>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	460e      	mov	r6, r1
 80084a0:	4614      	mov	r4, r2
 80084a2:	4605      	mov	r5, r0
 80084a4:	b118      	cbz	r0, 80084ae <__swbuf_r+0x12>
 80084a6:	6983      	ldr	r3, [r0, #24]
 80084a8:	b90b      	cbnz	r3, 80084ae <__swbuf_r+0x12>
 80084aa:	f7fe fc61 	bl	8006d70 <__sinit>
 80084ae:	4b21      	ldr	r3, [pc, #132]	; (8008534 <__swbuf_r+0x98>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d12a      	bne.n	800850a <__swbuf_r+0x6e>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	69a3      	ldr	r3, [r4, #24]
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	071a      	lsls	r2, r3, #28
 80084be:	d52e      	bpl.n	800851e <__swbuf_r+0x82>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	b363      	cbz	r3, 800851e <__swbuf_r+0x82>
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	6820      	ldr	r0, [r4, #0]
 80084c8:	1ac0      	subs	r0, r0, r3
 80084ca:	6963      	ldr	r3, [r4, #20]
 80084cc:	b2f6      	uxtb	r6, r6
 80084ce:	4283      	cmp	r3, r0
 80084d0:	4637      	mov	r7, r6
 80084d2:	dc04      	bgt.n	80084de <__swbuf_r+0x42>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f956 	bl	8008788 <_fflush_r>
 80084dc:	bb28      	cbnz	r0, 800852a <__swbuf_r+0x8e>
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	60a3      	str	r3, [r4, #8]
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	701e      	strb	r6, [r3, #0]
 80084ec:	6963      	ldr	r3, [r4, #20]
 80084ee:	3001      	adds	r0, #1
 80084f0:	4283      	cmp	r3, r0
 80084f2:	d004      	beq.n	80084fe <__swbuf_r+0x62>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	07db      	lsls	r3, r3, #31
 80084f8:	d519      	bpl.n	800852e <__swbuf_r+0x92>
 80084fa:	2e0a      	cmp	r6, #10
 80084fc:	d117      	bne.n	800852e <__swbuf_r+0x92>
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	f000 f941 	bl	8008788 <_fflush_r>
 8008506:	b190      	cbz	r0, 800852e <__swbuf_r+0x92>
 8008508:	e00f      	b.n	800852a <__swbuf_r+0x8e>
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <__swbuf_r+0x9c>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d101      	bne.n	8008514 <__swbuf_r+0x78>
 8008510:	68ac      	ldr	r4, [r5, #8]
 8008512:	e7d0      	b.n	80084b6 <__swbuf_r+0x1a>
 8008514:	4b09      	ldr	r3, [pc, #36]	; (800853c <__swbuf_r+0xa0>)
 8008516:	429c      	cmp	r4, r3
 8008518:	bf08      	it	eq
 800851a:	68ec      	ldreq	r4, [r5, #12]
 800851c:	e7cb      	b.n	80084b6 <__swbuf_r+0x1a>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f82d 	bl	8008580 <__swsetup_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	d0cc      	beq.n	80084c4 <__swbuf_r+0x28>
 800852a:	f04f 37ff 	mov.w	r7, #4294967295
 800852e:	4638      	mov	r0, r7
 8008530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008532:	bf00      	nop
 8008534:	08008ad8 	.word	0x08008ad8
 8008538:	08008af8 	.word	0x08008af8
 800853c:	08008ab8 	.word	0x08008ab8

08008540 <__ascii_wctomb>:
 8008540:	b149      	cbz	r1, 8008556 <__ascii_wctomb+0x16>
 8008542:	2aff      	cmp	r2, #255	; 0xff
 8008544:	bf85      	ittet	hi
 8008546:	238a      	movhi	r3, #138	; 0x8a
 8008548:	6003      	strhi	r3, [r0, #0]
 800854a:	700a      	strbls	r2, [r1, #0]
 800854c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008550:	bf98      	it	ls
 8008552:	2001      	movls	r0, #1
 8008554:	4770      	bx	lr
 8008556:	4608      	mov	r0, r1
 8008558:	4770      	bx	lr
	...

0800855c <_write_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4c07      	ldr	r4, [pc, #28]	; (800857c <_write_r+0x20>)
 8008560:	4605      	mov	r5, r0
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	2200      	movs	r2, #0
 8008568:	6022      	str	r2, [r4, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f7f8 ff7f 	bl	800146e <_write>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_write_r+0x1e>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	b103      	cbz	r3, 800857a <_write_r+0x1e>
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	200002f4 	.word	0x200002f4

08008580 <__swsetup_r>:
 8008580:	4b32      	ldr	r3, [pc, #200]	; (800864c <__swsetup_r+0xcc>)
 8008582:	b570      	push	{r4, r5, r6, lr}
 8008584:	681d      	ldr	r5, [r3, #0]
 8008586:	4606      	mov	r6, r0
 8008588:	460c      	mov	r4, r1
 800858a:	b125      	cbz	r5, 8008596 <__swsetup_r+0x16>
 800858c:	69ab      	ldr	r3, [r5, #24]
 800858e:	b913      	cbnz	r3, 8008596 <__swsetup_r+0x16>
 8008590:	4628      	mov	r0, r5
 8008592:	f7fe fbed 	bl	8006d70 <__sinit>
 8008596:	4b2e      	ldr	r3, [pc, #184]	; (8008650 <__swsetup_r+0xd0>)
 8008598:	429c      	cmp	r4, r3
 800859a:	d10f      	bne.n	80085bc <__swsetup_r+0x3c>
 800859c:	686c      	ldr	r4, [r5, #4]
 800859e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	0715      	lsls	r5, r2, #28
 80085a6:	d42c      	bmi.n	8008602 <__swsetup_r+0x82>
 80085a8:	06d0      	lsls	r0, r2, #27
 80085aa:	d411      	bmi.n	80085d0 <__swsetup_r+0x50>
 80085ac:	2209      	movs	r2, #9
 80085ae:	6032      	str	r2, [r6, #0]
 80085b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b4:	81a3      	strh	r3, [r4, #12]
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	e03e      	b.n	800863a <__swsetup_r+0xba>
 80085bc:	4b25      	ldr	r3, [pc, #148]	; (8008654 <__swsetup_r+0xd4>)
 80085be:	429c      	cmp	r4, r3
 80085c0:	d101      	bne.n	80085c6 <__swsetup_r+0x46>
 80085c2:	68ac      	ldr	r4, [r5, #8]
 80085c4:	e7eb      	b.n	800859e <__swsetup_r+0x1e>
 80085c6:	4b24      	ldr	r3, [pc, #144]	; (8008658 <__swsetup_r+0xd8>)
 80085c8:	429c      	cmp	r4, r3
 80085ca:	bf08      	it	eq
 80085cc:	68ec      	ldreq	r4, [r5, #12]
 80085ce:	e7e6      	b.n	800859e <__swsetup_r+0x1e>
 80085d0:	0751      	lsls	r1, r2, #29
 80085d2:	d512      	bpl.n	80085fa <__swsetup_r+0x7a>
 80085d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d6:	b141      	cbz	r1, 80085ea <__swsetup_r+0x6a>
 80085d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085dc:	4299      	cmp	r1, r3
 80085de:	d002      	beq.n	80085e6 <__swsetup_r+0x66>
 80085e0:	4630      	mov	r0, r6
 80085e2:	f7ff fbbb 	bl	8007d5c <_free_r>
 80085e6:	2300      	movs	r3, #0
 80085e8:	6363      	str	r3, [r4, #52]	; 0x34
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	2300      	movs	r3, #0
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f043 0308 	orr.w	r3, r3, #8
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	b94b      	cbnz	r3, 800861a <__swsetup_r+0x9a>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800860c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008610:	d003      	beq.n	800861a <__swsetup_r+0x9a>
 8008612:	4621      	mov	r1, r4
 8008614:	4630      	mov	r0, r6
 8008616:	f000 f917 	bl	8008848 <__smakebuf_r>
 800861a:	89a2      	ldrh	r2, [r4, #12]
 800861c:	f012 0301 	ands.w	r3, r2, #1
 8008620:	d00c      	beq.n	800863c <__swsetup_r+0xbc>
 8008622:	2300      	movs	r3, #0
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	425b      	negs	r3, r3
 800862a:	61a3      	str	r3, [r4, #24]
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	b953      	cbnz	r3, 8008646 <__swsetup_r+0xc6>
 8008630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008634:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008638:	d1ba      	bne.n	80085b0 <__swsetup_r+0x30>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	0792      	lsls	r2, r2, #30
 800863e:	bf58      	it	pl
 8008640:	6963      	ldrpl	r3, [r4, #20]
 8008642:	60a3      	str	r3, [r4, #8]
 8008644:	e7f2      	b.n	800862c <__swsetup_r+0xac>
 8008646:	2000      	movs	r0, #0
 8008648:	e7f7      	b.n	800863a <__swsetup_r+0xba>
 800864a:	bf00      	nop
 800864c:	2000000c 	.word	0x2000000c
 8008650:	08008ad8 	.word	0x08008ad8
 8008654:	08008af8 	.word	0x08008af8
 8008658:	08008ab8 	.word	0x08008ab8

0800865c <_close_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4c06      	ldr	r4, [pc, #24]	; (8008678 <_close_r+0x1c>)
 8008660:	2300      	movs	r3, #0
 8008662:	4605      	mov	r5, r0
 8008664:	4608      	mov	r0, r1
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	f7f8 ff1d 	bl	80014a6 <_close>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_close_r+0x1a>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	b103      	cbz	r3, 8008676 <_close_r+0x1a>
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	200002f4 	.word	0x200002f4

0800867c <__sflush_r>:
 800867c:	898a      	ldrh	r2, [r1, #12]
 800867e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	4605      	mov	r5, r0
 8008684:	0710      	lsls	r0, r2, #28
 8008686:	460c      	mov	r4, r1
 8008688:	d458      	bmi.n	800873c <__sflush_r+0xc0>
 800868a:	684b      	ldr	r3, [r1, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	dc05      	bgt.n	800869c <__sflush_r+0x20>
 8008690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	dc02      	bgt.n	800869c <__sflush_r+0x20>
 8008696:	2000      	movs	r0, #0
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800869e:	2e00      	cmp	r6, #0
 80086a0:	d0f9      	beq.n	8008696 <__sflush_r+0x1a>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086a8:	682f      	ldr	r7, [r5, #0]
 80086aa:	6a21      	ldr	r1, [r4, #32]
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	d032      	beq.n	8008716 <__sflush_r+0x9a>
 80086b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	075a      	lsls	r2, r3, #29
 80086b6:	d505      	bpl.n	80086c4 <__sflush_r+0x48>
 80086b8:	6863      	ldr	r3, [r4, #4]
 80086ba:	1ac0      	subs	r0, r0, r3
 80086bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086be:	b10b      	cbz	r3, 80086c4 <__sflush_r+0x48>
 80086c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086c2:	1ac0      	subs	r0, r0, r3
 80086c4:	2300      	movs	r3, #0
 80086c6:	4602      	mov	r2, r0
 80086c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ca:	6a21      	ldr	r1, [r4, #32]
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b0      	blx	r6
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	d106      	bne.n	80086e4 <__sflush_r+0x68>
 80086d6:	6829      	ldr	r1, [r5, #0]
 80086d8:	291d      	cmp	r1, #29
 80086da:	d848      	bhi.n	800876e <__sflush_r+0xf2>
 80086dc:	4a29      	ldr	r2, [pc, #164]	; (8008784 <__sflush_r+0x108>)
 80086de:	40ca      	lsrs	r2, r1
 80086e0:	07d6      	lsls	r6, r2, #31
 80086e2:	d544      	bpl.n	800876e <__sflush_r+0xf2>
 80086e4:	2200      	movs	r2, #0
 80086e6:	6062      	str	r2, [r4, #4]
 80086e8:	04d9      	lsls	r1, r3, #19
 80086ea:	6922      	ldr	r2, [r4, #16]
 80086ec:	6022      	str	r2, [r4, #0]
 80086ee:	d504      	bpl.n	80086fa <__sflush_r+0x7e>
 80086f0:	1c42      	adds	r2, r0, #1
 80086f2:	d101      	bne.n	80086f8 <__sflush_r+0x7c>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b903      	cbnz	r3, 80086fa <__sflush_r+0x7e>
 80086f8:	6560      	str	r0, [r4, #84]	; 0x54
 80086fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fc:	602f      	str	r7, [r5, #0]
 80086fe:	2900      	cmp	r1, #0
 8008700:	d0c9      	beq.n	8008696 <__sflush_r+0x1a>
 8008702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008706:	4299      	cmp	r1, r3
 8008708:	d002      	beq.n	8008710 <__sflush_r+0x94>
 800870a:	4628      	mov	r0, r5
 800870c:	f7ff fb26 	bl	8007d5c <_free_r>
 8008710:	2000      	movs	r0, #0
 8008712:	6360      	str	r0, [r4, #52]	; 0x34
 8008714:	e7c0      	b.n	8008698 <__sflush_r+0x1c>
 8008716:	2301      	movs	r3, #1
 8008718:	4628      	mov	r0, r5
 800871a:	47b0      	blx	r6
 800871c:	1c41      	adds	r1, r0, #1
 800871e:	d1c8      	bne.n	80086b2 <__sflush_r+0x36>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c5      	beq.n	80086b2 <__sflush_r+0x36>
 8008726:	2b1d      	cmp	r3, #29
 8008728:	d001      	beq.n	800872e <__sflush_r+0xb2>
 800872a:	2b16      	cmp	r3, #22
 800872c:	d101      	bne.n	8008732 <__sflush_r+0xb6>
 800872e:	602f      	str	r7, [r5, #0]
 8008730:	e7b1      	b.n	8008696 <__sflush_r+0x1a>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	e7ad      	b.n	8008698 <__sflush_r+0x1c>
 800873c:	690f      	ldr	r7, [r1, #16]
 800873e:	2f00      	cmp	r7, #0
 8008740:	d0a9      	beq.n	8008696 <__sflush_r+0x1a>
 8008742:	0793      	lsls	r3, r2, #30
 8008744:	680e      	ldr	r6, [r1, #0]
 8008746:	bf08      	it	eq
 8008748:	694b      	ldreq	r3, [r1, #20]
 800874a:	600f      	str	r7, [r1, #0]
 800874c:	bf18      	it	ne
 800874e:	2300      	movne	r3, #0
 8008750:	eba6 0807 	sub.w	r8, r6, r7
 8008754:	608b      	str	r3, [r1, #8]
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	dd9c      	ble.n	8008696 <__sflush_r+0x1a>
 800875c:	4643      	mov	r3, r8
 800875e:	463a      	mov	r2, r7
 8008760:	6a21      	ldr	r1, [r4, #32]
 8008762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008764:	4628      	mov	r0, r5
 8008766:	47b0      	blx	r6
 8008768:	2800      	cmp	r0, #0
 800876a:	dc06      	bgt.n	800877a <__sflush_r+0xfe>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e78e      	b.n	8008698 <__sflush_r+0x1c>
 800877a:	4407      	add	r7, r0
 800877c:	eba8 0800 	sub.w	r8, r8, r0
 8008780:	e7e9      	b.n	8008756 <__sflush_r+0xda>
 8008782:	bf00      	nop
 8008784:	20400001 	.word	0x20400001

08008788 <_fflush_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	690b      	ldr	r3, [r1, #16]
 800878c:	4605      	mov	r5, r0
 800878e:	460c      	mov	r4, r1
 8008790:	b1db      	cbz	r3, 80087ca <_fflush_r+0x42>
 8008792:	b118      	cbz	r0, 800879c <_fflush_r+0x14>
 8008794:	6983      	ldr	r3, [r0, #24]
 8008796:	b90b      	cbnz	r3, 800879c <_fflush_r+0x14>
 8008798:	f7fe faea 	bl	8006d70 <__sinit>
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <_fflush_r+0x48>)
 800879e:	429c      	cmp	r4, r3
 80087a0:	d109      	bne.n	80087b6 <_fflush_r+0x2e>
 80087a2:	686c      	ldr	r4, [r5, #4]
 80087a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a8:	b17b      	cbz	r3, 80087ca <_fflush_r+0x42>
 80087aa:	4621      	mov	r1, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087b2:	f7ff bf63 	b.w	800867c <__sflush_r>
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <_fflush_r+0x4c>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	d101      	bne.n	80087c0 <_fflush_r+0x38>
 80087bc:	68ac      	ldr	r4, [r5, #8]
 80087be:	e7f1      	b.n	80087a4 <_fflush_r+0x1c>
 80087c0:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <_fflush_r+0x50>)
 80087c2:	429c      	cmp	r4, r3
 80087c4:	bf08      	it	eq
 80087c6:	68ec      	ldreq	r4, [r5, #12]
 80087c8:	e7ec      	b.n	80087a4 <_fflush_r+0x1c>
 80087ca:	2000      	movs	r0, #0
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	08008ad8 	.word	0x08008ad8
 80087d4:	08008af8 	.word	0x08008af8
 80087d8:	08008ab8 	.word	0x08008ab8

080087dc <_lseek_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4c07      	ldr	r4, [pc, #28]	; (80087fc <_lseek_r+0x20>)
 80087e0:	4605      	mov	r5, r0
 80087e2:	4608      	mov	r0, r1
 80087e4:	4611      	mov	r1, r2
 80087e6:	2200      	movs	r2, #0
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f7f8 fe82 	bl	80014f4 <_lseek>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_lseek_r+0x1e>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_lseek_r+0x1e>
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	200002f4 	.word	0x200002f4

08008800 <__swhatbuf_r>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	460e      	mov	r6, r1
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	2900      	cmp	r1, #0
 800880a:	b096      	sub	sp, #88	; 0x58
 800880c:	4614      	mov	r4, r2
 800880e:	461d      	mov	r5, r3
 8008810:	da07      	bge.n	8008822 <__swhatbuf_r+0x22>
 8008812:	2300      	movs	r3, #0
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	89b3      	ldrh	r3, [r6, #12]
 8008818:	061a      	lsls	r2, r3, #24
 800881a:	d410      	bmi.n	800883e <__swhatbuf_r+0x3e>
 800881c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008820:	e00e      	b.n	8008840 <__swhatbuf_r+0x40>
 8008822:	466a      	mov	r2, sp
 8008824:	f000 f8a4 	bl	8008970 <_fstat_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	dbf2      	blt.n	8008812 <__swhatbuf_r+0x12>
 800882c:	9a01      	ldr	r2, [sp, #4]
 800882e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008836:	425a      	negs	r2, r3
 8008838:	415a      	adcs	r2, r3
 800883a:	602a      	str	r2, [r5, #0]
 800883c:	e7ee      	b.n	800881c <__swhatbuf_r+0x1c>
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	2000      	movs	r0, #0
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	b016      	add	sp, #88	; 0x58
 8008846:	bd70      	pop	{r4, r5, r6, pc}

08008848 <__smakebuf_r>:
 8008848:	898b      	ldrh	r3, [r1, #12]
 800884a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800884c:	079d      	lsls	r5, r3, #30
 800884e:	4606      	mov	r6, r0
 8008850:	460c      	mov	r4, r1
 8008852:	d507      	bpl.n	8008864 <__smakebuf_r+0x1c>
 8008854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	2301      	movs	r3, #1
 800885e:	6163      	str	r3, [r4, #20]
 8008860:	b002      	add	sp, #8
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	ab01      	add	r3, sp, #4
 8008866:	466a      	mov	r2, sp
 8008868:	f7ff ffca 	bl	8008800 <__swhatbuf_r>
 800886c:	9900      	ldr	r1, [sp, #0]
 800886e:	4605      	mov	r5, r0
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff fac1 	bl	8007df8 <_malloc_r>
 8008876:	b948      	cbnz	r0, 800888c <__smakebuf_r+0x44>
 8008878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887c:	059a      	lsls	r2, r3, #22
 800887e:	d4ef      	bmi.n	8008860 <__smakebuf_r+0x18>
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	f043 0302 	orr.w	r3, r3, #2
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	e7e3      	b.n	8008854 <__smakebuf_r+0xc>
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <__smakebuf_r+0x7c>)
 800888e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	6020      	str	r0, [r4, #0]
 8008894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	6163      	str	r3, [r4, #20]
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	6120      	str	r0, [r4, #16]
 80088a2:	b15b      	cbz	r3, 80088bc <__smakebuf_r+0x74>
 80088a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088a8:	4630      	mov	r0, r6
 80088aa:	f000 f873 	bl	8008994 <_isatty_r>
 80088ae:	b128      	cbz	r0, 80088bc <__smakebuf_r+0x74>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	431d      	orrs	r5, r3
 80088c0:	81a5      	strh	r5, [r4, #12]
 80088c2:	e7cd      	b.n	8008860 <__smakebuf_r+0x18>
 80088c4:	08006d39 	.word	0x08006d39

080088c8 <memmove>:
 80088c8:	4288      	cmp	r0, r1
 80088ca:	b510      	push	{r4, lr}
 80088cc:	eb01 0302 	add.w	r3, r1, r2
 80088d0:	d807      	bhi.n	80088e2 <memmove+0x1a>
 80088d2:	1e42      	subs	r2, r0, #1
 80088d4:	4299      	cmp	r1, r3
 80088d6:	d00a      	beq.n	80088ee <memmove+0x26>
 80088d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088e0:	e7f8      	b.n	80088d4 <memmove+0xc>
 80088e2:	4283      	cmp	r3, r0
 80088e4:	d9f5      	bls.n	80088d2 <memmove+0xa>
 80088e6:	1881      	adds	r1, r0, r2
 80088e8:	1ad2      	subs	r2, r2, r3
 80088ea:	42d3      	cmn	r3, r2
 80088ec:	d100      	bne.n	80088f0 <memmove+0x28>
 80088ee:	bd10      	pop	{r4, pc}
 80088f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088f8:	e7f7      	b.n	80088ea <memmove+0x22>

080088fa <__malloc_lock>:
 80088fa:	4770      	bx	lr

080088fc <__malloc_unlock>:
 80088fc:	4770      	bx	lr

080088fe <_realloc_r>:
 80088fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008900:	4607      	mov	r7, r0
 8008902:	4614      	mov	r4, r2
 8008904:	460e      	mov	r6, r1
 8008906:	b921      	cbnz	r1, 8008912 <_realloc_r+0x14>
 8008908:	4611      	mov	r1, r2
 800890a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800890e:	f7ff ba73 	b.w	8007df8 <_malloc_r>
 8008912:	b922      	cbnz	r2, 800891e <_realloc_r+0x20>
 8008914:	f7ff fa22 	bl	8007d5c <_free_r>
 8008918:	4625      	mov	r5, r4
 800891a:	4628      	mov	r0, r5
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891e:	f000 f849 	bl	80089b4 <_malloc_usable_size_r>
 8008922:	42a0      	cmp	r0, r4
 8008924:	d20f      	bcs.n	8008946 <_realloc_r+0x48>
 8008926:	4621      	mov	r1, r4
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff fa65 	bl	8007df8 <_malloc_r>
 800892e:	4605      	mov	r5, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	d0f2      	beq.n	800891a <_realloc_r+0x1c>
 8008934:	4631      	mov	r1, r6
 8008936:	4622      	mov	r2, r4
 8008938:	f7fe fdf8 	bl	800752c <memcpy>
 800893c:	4631      	mov	r1, r6
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff fa0c 	bl	8007d5c <_free_r>
 8008944:	e7e9      	b.n	800891a <_realloc_r+0x1c>
 8008946:	4635      	mov	r5, r6
 8008948:	e7e7      	b.n	800891a <_realloc_r+0x1c>
	...

0800894c <_read_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4c07      	ldr	r4, [pc, #28]	; (800896c <_read_r+0x20>)
 8008950:	4605      	mov	r5, r0
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	2200      	movs	r2, #0
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	f7f8 fd6a 	bl	8001434 <_read>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_read_r+0x1e>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	b103      	cbz	r3, 800896a <_read_r+0x1e>
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	200002f4 	.word	0x200002f4

08008970 <_fstat_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4c07      	ldr	r4, [pc, #28]	; (8008990 <_fstat_r+0x20>)
 8008974:	2300      	movs	r3, #0
 8008976:	4605      	mov	r5, r0
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	f7f8 fd9e 	bl	80014be <_fstat>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d102      	bne.n	800898c <_fstat_r+0x1c>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	b103      	cbz	r3, 800898c <_fstat_r+0x1c>
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	bd38      	pop	{r3, r4, r5, pc}
 800898e:	bf00      	nop
 8008990:	200002f4 	.word	0x200002f4

08008994 <_isatty_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4c06      	ldr	r4, [pc, #24]	; (80089b0 <_isatty_r+0x1c>)
 8008998:	2300      	movs	r3, #0
 800899a:	4605      	mov	r5, r0
 800899c:	4608      	mov	r0, r1
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	f7f8 fd9d 	bl	80014de <_isatty>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_isatty_r+0x1a>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_isatty_r+0x1a>
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	200002f4 	.word	0x200002f4

080089b4 <_malloc_usable_size_r>:
 80089b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b8:	1f18      	subs	r0, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bfbc      	itt	lt
 80089be:	580b      	ldrlt	r3, [r1, r0]
 80089c0:	18c0      	addlt	r0, r0, r3
 80089c2:	4770      	bx	lr

080089c4 <_init>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	bf00      	nop
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr

080089d0 <_fini>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr
